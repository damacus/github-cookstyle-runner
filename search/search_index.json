{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GitHub Cookstyle Runner","text":"<p>Welcome to the GitHub Cookstyle Runner documentation!</p>"},{"location":"#overview","title":"Overview","text":"<p>The GitHub Cookstyle Runner is an automated tool designed to run Cookstyle (a RuboCop-based linter for Chef) against repositories in a GitHub organization and automatically create pull requests with fixes.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Automated Linting: Automatically runs Cookstyle on Chef cookbooks</li> <li>Pull Request Creation: Creates PRs with auto-correctable fixes</li> <li>Issue Creation: Creates issues for manual fixes with detailed instructions</li> <li>Intelligent Caching: Tracks repository state to avoid redundant processing</li> <li>Multi-threaded Processing: Processes multiple repositories in parallel</li> <li>Flexible Filtering: Process specific repositories or exclude certain ones</li> <li>GitHub App Authentication: Secure authentication using GitHub Apps</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Get started quickly with Docker Compose:</p> <pre><code># Create docker-compose.yml\ncat &gt; docker-compose.yml &lt;&lt;EOF\nservices:\n  cookstyle-runner:\n    image: ghcr.io/damacus/github-cookstyle-runner:latest\n    environment:\n      - GITHUB_APP_ID=\\${GITHUB_APP_ID}\n      - GITHUB_APP_INSTALLATION_ID=\\${GITHUB_APP_INSTALLATION_ID}\n      - GITHUB_APP_PRIVATE_KEY=\\${GITHUB_APP_PRIVATE_KEY}\n      - GCR_DESTINATION_REPO_OWNER=your-org\n      - GCR_DESTINATION_REPO_TOPICS=chef-cookbook\n      - GCR_GIT_EMAIL=bot@example.com\n      - GCR_GIT_NAME=Cookstyle Bot\n    volumes:\n      - cookstyle_cache:/app/.cache\nvolumes:\n  cookstyle_cache:\nEOF\n\n# Run\ndocker-compose up\n</code></pre> <p>For detailed installation instructions, see the Installation Guide.</p>"},{"location":"#use-cases","title":"Use Cases","text":""},{"location":"#continuous-compliance","title":"Continuous Compliance","text":"<p>Run the Cookstyle Runner on a schedule (e.g., daily via Kubernetes CronJob) to ensure all your Chef cookbooks stay compliant with style guidelines.</p>"},{"location":"#migration-assistance","title":"Migration Assistance","text":"<p>Use the runner to help migrate large numbers of cookbooks to new Cookstyle rules or Chef versions by automatically fixing what can be fixed and creating issues for manual review.</p>"},{"location":"#code-review-automation","title":"Code Review Automation","text":"<p>Integrate into your CI/CD pipeline to automatically check and fix style issues before code review.</p>"},{"location":"#architecture","title":"Architecture","text":"<p>The application is built with:</p> <ul> <li>Ruby 3.4: Modern Ruby with type checking via Sorbet</li> <li>GitHub API: Uses GitHub Apps for secure authentication</li> <li>Docker: Containerized for easy deployment</li> <li>Multi-threading: Concurrent processing for performance</li> </ul>"},{"location":"#getting-help","title":"Getting Help","text":"<ul> <li>Installation Issues: See Troubleshooting</li> <li>Configuration Questions: Check Configuration Guide</li> <li>Bug Reports: Open an issue</li> <li>Feature Requests: Start a discussion</li> </ul>"},{"location":"#next-steps","title":"Next Steps","text":"<ul> <li>Install the application</li> <li>Configure for your organization</li> <li>Learn about advanced features</li> </ul>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#unreleased","title":"Unreleased","text":""},{"location":"CHANGELOG/#200-2021-08-11","title":"2.0.0 - 2021-08-11","text":"<ul> <li>Breaking Change: Defaults to looking for main branches, introduces new cli arg for setting default branch name</li> </ul>"},{"location":"CHANGELOG/#143-2020-11-18","title":"1.4.3 - 2020-11-18","text":"<ul> <li>Removed branch cleanup workflow as now using github repo settings</li> </ul>"},{"location":"CHANGELOG/#142-2020-11-18","title":"1.4.2 - 2020-11-18","text":"<ul> <li>Fixed bug with dockerhub push due to set-env deprecation</li> </ul>"},{"location":"CHANGELOG/#141-2020-10-25","title":"1.4.1 - 2020-10-25","text":"<ul> <li>Resolved issues with pagination:</li> <li>Set auth headers correctly</li> <li>Removed duplicate results from being added</li> </ul>"},{"location":"CHANGELOG/#131","title":"1.3.1","text":"<p>Stop <code>\"</code> blowing up the builds</p>"},{"location":"CHANGELOG/#130","title":"1.3.0","text":"<p>Remove Chef Workstation as cookstyle is not up to date there Installs cookstyle manually</p>"},{"location":"CHANGELOG/#120","title":"1.2.0","text":"<p>Removed user configurable pull request body Pull request body now has the cookstyle version in it</p>"},{"location":"CHANGELOG/#111","title":"1.1.1","text":"<p>Make change log marker case insensitive</p>"},{"location":"CHANGELOG/#100","title":"1.0.0","text":"<p>Full initial release of the application with all functionality working</p>"},{"location":"INSTALLATION/","title":"Installation Guide","text":"<p>This guide covers installing and running the GitHub Cookstyle Runner in different environments.</p>"},{"location":"INSTALLATION/#prerequisites","title":"Prerequisites","text":"<p>Before installing, ensure you have:</p> <ol> <li>GitHub App Credentials:</li> <li>GitHub App ID</li> <li>GitHub App Installation ID</li> <li>GitHub App Private Key (PEM format)</li> <li> <p>See GitHub App Setup Guide for creating a GitHub App</p> </li> <li> <p>Required Permissions:</p> </li> <li> <p>The GitHub App must have permissions to:</p> <ul> <li>Read repository contents</li> <li>Create branches</li> <li>Create pull requests</li> <li>Read repository metadata</li> </ul> </li> <li> <p>Environment Requirements:</p> </li> <li>Docker (for docker-compose installation)</li> <li>Kubernetes cluster (for Kubernetes installation)</li> <li>kubectl configured (for Kubernetes installation)</li> </ol>"},{"location":"INSTALLATION/#installation-methods","title":"Installation Methods","text":""},{"location":"INSTALLATION/#1-docker-compose","title":"1. Docker Compose","text":"<p>Docker Compose is ideal for local development, testing, or running on a single host.</p>"},{"location":"INSTALLATION/#setup","title":"Setup","text":"<ol> <li>Create a docker-compose.yml file:</li> </ol> <pre><code>services:\n  cookstyle-runner:\n    image: ghcr.io/damacus/github-cookstyle-runner:latest\n    volumes:\n      # Persistent cache for improved performance\n      - cookstyle_cache:/app/.cache\n      # Optional: mount custom configuration\n      # - ./config/settings/local.yml:/app/config/settings/local.yml\n    environment:\n      # Required: GitHub App Authentication\n      - GITHUB_APP_ID=${GITHUB_APP_ID}\n      - GITHUB_APP_INSTALLATION_ID=${GITHUB_APP_INSTALLATION_ID}\n      - GITHUB_APP_PRIVATE_KEY=${GITHUB_APP_PRIVATE_KEY}\n\n      # Required: Repository Configuration\n      - GCR_DESTINATION_REPO_OWNER=your-org-name\n      - GCR_DESTINATION_REPO_TOPICS=chef-cookbook\n\n      # Required: Git Configuration\n      - GCR_GIT_EMAIL=bot@example.com\n      - GCR_GIT_NAME=Cookstyle Bot\n\n      # Optional: Branch Configuration\n      - GCR_BRANCH_NAME=automated/cookstyle\n      - GCR_DEFAULT_GIT_BRANCH=main\n\n      # Optional: Pull Request Configuration\n      - GCR_PULL_REQUEST_TITLE=Automated PR: Cookstyle Changes\n      - GCR_PULL_REQUEST_LABELS=tech-debt,automated\n      - GCR_CREATE_MANUAL_FIX_PRS=1\n\n      # Optional: Cache Configuration\n      - GCR_USE_CACHE=1\n      - GCR_CACHE_MAX_AGE=7\n      - GCR_FORCE_REFRESH=0\n\n      # Optional: Performance Configuration\n      - GCR_THREAD_COUNT=4\n      - GCR_RETRY_COUNT=3\n      - GCR_DEBUG_MODE=0\n\n      # Optional: Repository Filtering\n      # - GCR_FILTER_REPOS=repo1,repo2,repo3\n\nvolumes:\n  cookstyle_cache:\n</code></pre> <ol> <li>Create a .env file (recommended for sensitive data):</li> </ol> <pre><code># .env\nGITHUB_APP_ID=123456\nGITHUB_APP_INSTALLATION_ID=789012\nGITHUB_APP_PRIVATE_KEY=\"-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEA...\n-----END RSA PRIVATE KEY-----\"\n</code></pre> <ol> <li>Run the application:</li> </ol> <pre><code># One-time run\ndocker-compose up\n\n# Run in background\ndocker-compose up -d\n\n# View logs\ndocker-compose logs -f\n\n# Stop the application\ndocker-compose down\n</code></pre>"},{"location":"INSTALLATION/#scheduled-runs-with-docker-compose","title":"Scheduled Runs with Docker Compose","text":"<p>For scheduled runs, use a cron job on the host:</p> <pre><code># Edit crontab\ncrontab -e\n\n# Add entry to run daily at 2 AM\n0 2 * * * cd /path/to/cookstyle-runner &amp;&amp; docker-compose up\n</code></pre>"},{"location":"INSTALLATION/#2-kubernetes","title":"2. Kubernetes","text":"<p>Kubernetes is ideal for production deployments, especially when using CronJobs for scheduled runs.</p>"},{"location":"INSTALLATION/#setup_1","title":"Setup","text":"<ol> <li>Create a Secret for GitHub App credentials:</li> </ol> <pre><code># Create secret from file\nkubectl create secret generic cookstyle-runner-secrets \\\n  --from-literal=github-app-id=123456 \\\n  --from-literal=github-app-installation-id=789012 \\\n  --from-file=github-app-private-key=/path/to/private-key.pem \\\n  --namespace=default\n</code></pre> <p>Or create from YAML:</p> <pre><code># secrets.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: cookstyle-runner-secrets\n  namespace: default\ntype: Opaque\nstringData:\n  github-app-id: \"123456\"\n  github-app-installation-id: \"789012\"\n  github-app-private-key: |\n    -----BEGIN RSA PRIVATE KEY-----\n    MIIEpAIBAAKCAQEA...\n    -----END RSA PRIVATE KEY-----\n</code></pre> <pre><code>kubectl apply -f secrets.yaml\n</code></pre> <ol> <li>Create a ConfigMap for application configuration:</li> </ol> <pre><code># configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: cookstyle-runner-config\n  namespace: default\ndata:\n  GCR_DESTINATION_REPO_OWNER: \"your-org-name\"\n  GCR_DESTINATION_REPO_TOPICS: \"chef-cookbook\"\n  GCR_GIT_EMAIL: \"bot@example.com\"\n  GCR_GIT_NAME: \"Cookstyle Bot\"\n  GCR_BRANCH_NAME: \"automated/cookstyle\"\n  GCR_DEFAULT_GIT_BRANCH: \"main\"\n  GCR_PULL_REQUEST_TITLE: \"Automated PR: Cookstyle Changes\"\n  GCR_PULL_REQUEST_LABELS: \"tech-debt,automated\"\n  GCR_CREATE_MANUAL_FIX_PRS: \"1\"\n  GCR_USE_CACHE: \"1\"\n  GCR_CACHE_MAX_AGE: \"7\"\n  GCR_THREAD_COUNT: \"4\"\n  GCR_RETRY_COUNT: \"3\"\n  GCR_DEBUG_MODE: \"0\"\n</code></pre> <pre><code>kubectl apply -f configmap.yaml\n</code></pre> <ol> <li>Create a CronJob for scheduled runs:</li> </ol> <pre><code># cronjob.yaml\napiVersion: batch/v1\nkind: CronJob\nmetadata:\n  name: cookstyle-runner\n  namespace: default\nspec:\n  # Run daily at 2 AM UTC\n  schedule: \"0 2 * * *\"\n\n  # Keep last 3 successful and 1 failed job for debugging\n  successfulJobsHistoryLimit: 3\n  failedJobsHistoryLimit: 1\n\n  # Don't start new job if previous is still running\n  concurrencyPolicy: Forbid\n\n  jobTemplate:\n    spec:\n      # Clean up completed jobs after 1 hour\n      ttlSecondsAfterFinished: 3600\n\n      template:\n        metadata:\n          labels:\n            app: cookstyle-runner\n        spec:\n          restartPolicy: OnFailure\n\n          containers:\n          - name: cookstyle-runner\n            image: ghcr.io/damacus/github-cookstyle-runner:latest\n            imagePullPolicy: Always\n\n            # Resource limits (adjust based on your needs)\n            resources:\n              requests:\n                memory: \"512Mi\"\n                cpu: \"500m\"\n              limits:\n                memory: \"2Gi\"\n                cpu: \"2000m\"\n\n            # Environment variables from ConfigMap\n            envFrom:\n            - configMapRef:\n                name: cookstyle-runner-config\n\n            # Sensitive environment variables from Secret\n            env:\n            - name: GITHUB_APP_ID\n              valueFrom:\n                secretKeyRef:\n                  name: cookstyle-runner-secrets\n                  key: github-app-id\n            - name: GITHUB_APP_INSTALLATION_ID\n              valueFrom:\n                secretKeyRef:\n                  name: cookstyle-runner-secrets\n                  key: github-app-installation-id\n            - name: GITHUB_APP_PRIVATE_KEY\n              valueFrom:\n                secretKeyRef:\n                  name: cookstyle-runner-secrets\n                  key: github-app-private-key\n\n            # Persistent cache volume\n            volumeMounts:\n            - name: cache\n              mountPath: /app/.cache\n\n          volumes:\n          - name: cache\n            persistentVolumeClaim:\n              claimName: cookstyle-runner-cache\n</code></pre> <ol> <li>Create a PersistentVolumeClaim for cache:</li> </ol> <pre><code># pvc.yaml\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: cookstyle-runner-cache\n  namespace: default\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 5Gi\n  # Optional: specify storage class\n  # storageClassName: standard\n</code></pre> <ol> <li>Deploy to Kubernetes:</li> </ol> <pre><code># Apply all resources\nkubectl apply -f secrets.yaml\nkubectl apply -f configmap.yaml\nkubectl apply -f pvc.yaml\nkubectl apply -f cronjob.yaml\n\n# Verify deployment\nkubectl get cronjob cookstyle-runner\nkubectl get pvc cookstyle-runner-cache\n\n# Manually trigger a job for testing\nkubectl create job --from=cronjob/cookstyle-runner cookstyle-runner-manual-test\n\n# View job logs\nkubectl logs -f job/cookstyle-runner-manual-test\n\n# Clean up manual test job\nkubectl delete job cookstyle-runner-manual-test\n</code></pre>"},{"location":"INSTALLATION/#alternative-kubernetes-job-one-time-run","title":"Alternative: Kubernetes Job (One-time Run)","text":"<p>For one-time runs instead of scheduled CronJobs:</p> <pre><code># job.yaml\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: cookstyle-runner-oneshot\n  namespace: default\nspec:\n  ttlSecondsAfterFinished: 3600\n  template:\n    metadata:\n      labels:\n        app: cookstyle-runner\n    spec:\n      restartPolicy: OnFailure\n      containers:\n      - name: cookstyle-runner\n        image: ghcr.io/damacus/github-cookstyle-runner:latest\n        envFrom:\n        - configMapRef:\n            name: cookstyle-runner-config\n        env:\n        - name: GITHUB_APP_ID\n          valueFrom:\n            secretKeyRef:\n              name: cookstyle-runner-secrets\n              key: github-app-id\n        - name: GITHUB_APP_INSTALLATION_ID\n          valueFrom:\n            secretKeyRef:\n              name: cookstyle-runner-secrets\n              key: github-app-installation-id\n        - name: GITHUB_APP_PRIVATE_KEY\n          valueFrom:\n            secretKeyRef:\n              name: cookstyle-runner-secrets\n              key: github-app-private-key\n        volumeMounts:\n        - name: cache\n          mountPath: /app/.cache\n      volumes:\n      - name: cache\n        persistentVolumeClaim:\n          claimName: cookstyle-runner-cache\n</code></pre> <pre><code>kubectl apply -f job.yaml\nkubectl logs -f job/cookstyle-runner-oneshot\n</code></pre>"},{"location":"INSTALLATION/#configuration","title":"Configuration","text":"<p>See the main README.md for detailed configuration options.</p>"},{"location":"INSTALLATION/#common-configuration-patterns","title":"Common Configuration Patterns","text":""},{"location":"INSTALLATION/#process-only-specific-repositories","title":"Process Only Specific Repositories","text":"<pre><code>environment:\n  - GCR_FILTER_REPOS=repo1,repo2,repo3\n</code></pre>"},{"location":"INSTALLATION/#enable-debug-logging","title":"Enable Debug Logging","text":"<pre><code>environment:\n  - GCR_DEBUG_MODE=1\n</code></pre>"},{"location":"INSTALLATION/#force-refresh-all-repositories","title":"Force Refresh All Repositories","text":"<pre><code>environment:\n  - GCR_FORCE_REFRESH=1\n</code></pre>"},{"location":"INSTALLATION/#disable-caching","title":"Disable Caching","text":"<pre><code>environment:\n  - GCR_USE_CACHE=0\n</code></pre>"},{"location":"INSTALLATION/#monitoring-and-troubleshooting","title":"Monitoring and Troubleshooting","text":""},{"location":"INSTALLATION/#docker-compose","title":"Docker Compose","text":"<pre><code># View logs\ndocker-compose logs -f cookstyle-runner\n\n# Check container status\ndocker-compose ps\n\n# Access container shell\ndocker-compose exec cookstyle-runner /bin/bash\n</code></pre>"},{"location":"INSTALLATION/#kubernetes","title":"Kubernetes","text":"<pre><code># View CronJob status\nkubectl get cronjob cookstyle-runner\n\n# View recent jobs\nkubectl get jobs --selector=app=cookstyle-runner\n\n# View logs from most recent job\nkubectl logs -l app=cookstyle-runner --tail=100\n\n# View logs from specific job\nkubectl logs job/cookstyle-runner-28934567\n\n# Describe CronJob for events\nkubectl describe cronjob cookstyle-runner\n\n# Check cache PVC\nkubectl get pvc cookstyle-runner-cache\nkubectl describe pvc cookstyle-runner-cache\n</code></pre>"},{"location":"INSTALLATION/#common-issues","title":"Common Issues","text":""},{"location":"INSTALLATION/#rate-limiting","title":"Rate Limiting","text":"<p>Symptom: GitHub API rate limit errors</p> <p>Solution:</p> <ul> <li>Reduce run frequency</li> <li>Use caching (<code>GCR_USE_CACHE=1</code>)</li> <li>Increase <code>GCR_CACHE_MAX_AGE</code></li> <li>Use <code>GCR_FILTER_REPOS</code> to process fewer repositories</li> </ul>"},{"location":"INSTALLATION/#authentication-errors","title":"Authentication Errors","text":"<p>Symptom: 401 or 403 errors from GitHub API</p> <p>Solution:</p> <ul> <li>Verify GitHub App credentials are correct</li> <li>Ensure GitHub App has required permissions</li> <li>Check that Installation ID matches your organization</li> <li>Verify private key is in correct PEM format</li> </ul>"},{"location":"INSTALLATION/#out-of-memory","title":"Out of Memory","text":"<p>Symptom: Container killed or OOMKilled status</p> <p>Solution:</p> <ul> <li>Reduce <code>GCR_THREAD_COUNT</code></li> <li>Increase memory limits in Kubernetes</li> <li>Process fewer repositories at once using <code>GCR_FILTER_REPOS</code></li> </ul>"},{"location":"INSTALLATION/#cache-issues","title":"Cache Issues","text":"<p>Symptom: Repositories not being cached or stale cache</p> <p>Solution:</p> <ul> <li>Check cache volume is mounted correctly</li> <li>Verify cache directory has write permissions</li> <li>Use <code>GCR_FORCE_REFRESH=1</code> to bypass cache</li> <li>Adjust <code>GCR_CACHE_MAX_AGE</code> for your needs</li> </ul>"},{"location":"INSTALLATION/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Never commit secrets to version control</li> <li>Use <code>.env</code> files (add to <code>.gitignore</code>)</li> <li>Use Kubernetes Secrets</li> <li> <p>Use secret management tools (Vault, AWS Secrets Manager, etc.)</p> </li> <li> <p>Use least-privilege GitHub App permissions</p> </li> <li>Only grant required permissions</li> <li> <p>Use separate GitHub Apps for different environments</p> </li> <li> <p>Rotate credentials regularly</p> </li> <li>Generate new GitHub App private keys periodically</li> <li> <p>Update secrets in your deployment</p> </li> <li> <p>Restrict network access</p> </li> <li>Use Kubernetes NetworkPolicies</li> <li> <p>Limit egress to GitHub API endpoints only</p> </li> <li> <p>Monitor and audit</p> </li> <li>Enable GitHub App webhook logs</li> <li>Monitor application logs for suspicious activity</li> <li>Set up alerts for authentication failures</li> </ol>"},{"location":"INSTALLATION/#upgrading","title":"Upgrading","text":""},{"location":"INSTALLATION/#docker-compose_1","title":"Docker Compose","text":"<pre><code># Pull latest image\ndocker-compose pull\n\n# Restart with new image\ndocker-compose up -d\n</code></pre>"},{"location":"INSTALLATION/#kubernetes_1","title":"Kubernetes","text":"<pre><code># Update image in CronJob\nkubectl set image cronjob/cookstyle-runner cookstyle-runner=ghcr.io/damacus/github-cookstyle-runner:latest\n\n# Or apply updated manifest\nkubectl apply -f cronjob.yaml\n\n# Verify update\nkubectl describe cronjob cookstyle-runner | grep Image\n</code></pre>"},{"location":"INSTALLATION/#uninstallation","title":"Uninstallation","text":""},{"location":"INSTALLATION/#docker-compose_2","title":"Docker Compose","text":"<pre><code># Stop and remove containers\ndocker-compose down\n\n# Remove volumes (including cache)\ndocker-compose down -v\n\n# Remove images\ndocker rmi ghcr.io/damacus/github-cookstyle-runner:latest\n</code></pre>"},{"location":"INSTALLATION/#kubernetes_2","title":"Kubernetes","text":"<pre><code># Delete all resources\nkubectl delete cronjob cookstyle-runner\nkubectl delete configmap cookstyle-runner-config\nkubectl delete secret cookstyle-runner-secrets\nkubectl delete pvc cookstyle-runner-cache\n\n# Or delete by file\nkubectl delete -f cronjob.yaml\nkubectl delete -f configmap.yaml\nkubectl delete -f secrets.yaml\nkubectl delete -f pvc.yaml\n</code></pre>"},{"location":"INSTALLATION/#next-steps","title":"Next Steps","text":"<ul> <li>Review Configuration Options</li> <li>Set up monitoring and alerting</li> <li>Configure GitHub App webhooks (optional)</li> <li>Customize Cookstyle rules for your organization</li> </ul>"},{"location":"logging/","title":"Logging Configuration","text":"<p>The Cookstyle Runner includes an enhanced logging system with support for structured logging, log rotation, and component-level debug filtering.</p>"},{"location":"logging/#features","title":"Features","text":""},{"location":"logging/#1-structured-logging-json-format","title":"1. Structured Logging (JSON Format)","text":"<p>Enable JSON-formatted logs for easier parsing by log aggregation tools:</p> <pre><code>export GCR_LOG_FORMAT=json\n</code></pre> <p>Example JSON output:</p> <pre><code>{\"timestamp\":\"2025-10-06T15:44:35+01:00\",\"level\":\"INFO\",\"message\":\"Processing repository 1/5: my-repo\"}\n{\"timestamp\":\"2025-10-06T15:44:36+01:00\",\"level\":\"DEBUG\",\"message\":\"Cache hit\",\"component\":\"cache\",\"repo\":\"my-repo\"}\n</code></pre>"},{"location":"logging/#2-component-level-debug-logging","title":"2. Component-Level Debug Logging","text":"<p>Enable debug logging for specific components without flooding logs:</p> <pre><code># Enable debug for git and cache components only\nexport GCR_LOG_DEBUG_COMPONENTS=git,cache\n</code></pre> <p>Or in configuration:</p> <pre><code>log_debug_components:\n  - git\n  - cache\n  - api\n</code></pre> <p>Available components:</p> <ul> <li><code>git</code> - Git operations (clone, commit, push)</li> <li><code>cache</code> - Cache operations (hits, misses, updates)</li> <li><code>api</code> - GitHub API calls</li> <li><code>cookstyle</code> - Cookstyle execution</li> <li><code>processor</code> - Repository processing</li> </ul>"},{"location":"logging/#configuration","title":"Configuration","text":""},{"location":"logging/#environment-variables","title":"Environment Variables","text":"Variable Description Default Example <code>GCR_LOG_LEVEL</code> Log level (DEBUG, INFO, WARN, ERROR, FATAL) <code>INFO</code> <code>DEBUG</code> <code>GCR_LOG_FORMAT</code> Log format (text or json) <code>text</code> <code>json</code> <code>GCR_LOG_DEBUG_COMPONENTS</code> Comma-separated list of components for debug logging <code>[]</code> <code>git,cache</code>"},{"location":"logging/#configuration-file","title":"Configuration File","text":"<p>In <code>config/settings/default.yml</code>:</p> <pre><code># Logging configuration\nlog_level: INFO\nlog_format: text # text or json\nlog_debug_components: [] # List of components to enable debug logging for\n</code></pre>"},{"location":"logging/#usage-examples","title":"Usage Examples","text":""},{"location":"logging/#basic-text-logging","title":"Basic Text Logging","text":"<pre><code># Default text format with INFO level\ncookstyle-runner run\n</code></pre>"},{"location":"logging/#json-logging-for-production","title":"JSON Logging for Production","text":"<pre><code># JSON format for log aggregation\nexport GCR_LOG_FORMAT=json\nexport GCR_LOG_LEVEL=WARN\ncookstyle-runner run\n</code></pre>"},{"location":"logging/#debug-specific-components","title":"Debug Specific Components","text":"<pre><code># Debug only git operations\nexport GCR_LOG_LEVEL=DEBUG\nexport GCR_LOG_DEBUG_COMPONENTS=git\ncookstyle-runner run\n</code></pre>"},{"location":"logging/#full-debug-mode","title":"Full Debug Mode","text":"<pre><code># Enable all debug logging\nexport GCR_LOG_LEVEL=DEBUG\ncookstyle-runner run\n</code></pre>"},{"location":"logging/#programmatic-usage","title":"Programmatic Usage","text":"<p>The logger supports contextual metadata:</p> <pre><code>logger.info('Processing repository', repo: 'my-repo', status: 'started')\nlogger.debug('Cache operation', component: 'cache', action: 'hit')\nlogger.error('Operation failed', repo: 'my-repo', error: 'timeout')\n</code></pre>"},{"location":"logging/#context-blocks","title":"Context Blocks","text":"<p>Add context that applies to all log messages within a block:</p> <pre><code>logger.with_context(repo: 'my-repo') do\n  logger.info('Starting processing')  # Includes repo: 'my-repo'\n  logger.debug('Checking cache')      # Includes repo: 'my-repo'\nend\n</code></pre>"},{"location":"logging/#best-practices","title":"Best Practices","text":"<ol> <li>Use appropriate log levels:</li> <li><code>DEBUG</code>: Detailed diagnostic information</li> <li><code>INFO</code>: General informational messages</li> <li><code>WARN</code>: Warning messages for potentially harmful situations</li> <li><code>ERROR</code>: Error messages for failures</li> <li> <p><code>FATAL</code>: Critical errors that may cause termination</p> </li> <li> <p>Use component filtering in production:</p> </li> <li>Enable debug logging only for components you're troubleshooting</li> <li> <p>Reduces log volume and improves performance</p> </li> <li> <p>Use JSON format for production:</p> </li> <li>Easier to parse and aggregate</li> <li>Better for log management tools (ELK, Splunk, etc.)</li> </ol>"},{"location":"logging/#troubleshooting","title":"Troubleshooting","text":""},{"location":"logging/#logs-are-too-verbose","title":"Logs are too verbose","text":"<p>Increase the log level:</p> <pre><code>export GCR_LOG_LEVEL=WARN\n</code></pre>"},{"location":"logging/#need-more-detail-for-specific-operations","title":"Need more detail for specific operations","text":"<p>Enable component-specific debug logging:</p> <pre><code>export GCR_LOG_LEVEL=DEBUG\nexport GCR_LOG_DEBUG_COMPONENTS=git,cache\n</code></pre>"},{"location":"configuration/","title":"Configuration Overview","text":"<p>The GitHub Cookstyle Runner is configured primarily through environment variables, making it easy to deploy across different environments.</p>"},{"location":"configuration/#configuration-methods","title":"Configuration Methods","text":""},{"location":"configuration/#environment-variables","title":"Environment Variables","text":"<p>The primary configuration method. Set environment variables in your deployment:</p> <ul> <li>Docker Compose: Use <code>.env</code> files or <code>environment</code> section</li> <li>Kubernetes: Use ConfigMaps and Secrets</li> <li>Local: Export in your shell or use <code>.envrc</code></li> </ul>"},{"location":"configuration/#configuration-file-optional","title":"Configuration File (Optional)","text":"<p>For local development, you can use <code>config/settings/local.yml</code>:</p> <pre><code>github:\n  app_id: \"123456\"\n  app_installation_id: \"789012\"\n  app_private_key: \"-----BEGIN RSA PRIVATE KEY-----\\n...\"\n\ndestination:\n  repo_owner: \"your-org\"\n  repo_topics: [\"chef-cookbook\"]\n\ngit:\n  email: \"bot@example.com\"\n  name: \"Cookstyle Bot\"\n</code></pre>"},{"location":"configuration/#configuration-categories","title":"Configuration Categories","text":""},{"location":"configuration/#required-settings","title":"Required Settings","text":"<p>These must be configured for the application to run:</p> <ul> <li>GitHub App Authentication</li> <li>Repository Configuration</li> <li>Git Configuration</li> </ul>"},{"location":"configuration/#optional-settings","title":"Optional Settings","text":"<p>Customize behavior with these optional settings:</p> <ul> <li>Branch Configuration</li> <li>Pull Request Configuration</li> <li>Cache Configuration</li> <li>Performance Configuration</li> <li>Repository Filtering</li> </ul>"},{"location":"configuration/#quick-reference","title":"Quick Reference","text":"Category Variables Purpose Authentication <code>GITHUB_APP_*</code> GitHub API access Repository <code>GCR_DESTINATION_REPO_*</code> Target repositories Git <code>GCR_GIT_*</code> Commit author info Pull Requests <code>GCR_PULL_REQUEST_*</code> PR customization Cache <code>GCR_CACHE_*</code>, <code>GCR_USE_CACHE</code> Performance optimization Performance <code>GCR_THREAD_COUNT</code>, <code>GCR_RETRY_COUNT</code> Execution tuning Filtering <code>GCR_FILTER_REPOS</code> Repository selection"},{"location":"configuration/#configuration-examples","title":"Configuration Examples","text":""},{"location":"configuration/#minimal-configuration","title":"Minimal Configuration","text":"<pre><code>GITHUB_APP_ID=123456\nGITHUB_APP_INSTALLATION_ID=789012\nGITHUB_APP_PRIVATE_KEY=\"-----BEGIN RSA PRIVATE KEY-----...\"\nGCR_DESTINATION_REPO_OWNER=my-org\nGCR_DESTINATION_REPO_TOPICS=chef-cookbook\nGCR_GIT_EMAIL=bot@example.com\nGCR_GIT_NAME=Cookstyle Bot\n</code></pre>"},{"location":"configuration/#production-configuration","title":"Production Configuration","text":"<pre><code># Authentication\nGITHUB_APP_ID=123456\nGITHUB_APP_INSTALLATION_ID=789012\nGITHUB_APP_PRIVATE_KEY=\"-----BEGIN RSA PRIVATE KEY-----...\"\n\n# Repository\nGCR_DESTINATION_REPO_OWNER=my-org\nGCR_DESTINATION_REPO_TOPICS=chef-cookbook,chef\n\n# Git\nGCR_GIT_EMAIL=cookstyle-bot@example.com\nGCR_GIT_NAME=Cookstyle Bot\n\n# Pull Requests\nGCR_PULL_REQUEST_TITLE=Automated Cookstyle Fixes\nGCR_PULL_REQUEST_LABELS=tech-debt,automated,cookstyle\nGCR_CREATE_MANUAL_FIX_PRS=1\n\n# Performance\nGCR_THREAD_COUNT=8\nGCR_RETRY_COUNT=3\nGCR_USE_CACHE=1\nGCR_CACHE_MAX_AGE=7\n</code></pre>"},{"location":"configuration/#validation","title":"Validation","text":"<p>The application validates configuration on startup and will exit with clear error messages if:</p> <ul> <li>Required variables are missing</li> <li>Values are invalid (e.g., non-numeric for numeric fields)</li> <li>Conflicting options are set</li> </ul>"},{"location":"configuration/#next-steps","title":"Next Steps","text":"<ul> <li>View all environment variables</li> <li>Learn about advanced configuration</li> <li>See usage examples</li> </ul>"},{"location":"configuration/advanced/","title":"Advanced Configuration","text":"<p>Advanced configuration options and patterns for power users.</p>"},{"location":"configuration/advanced/#custom-configuration-files","title":"Custom Configuration Files","text":"<p>While environment variables are the primary configuration method, you can use YAML configuration files for local development.</p>"},{"location":"configuration/advanced/#local-configuration","title":"Local Configuration","text":"<p>Create <code>config/settings/local.yml</code>:</p> <pre><code>github:\n  app_id: \"123456\"\n  app_installation_id: \"789012\"\n  app_private_key: |\n    -----BEGIN RSA PRIVATE KEY-----\n    ...\n    -----END RSA PRIVATE KEY-----\n\ndestination:\n  repo_owner: \"my-org\"\n  repo_topics:\n    - chef-cookbook\n    - chef\n\ngit:\n  email: \"bot@example.com\"\n  name: \"Cookstyle Bot\"\n  branch_name: \"automated/cookstyle\"\n  default_branch: \"main\"\n\npull_request:\n  title: \"Automated Cookstyle Fixes\"\n  labels:\n    - tech-debt\n    - automated\n\ncache:\n  enabled: true\n  max_age_days: 7\n\nperformance:\n  thread_count: 4\n  retry_count: 3\n  debug_mode: false\n</code></pre> <p>Note</p> <p>Environment variables take precedence over configuration files.</p>"},{"location":"configuration/advanced/#performance-tuning","title":"Performance Tuning","text":""},{"location":"configuration/advanced/#thread-count-optimization","title":"Thread Count Optimization","text":"<p>The optimal thread count depends on your environment:</p> <pre><code># Conservative (low memory, rate limit concerns)\nGCR_THREAD_COUNT=2\n\n# Balanced (default)\nGCR_THREAD_COUNT=4\n\n# Aggressive (high memory, many repos)\nGCR_THREAD_COUNT=16\n</code></pre>"},{"location":"configuration/advanced/#memory-considerations","title":"Memory Considerations","text":"<p>Each thread processes one repository at a time. Estimate memory needs:</p> <ul> <li>Base application: ~100MB</li> <li>Per thread: ~50-100MB</li> <li>Per repository clone: ~10-50MB (varies by repo size)</li> </ul> <p>Example: 8 threads = ~100MB + (8 \u00d7 100MB) = ~900MB minimum</p>"},{"location":"configuration/advanced/#rate-limiting","title":"Rate Limiting","text":"<p>GitHub API rate limits:</p> <ul> <li>Authenticated: 5,000 requests/hour</li> <li>Per repository: ~10-20 API calls</li> </ul> <p>Calculation: With 5,000 requests/hour, you can process ~250-500 repositories/hour.</p> <p>To avoid rate limiting:</p> <pre><code># Enable caching\nGCR_USE_CACHE=1\nGCR_CACHE_MAX_AGE=7\n\n# Reduce thread count\nGCR_THREAD_COUNT=4\n\n# Process specific repos\nGCR_FILTER_REPOS=repo1,repo2,repo3\n</code></pre>"},{"location":"configuration/advanced/#repository-filtering-strategies","title":"Repository Filtering Strategies","text":""},{"location":"configuration/advanced/#process-specific-repositories","title":"Process Specific Repositories","text":"<pre><code># Only process these repos\nGCR_FILTER_REPOS=apt,nginx,haproxy\n</code></pre>"},{"location":"configuration/advanced/#topic-based-filtering","title":"Topic-Based Filtering","text":"<pre><code># Find repos with multiple topics (AND logic)\nGCR_DESTINATION_REPO_TOPICS=chef-cookbook,production\n\n# Note: GitHub searches for repos with ALL specified topics\n</code></pre>"},{"location":"configuration/advanced/#exclude-repositories","title":"Exclude Repositories","text":"<p>Currently not supported via environment variables. Use <code>GCR_FILTER_REPOS</code> to explicitly list repositories to process.</p>"},{"location":"configuration/advanced/#github-enterprise-support","title":"GitHub Enterprise Support","text":"<p>For GitHub Enterprise installations:</p> <pre><code># Set custom API root\nGITHUB_API_ROOT=github.company.com/api/v3\n\n# Ensure your GitHub App is installed on your Enterprise instance\nGITHUB_APP_ID=&lt;your-enterprise-app-id&gt;\nGITHUB_APP_INSTALLATION_ID=&lt;your-enterprise-installation-id&gt;\n</code></pre>"},{"location":"configuration/advanced/#cache-management","title":"Cache Management","text":""},{"location":"configuration/advanced/#cache-location","title":"Cache Location","text":"<ul> <li>Docker: <code>/app/.cache/cache.json</code></li> <li>Kubernetes: Mounted PersistentVolume at <code>/app/.cache</code></li> <li>Local: <code>./cache.json</code></li> </ul>"},{"location":"configuration/advanced/#cache-structure","title":"Cache Structure","text":"<pre><code>{\n  \"owner/repo\": {\n    \"last_checked\": \"2025-10-06T14:30:00Z\",\n    \"last_sha\": \"abc123...\",\n    \"offense_count\": 5,\n    \"auto_correctable\": 3,\n    \"manual_fixes\": 2\n  }\n}\n</code></pre>"},{"location":"configuration/advanced/#cache-strategies","title":"Cache Strategies","text":""},{"location":"configuration/advanced/#aggressive-caching-minimize-api-calls","title":"Aggressive Caching (Minimize API Calls)","text":"<pre><code>GCR_USE_CACHE=1\nGCR_CACHE_MAX_AGE=30  # 30 days\nGCR_FORCE_REFRESH=0\n</code></pre>"},{"location":"configuration/advanced/#balanced-caching-default","title":"Balanced Caching (Default)","text":"<pre><code>GCR_USE_CACHE=1\nGCR_CACHE_MAX_AGE=7  # 7 days\nGCR_FORCE_REFRESH=0\n</code></pre>"},{"location":"configuration/advanced/#minimal-caching-always-fresh","title":"Minimal Caching (Always Fresh)","text":"<pre><code>GCR_USE_CACHE=1\nGCR_CACHE_MAX_AGE=1  # 1 day\nGCR_FORCE_REFRESH=0\n</code></pre>"},{"location":"configuration/advanced/#no-caching-testing","title":"No Caching (Testing)","text":"<pre><code>GCR_USE_CACHE=0\n# or\nGCR_FORCE_REFRESH=1\n</code></pre>"},{"location":"configuration/advanced/#pull-request-strategies","title":"Pull Request Strategies","text":""},{"location":"configuration/advanced/#auto-correctable-only","title":"Auto-Correctable Only","text":"<pre><code># Don't create PRs for manual fixes\nGCR_CREATE_MANUAL_FIX_PRS=0\n</code></pre>"},{"location":"configuration/advanced/#all-issues","title":"All Issues","text":"<pre><code># Create PRs for both auto-correctable and manual fixes\nGCR_CREATE_MANUAL_FIX_PRS=1\n</code></pre>"},{"location":"configuration/advanced/#custom-pr-labels","title":"Custom PR Labels","text":"<pre><code># Organize PRs with labels\nGCR_PULL_REQUEST_LABELS=cookstyle,tech-debt,automated,priority-low\n</code></pre>"},{"location":"configuration/advanced/#debugging","title":"Debugging","text":""},{"location":"configuration/advanced/#enable-debug-logging","title":"Enable Debug Logging","text":"<pre><code>GCR_DEBUG_MODE=1\n</code></pre> <p>Debug mode provides:</p> <ul> <li>Detailed API request/response logs</li> <li>Repository processing steps</li> <li>Cache hit/miss information</li> <li>Cookstyle command output</li> </ul>"},{"location":"configuration/advanced/#test-single-repository","title":"Test Single Repository","text":"<pre><code>GCR_FILTER_REPOS=test-repo\nGCR_DEBUG_MODE=1\nGCR_THREAD_COUNT=1\nGCR_USE_CACHE=0\n</code></pre>"},{"location":"configuration/advanced/#security-best-practices","title":"Security Best Practices","text":""},{"location":"configuration/advanced/#secrets-management","title":"Secrets Management","text":"<p>Never hardcode secrets. Use:</p> <ol> <li>Environment variables (Docker Compose <code>.env</code>)</li> <li>Kubernetes Secrets</li> <li>Secret managers (Vault, AWS Secrets Manager, etc.)</li> </ol>"},{"location":"configuration/advanced/#least-privilege","title":"Least Privilege","text":"<p>Configure GitHub App with minimum required permissions:</p> <ul> <li>Repository: Contents (read/write), Pull Requests (read/write)</li> <li>Organization: Members (read) - only if needed for repo discovery</li> </ul>"},{"location":"configuration/advanced/#credential-rotation","title":"Credential Rotation","text":"<p>Regularly rotate GitHub App private keys:</p> <pre><code># Generate new key in GitHub App settings\n# Update secret in your deployment\n# Revoke old key after verification\n</code></pre>"},{"location":"configuration/advanced/#multi-organization-support","title":"Multi-Organization Support","text":"<p>To process repositories across multiple organizations, deploy separate instances:</p> <pre><code># Instance 1: Organization A\nservices:\n  cookstyle-runner-org-a:\n    image: ghcr.io/damacus/github-cookstyle-runner:latest\n    environment:\n      - GCR_DESTINATION_REPO_OWNER=org-a\n      - GITHUB_APP_INSTALLATION_ID=&lt;org-a-installation-id&gt;\n      # ... other config\n\n# Instance 2: Organization B\n  cookstyle-runner-org-b:\n    image: ghcr.io/damacus/github-cookstyle-runner:latest\n    environment:\n      - GCR_DESTINATION_REPO_OWNER=org-b\n      - GITHUB_APP_INSTALLATION_ID=&lt;org-b-installation-id&gt;\n      # ... other config\n</code></pre>"},{"location":"configuration/advanced/#next-steps","title":"Next Steps","text":"<ul> <li>Environment variables reference</li> <li>Usage examples</li> <li>Troubleshooting</li> </ul>"},{"location":"configuration/environment-variables/","title":"Environment Variables","text":"<p>Complete reference for all environment variables supported by the GitHub Cookstyle Runner.</p>"},{"location":"configuration/environment-variables/#github-app-authentication","title":"GitHub App Authentication","text":""},{"location":"configuration/environment-variables/#github_app_id","title":"GITHUB_APP_ID","text":"<ul> <li>Type: String (numeric)</li> <li>Required: Yes</li> <li>Description: The GitHub App ID for authentication</li> <li>Example: <code>123456</code></li> </ul>"},{"location":"configuration/environment-variables/#github_app_installation_id","title":"GITHUB_APP_INSTALLATION_ID","text":"<ul> <li>Type: String (numeric)</li> <li>Required: Yes</li> <li>Description: The installation ID for the GitHub App</li> <li>Example: <code>789012</code></li> </ul>"},{"location":"configuration/environment-variables/#github_app_private_key","title":"GITHUB_APP_PRIVATE_KEY","text":"<ul> <li>Type: String (PEM format)</li> <li>Required: Yes</li> <li>Description: The PEM-encoded private key for the GitHub App</li> <li>Example:</li> </ul> <pre><code>GITHUB_APP_PRIVATE_KEY=\"-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEA...\n-----END RSA PRIVATE KEY-----\"\n</code></pre>"},{"location":"configuration/environment-variables/#github_api_root","title":"GITHUB_API_ROOT","text":"<ul> <li>Type: String (URL)</li> <li>Required: No</li> <li>Default: <code>api.github.com</code></li> <li>Description: The GitHub API root URL (useful for GitHub Enterprise)</li> <li>Example: <code>github.company.com/api/v3</code></li> </ul>"},{"location":"configuration/environment-variables/#repository-configuration","title":"Repository Configuration","text":""},{"location":"configuration/environment-variables/#gcr_destination_repo_owner","title":"GCR_DESTINATION_REPO_OWNER","text":"<ul> <li>Type: String</li> <li>Required: Yes</li> <li>Description: The owner (organization or user) of the repositories to process</li> <li>Example: <code>sous-chefs</code></li> </ul>"},{"location":"configuration/environment-variables/#gcr_destination_repo_topics","title":"GCR_DESTINATION_REPO_TOPICS","text":"<ul> <li>Type: String (comma-separated)</li> <li>Required: Yes</li> <li>Description: Topics to search for when finding repositories</li> <li>Example: <code>chef-cookbook,chef</code></li> </ul>"},{"location":"configuration/environment-variables/#gcr_filter_repos","title":"GCR_FILTER_REPOS","text":"<ul> <li>Type: String (comma-separated)</li> <li>Required: No</li> <li>Description: Specific repositories to process (overrides topic search)</li> <li>Example: <code>apt,nginx,haproxy</code></li> </ul>"},{"location":"configuration/environment-variables/#git-configuration","title":"Git Configuration","text":""},{"location":"configuration/environment-variables/#gcr_git_email","title":"GCR_GIT_EMAIL","text":"<ul> <li>Type: String (email)</li> <li>Required: Yes</li> <li>Description: Email address for git commits</li> <li>Example: <code>cookstyle-bot@example.com</code></li> </ul>"},{"location":"configuration/environment-variables/#gcr_git_name","title":"GCR_GIT_NAME","text":"<ul> <li>Type: String</li> <li>Required: Yes</li> <li>Description: Name for git commits</li> <li>Example: <code>Cookstyle Bot</code></li> </ul>"},{"location":"configuration/environment-variables/#branch-configuration","title":"Branch Configuration","text":""},{"location":"configuration/environment-variables/#gcr_branch_name","title":"GCR_BRANCH_NAME","text":"<ul> <li>Type: String</li> <li>Required: No</li> <li>Default: <code>automated/cookstyle</code></li> <li>Description: Name of the branch to create for changes</li> <li>Example: <code>cookstyle-fixes</code></li> </ul>"},{"location":"configuration/environment-variables/#gcr_default_git_branch","title":"GCR_DEFAULT_GIT_BRANCH","text":"<ul> <li>Type: String</li> <li>Required: No</li> <li>Default: <code>main</code></li> <li>Description: Default branch name to base changes on</li> <li>Example: <code>master</code></li> </ul>"},{"location":"configuration/environment-variables/#pull-request-configuration","title":"Pull Request Configuration","text":""},{"location":"configuration/environment-variables/#gcr_pull_request_title","title":"GCR_PULL_REQUEST_TITLE","text":"<ul> <li>Type: String</li> <li>Required: No</li> <li>Default: <code>Automated PR: Cookstyle Changes</code></li> <li>Description: Title for created pull requests</li> <li>Example: <code>Automated Cookstyle Fixes</code></li> </ul>"},{"location":"configuration/environment-variables/#gcr_pull_request_labels","title":"GCR_PULL_REQUEST_LABELS","text":"<ul> <li>Type: String (comma-separated)</li> <li>Required: No</li> <li>Default: None</li> <li>Description: Labels to apply to pull requests</li> <li>Example: <code>tech-debt,automated,cookstyle</code></li> </ul>"},{"location":"configuration/environment-variables/#gcr_create_manual_fix_prs","title":"GCR_CREATE_MANUAL_FIX_PRS","text":"<ul> <li>Type: Boolean (<code>0</code> or <code>1</code>)</li> <li>Required: No</li> <li>Default: <code>0</code> (disabled)</li> <li>Description: Create PRs for issues requiring manual fixes (with detailed instructions)</li> <li>Example: <code>1</code></li> </ul>"},{"location":"configuration/environment-variables/#cache-configuration","title":"Cache Configuration","text":""},{"location":"configuration/environment-variables/#gcr_use_cache","title":"GCR_USE_CACHE","text":"<ul> <li>Type: Boolean (<code>0</code> or <code>1</code>)</li> <li>Required: No</li> <li>Default: <code>1</code> (enabled)</li> <li>Description: Enable/disable the caching system</li> <li>Example: <code>1</code></li> </ul>"},{"location":"configuration/environment-variables/#gcr_cache_max_age","title":"GCR_CACHE_MAX_AGE","text":"<ul> <li>Type: Integer (days)</li> <li>Required: No</li> <li>Default: <code>7</code></li> <li>Description: Maximum age of cache entries before they're considered stale</li> <li>Example: <code>14</code></li> </ul>"},{"location":"configuration/environment-variables/#gcr_force_refresh","title":"GCR_FORCE_REFRESH","text":"<ul> <li>Type: Boolean (<code>0</code> or <code>1</code>)</li> <li>Required: No</li> <li>Default: <code>0</code> (disabled)</li> <li>Description: Force refresh all repositories regardless of cache status</li> <li>Example: <code>1</code></li> </ul>"},{"location":"configuration/environment-variables/#performance-configuration","title":"Performance Configuration","text":""},{"location":"configuration/environment-variables/#gcr_thread_count","title":"GCR_THREAD_COUNT","text":"<ul> <li>Type: Integer</li> <li>Required: No</li> <li>Default: Number of CPU cores</li> <li>Description: Number of threads for parallel repository processing</li> <li>Example: <code>8</code></li> </ul>"},{"location":"configuration/environment-variables/#gcr_retry_count","title":"GCR_RETRY_COUNT","text":"<ul> <li>Type: Integer</li> <li>Required: No</li> <li>Default: <code>3</code></li> <li>Description: Number of retry attempts for failed operations</li> <li>Example: <code>5</code></li> </ul>"},{"location":"configuration/environment-variables/#gcr_debug_mode","title":"GCR_DEBUG_MODE","text":"<ul> <li>Type: Boolean (<code>0</code> or <code>1</code>)</li> <li>Required: No</li> <li>Default: <code>0</code> (disabled)</li> <li>Description: Enable verbose debug logging</li> <li>Example: <code>1</code></li> </ul>"},{"location":"configuration/environment-variables/#environment-specific-examples","title":"Environment-Specific Examples","text":""},{"location":"configuration/environment-variables/#development","title":"Development","text":"<pre><code>GITHUB_APP_ID=123456\nGITHUB_APP_INSTALLATION_ID=789012\nGITHUB_APP_PRIVATE_KEY=\"...\"\nGCR_DESTINATION_REPO_OWNER=my-org\nGCR_DESTINATION_REPO_TOPICS=chef-cookbook\nGCR_GIT_EMAIL=dev@example.com\nGCR_GIT_NAME=Dev Bot\nGCR_DEBUG_MODE=1\nGCR_THREAD_COUNT=2\nGCR_FILTER_REPOS=test-repo\n</code></pre>"},{"location":"configuration/environment-variables/#staging","title":"Staging","text":"<pre><code>GITHUB_APP_ID=123456\nGITHUB_APP_INSTALLATION_ID=789012\nGITHUB_APP_PRIVATE_KEY=\"...\"\nGCR_DESTINATION_REPO_OWNER=my-org\nGCR_DESTINATION_REPO_TOPICS=chef-cookbook\nGCR_GIT_EMAIL=staging-bot@example.com\nGCR_GIT_NAME=Staging Cookstyle Bot\nGCR_THREAD_COUNT=4\nGCR_USE_CACHE=1\nGCR_CACHE_MAX_AGE=3\n</code></pre>"},{"location":"configuration/environment-variables/#production","title":"Production","text":"<pre><code>GITHUB_APP_ID=123456\nGITHUB_APP_INSTALLATION_ID=789012\nGITHUB_APP_PRIVATE_KEY=\"...\"\nGCR_DESTINATION_REPO_OWNER=my-org\nGCR_DESTINATION_REPO_TOPICS=chef-cookbook,chef\nGCR_GIT_EMAIL=cookstyle-bot@example.com\nGCR_GIT_NAME=Cookstyle Bot\nGCR_PULL_REQUEST_TITLE=Automated Cookstyle Fixes\nGCR_PULL_REQUEST_LABELS=tech-debt,automated\nGCR_CREATE_MANUAL_FIX_PRS=1\nGCR_THREAD_COUNT=8\nGCR_RETRY_COUNT=3\nGCR_USE_CACHE=1\nGCR_CACHE_MAX_AGE=7\n</code></pre>"},{"location":"configuration/environment-variables/#next-steps","title":"Next Steps","text":"<ul> <li>Advanced configuration options</li> <li>Configuration examples</li> <li>Troubleshooting configuration issues</li> </ul>"},{"location":"development/architecture/","title":"Architecture","text":"<p>Overview of the GitHub Cookstyle Runner architecture and design decisions.</p>"},{"location":"development/architecture/#high-level-architecture","title":"High-Level Architecture","text":"<pre><code>graph TB\n    subgraph \"GitHub Cookstyle Runner\"\n        Config[Config Manager] --&gt; Validation[Validation]\n        Validation --&gt; RepoProcessor[Repository Processor]\n\n        subgraph \"Thread Pool (Concurrent)\"\n            Thread1[Thread 1]\n            Thread2[Thread 2]\n            Thread3[Thread 3]\n            ThreadN[Thread N]\n        end\n\n        RepoProcessor --&gt; Thread1\n        RepoProcessor --&gt; Thread2\n        RepoProcessor --&gt; Thread3\n        RepoProcessor --&gt; ThreadN\n\n        subgraph \"Per-Repository Processing\"\n            GitOps[Git Operations]\n            CookstyleOps[Cookstyle Operations]\n            PRManager[PR Manager]\n\n            GitOps --&gt; CookstyleOps\n            CookstyleOps --&gt; PRManager\n        end\n\n        Thread1 --&gt; GitOps\n        Thread2 --&gt; GitOps\n        Thread3 --&gt; GitOps\n        ThreadN --&gt; GitOps\n\n        PRManager --&gt; Cache[Cache Manager]\n    end\n\n    Cache --&gt; FileSystem[(File System&lt;br/&gt;Cache)]\n    PRManager --&gt; GitHubAPI[GitHub API]\n    GitOps --&gt; GitHubAPI\n\n    style Config fill:#e1f5ff\n    style Validation fill:#e1f5ff\n    style RepoProcessor fill:#fff3e0\n    style Cache fill:#f3e5f5\n    style GitHubAPI fill:#e8f5e9\n    style FileSystem fill:#e8f5e9</code></pre>"},{"location":"development/architecture/#core-components","title":"Core Components","text":""},{"location":"development/architecture/#1-configuration-management","title":"1. Configuration Management","text":"<p>Files:</p> <ul> <li><code>lib/cookstyle_runner/configuration.rb</code></li> <li><code>lib/cookstyle_runner/settings_validator.rb</code></li> <li><code>config/validators/settings_validator.rb</code></li> </ul> <p>Responsibilities:</p> <ul> <li>Load configuration from environment variables and YAML files</li> <li>Validate configuration schema</li> <li>Provide type-safe access to settings</li> </ul> <p>Design Decisions:</p> <ul> <li>Environment variables take precedence over config files</li> <li>Validation happens at startup (fail-fast)</li> <li>Uses <code>Config</code> gem for YAML configuration</li> <li>Uses <code>dry-schema</code> for validation</li> </ul>"},{"location":"development/architecture/#2-authentication","title":"2. Authentication","text":"<p>Files:</p> <ul> <li><code>lib/cookstyle_runner/authentication.rb</code></li> </ul> <p>Responsibilities:</p> <ul> <li>Generate GitHub App JWT tokens</li> <li>Create installation access tokens</li> <li>Provide authenticated URLs for Git operations</li> </ul> <p>Design Decisions:</p> <ul> <li>Uses GitHub App authentication (more secure than PATs)</li> <li>Tokens are short-lived and regenerated as needed</li> <li>Supports GitHub Enterprise via custom API root</li> </ul>"},{"location":"development/architecture/#3-repository-discovery","title":"3. Repository Discovery","text":"<p>Files:</p> <ul> <li><code>lib/cookstyle_runner/repository_finder.rb</code></li> </ul> <p>Responsibilities:</p> <ul> <li>Search GitHub for repositories by topics</li> <li>Filter repositories based on configuration</li> <li>Handle pagination</li> </ul> <p>Design Decisions:</p> <ul> <li>Topic-based discovery for flexibility</li> <li>Supports explicit repository filtering</li> <li>Handles large organization with pagination</li> </ul>"},{"location":"development/architecture/#4-repository-processing","title":"4. Repository Processing","text":"<p>Files:</p> <ul> <li><code>lib/cookstyle_runner/repository_processor.rb</code></li> </ul> <p>Responsibilities:</p> <ul> <li>Orchestrate processing of individual repositories</li> <li>Manage thread pool for parallel processing</li> <li>Handle errors and retries</li> </ul> <p>Design Decisions:</p> <ul> <li>Multi-threaded for performance</li> <li>Process isolation (separate directory per repo)</li> <li>Retry logic for transient failures</li> <li>Comprehensive error handling</li> </ul>"},{"location":"development/architecture/#5-git-operations","title":"5. Git Operations","text":"<p>Files:</p> <ul> <li><code>lib/cookstyle_runner/git.rb</code></li> </ul> <p>Responsibilities:</p> <ul> <li>Clone repositories</li> <li>Create branches</li> <li>Commit changes</li> <li>Push to remote</li> </ul> <p>Design Decisions:</p> <ul> <li>Uses authenticated HTTPS URLs</li> <li>Shallow clones for performance</li> <li>Automatic cleanup of working directories</li> <li>Handles authentication failures gracefully</li> </ul>"},{"location":"development/architecture/#6-cookstyle-operations","title":"6. Cookstyle Operations","text":"<p>Files:</p> <ul> <li><code>lib/cookstyle_runner/cookstyle_operations.rb</code></li> </ul> <p>Responsibilities:</p> <ul> <li>Run Cookstyle with auto-correction</li> <li>Parse JSON output</li> <li>Categorize offenses (auto-correctable vs manual)</li> <li>Generate PR/issue descriptions</li> </ul> <p>Design Decisions:</p> <ul> <li>JSON output for structured parsing</li> <li>Separate auto-correctable and manual offenses</li> <li>Detailed offense reporting</li> <li>Version tracking</li> </ul>"},{"location":"development/architecture/#7-pull-request-management","title":"7. Pull Request Management","text":"<p>Files:</p> <ul> <li><code>lib/cookstyle_runner/github_pr_manager.rb</code></li> </ul> <p>Responsibilities:</p> <ul> <li>Create pull requests</li> <li>Create issues (for manual fixes)</li> <li>Apply labels</li> <li>Generate PR descriptions</li> </ul> <p>Design Decisions:</p> <ul> <li>Separate PRs for auto-correctable vs manual fixes</li> <li>Rich PR descriptions with offense details</li> <li>Configurable titles and labels</li> <li>Idempotent (checks for existing PRs)</li> </ul>"},{"location":"development/architecture/#8-cache-system","title":"8. Cache System","text":"<p>Files:</p> <ul> <li><code>lib/cookstyle_runner/cache.rb</code></li> <li><code>lib/cookstyle_runner/cache_entry.rb</code></li> </ul> <p>Responsibilities:</p> <ul> <li>Track repository state (commit SHA)</li> <li>Store offense counts</li> <li>Manage cache expiration</li> <li>Provide cache statistics</li> </ul> <p>Design Decisions:</p> <ul> <li>JSON file-based storage (simple, portable)</li> <li>Time-based expiration</li> <li>SHA-based change detection</li> <li>Atomic writes to prevent corruption</li> </ul>"},{"location":"development/architecture/#data-flow","title":"Data Flow","text":""},{"location":"development/architecture/#typical-execution-flow","title":"Typical Execution Flow","text":"<ol> <li>Startup:</li> <li>Load configuration</li> <li>Validate settings</li> <li>Initialize logger</li> <li> <p>Authenticate with GitHub</p> </li> <li> <p>Discovery:</p> </li> <li>Search for repositories by topics</li> <li>Apply filters</li> <li> <p>Load cache</p> </li> <li> <p>Processing (per repository, in parallel):</p> </li> <li>Check cache (skip if unchanged and fresh)</li> <li>Clone/update repository</li> <li>Run Cookstyle with auto-correction</li> <li>Parse results</li> <li>If changes:<ul> <li>Create branch</li> <li>Commit changes</li> <li>Push branch</li> <li>Create PR</li> </ul> </li> <li> <p>Update cache</p> </li> <li> <p>Completion:</p> </li> <li>Save cache</li> <li>Log summary statistics</li> <li>Exit</li> </ol>"},{"location":"development/architecture/#design-patterns","title":"Design Patterns","text":""},{"location":"development/architecture/#1-service-objects","title":"1. Service Objects","text":"<p>Each major operation is encapsulated in a service object:</p> <ul> <li><code>RepositoryProcessor</code></li> <li><code>GitHubPRManager</code></li> <li><code>CookstyleOperations</code></li> </ul> <p>Benefits:</p> <ul> <li>Single Responsibility Principle</li> <li>Easy to test</li> <li>Clear interfaces</li> </ul>"},{"location":"development/architecture/#2-value-objects","title":"2. Value Objects","text":"<p>Immutable objects for data:</p> <ul> <li><code>CacheEntry</code></li> <li><code>Git::RepoContext</code></li> </ul> <p>Benefits:</p> <ul> <li>Thread-safe</li> <li>Predictable behavior</li> <li>Easy to reason about</li> </ul>"},{"location":"development/architecture/#3-dependency-injection","title":"3. Dependency Injection","text":"<p>Dependencies are injected, not created:</p> <pre><code>def initialize(logger, github_client, cache)\n  @logger = logger\n  @github_client = github_client\n  @cache = cache\nend\n</code></pre> <p>Benefits:</p> <ul> <li>Testable (mock dependencies)</li> <li>Flexible (swap implementations)</li> <li>Clear dependencies</li> </ul>"},{"location":"development/architecture/#4-strategy-pattern","title":"4. Strategy Pattern","text":"<p>Different strategies for cache management, PR creation, etc.</p> <p>Benefits:</p> <ul> <li>Extensible</li> <li>Configurable behavior</li> <li>Open/Closed Principle</li> </ul>"},{"location":"development/architecture/#concurrency-model","title":"Concurrency Model","text":""},{"location":"development/architecture/#thread-pool","title":"Thread Pool","text":"<ul> <li>Fixed-size thread pool (configurable)</li> <li>One repository per thread</li> <li>Thread-safe cache access</li> <li>Isolated working directories</li> </ul>"},{"location":"development/architecture/#synchronization","title":"Synchronization","text":"<ul> <li>Cache writes are synchronized</li> <li>GitHub API client is thread-safe</li> <li>Logger is thread-safe</li> </ul>"},{"location":"development/architecture/#error-handling","title":"Error Handling","text":"<ul> <li>Errors in one thread don't affect others</li> <li>Failed repositories are logged and skipped</li> <li>Retry logic for transient failures</li> </ul>"},{"location":"development/architecture/#performance-considerations","title":"Performance Considerations","text":""},{"location":"development/architecture/#optimization-strategies","title":"Optimization Strategies","text":"<ol> <li>Caching:</li> <li>Skip unchanged repositories</li> <li>Reduce API calls</li> <li> <p>Faster subsequent runs</p> </li> <li> <p>Parallel Processing:</p> </li> <li>Multiple repositories simultaneously</li> <li> <p>CPU-bound work parallelized</p> </li> <li> <p>Shallow Clones:</p> </li> <li>Only clone latest commit</li> <li> <p>Faster cloning</p> </li> <li> <p>Efficient API Usage:</p> </li> <li>Batch operations where possible</li> <li>Respect rate limits</li> </ol>"},{"location":"development/architecture/#bottlenecks","title":"Bottlenecks","text":"<ol> <li>GitHub API Rate Limits:</li> <li>5,000 requests/hour</li> <li> <p>Mitigated by caching</p> </li> <li> <p>Network I/O:</p> </li> <li>Repository cloning</li> <li>API requests</li> <li> <p>Mitigated by parallelism</p> </li> <li> <p>Disk I/O:</p> </li> <li>Repository clones</li> <li>Mitigated by cleanup</li> </ol>"},{"location":"development/architecture/#security-considerations","title":"Security Considerations","text":""},{"location":"development/architecture/#secrets-management","title":"Secrets Management","text":"<ul> <li>GitHub App private key stored securely</li> <li>Never logged or exposed</li> <li>Short-lived access tokens</li> </ul>"},{"location":"development/architecture/#isolation","title":"Isolation","text":"<ul> <li>Each repository in separate directory</li> <li>No cross-repository contamination</li> <li>Cleanup after processing</li> </ul>"},{"location":"development/architecture/#least-privilege","title":"Least Privilege","text":"<ul> <li>Minimal GitHub App permissions</li> <li>Read-only where possible</li> <li>Write only to specific branches</li> </ul>"},{"location":"development/architecture/#testing-strategy","title":"Testing Strategy","text":""},{"location":"development/architecture/#unit-tests","title":"Unit Tests","text":"<ul> <li>Test individual methods</li> <li>Mock external dependencies</li> <li>Fast execution</li> </ul>"},{"location":"development/architecture/#integration-tests","title":"Integration Tests","text":"<ul> <li>Test component interactions</li> <li>Use VCR for API mocking</li> <li>Slower but comprehensive</li> </ul>"},{"location":"development/architecture/#test-coverage","title":"Test Coverage","text":"<ul> <li>Aim for &gt;90% coverage</li> <li>Focus on critical paths</li> <li>Test error conditions</li> </ul>"},{"location":"development/architecture/#future-enhancements","title":"Future Enhancements","text":""},{"location":"development/architecture/#planned-features","title":"Planned Features","text":"<ol> <li>Webhook Support:</li> <li>Trigger on repository events</li> <li> <p>Real-time processing</p> </li> <li> <p>Metrics and Monitoring:</p> </li> <li>Prometheus metrics</li> <li> <p>Grafana dashboards</p> </li> <li> <p>Pluggable Storage:</p> </li> <li>Redis cache backend</li> <li> <p>Database storage</p> </li> <li> <p>Advanced Filtering:</p> </li> <li>Exclude repositories</li> <li> <p>Custom search queries</p> </li> <li> <p>Dry Run Mode:</p> </li> <li>Preview changes without creating PRs</li> </ol>"},{"location":"development/architecture/#contributing","title":"Contributing","text":"<p>See Contributing Guide for development setup and guidelines.</p>"},{"location":"development/contributing/","title":"Contributing","text":"<p>Thank you for your interest in contributing to the GitHub Cookstyle Runner!</p>"},{"location":"development/contributing/#getting-started","title":"Getting Started","text":""},{"location":"development/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Ruby 3.4+</li> <li>Git</li> <li>Docker and Docker Compose</li> <li>Bundler</li> </ul>"},{"location":"development/contributing/#development-setup","title":"Development Setup","text":"<ol> <li>Fork and clone the repository:</li> </ol> <pre><code>git clone https://github.com/YOUR_USERNAME/github-cookstyle-runner.git\ncd github-cookstyle-runner\n</code></pre> <ol> <li>Install dependencies:</li> </ol> <pre><code>bundle install\n</code></pre> <ol> <li>Set up configuration:</li> </ol> <pre><code>cp config/settings/local.yml.example config/settings/local.yml\n# Edit local.yml with your GitHub App credentials\n</code></pre> <ol> <li>Run tests:</li> </ol> <pre><code>bundle exec rspec\n</code></pre>"},{"location":"development/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"development/contributing/#test-driven-development-tdd","title":"Test-Driven Development (TDD)","text":"<p>This project follows strict TDD principles:</p> <ol> <li>Write a failing test first</li> <li>Implement the minimum code to make it pass</li> <li>Refactor while keeping tests green</li> </ol> <p>Example workflow:</p> <pre><code># 1. Write test\nvim spec/lib/cookstyle_runner/my_feature_spec.rb\n\n# 2. Run test (should fail)\nbundle exec rspec spec/lib/cookstyle_runner/my_feature_spec.rb\n\n# 3. Implement feature\nvim lib/cookstyle_runner/my_feature.rb\n\n# 4. Run test (should pass)\nbundle exec rspec spec/lib/cookstyle_runner/my_feature_spec.rb\n\n# 5. Refactor and ensure all tests pass\nbundle exec rspec\n</code></pre>"},{"location":"development/contributing/#code-style","title":"Code Style","text":"<p>This project uses RuboCop for code style enforcement:</p> <pre><code># Check style\nbundle exec rubocop\n\n# Auto-fix issues\nbundle exec rubocop -a\n\n# Auto-fix unsafe issues (use with caution)\nbundle exec rubocop -A\n</code></pre> <p>Style requirements:</p> <ul> <li>Two-space indentation</li> <li>snake_case for variables and methods</li> <li>CamelCase for classes and modules</li> <li>Follow all RuboCop defaults</li> </ul>"},{"location":"development/contributing/#type-checking","title":"Type Checking","text":"<p>This project uses Sorbet for type safety:</p> <pre><code># Run type checker\nbundle exec srb tc\n\n# Update RBI files\nbundle exec tapioca gem\n</code></pre> <p>Type requirements:</p> <ul> <li>Add type signatures to all public methods</li> <li>Use <code>T.nilable</code> for nullable types</li> <li>Avoid <code>T.untyped</code> unless absolutely necessary</li> </ul>"},{"location":"development/contributing/#making-changes","title":"Making Changes","text":""},{"location":"development/contributing/#branch-naming","title":"Branch Naming","text":"<p>Use descriptive branch names:</p> <ul> <li><code>feature/add-webhook-support</code></li> <li><code>fix/cache-corruption-issue</code></li> <li><code>refactor/simplify-git-operations</code></li> <li><code>docs/update-installation-guide</code></li> </ul>"},{"location":"development/contributing/#commit-messages","title":"Commit Messages","text":"<p>Follow Conventional Commits:</p> <pre><code>feat: add webhook support for repository events\nfix: resolve cache corruption on invalid JSON\nrefactor: extract PR creation logic into separate class\ndocs: update installation guide with Kubernetes examples\ntest: add integration tests for cache system\n</code></pre> <p>Format:</p> <pre><code>&lt;type&gt;: &lt;description&gt;\n\n[optional body]\n\n[optional footer]\n</code></pre> <p>Types:</p> <ul> <li><code>feat</code>: New feature</li> <li><code>fix</code>: Bug fix</li> <li><code>refactor</code>: Code refactoring</li> <li><code>test</code>: Adding or updating tests</li> <li><code>docs</code>: Documentation changes</li> <li><code>chore</code>: Maintenance tasks</li> <li><code>perf</code>: Performance improvements</li> </ul>"},{"location":"development/contributing/#pull-requests","title":"Pull Requests","text":"<ol> <li>Create a focused PR:</li> <li>One feature or fix per PR</li> <li>Keep changes small and reviewable</li> <li> <p>Include tests for all changes</p> </li> <li> <p>Write a clear description:</p> </li> </ol> <pre><code>## Description\nBrief description of the changes\n\n## Motivation\nWhy is this change needed?\n\n## Changes\n- List of specific changes\n- Made in this PR\n\n## Testing\nHow was this tested?\n\n## Checklist\n- [ ] Tests added/updated\n- [ ] Documentation updated\n- [ ] RuboCop passes\n- [ ] Sorbet type checks pass\n- [ ] All tests pass\n</code></pre> <ol> <li>Ensure CI passes:</li> <li>All tests must pass</li> <li>RuboCop must pass</li> <li>Sorbet type checks must pass</li> </ol>"},{"location":"development/contributing/#testing","title":"Testing","text":""},{"location":"development/contributing/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\nbundle exec rspec\n\n# Run specific test file\nbundle exec rspec spec/lib/cookstyle_runner/cache_spec.rb\n\n# Run specific test\nbundle exec rspec spec/lib/cookstyle_runner/cache_spec.rb:42\n\n# Run with coverage\nCOVERAGE=true bundle exec rspec\n</code></pre>"},{"location":"development/contributing/#writing-tests","title":"Writing Tests","text":"<p>Unit tests:</p> <pre><code># spec/lib/cookstyle_runner/my_feature_spec.rb\nRSpec.describe CookstyleRunner::MyFeature do\n  describe '#my_method' do\n    it 'returns expected value' do\n      feature = described_class.new\n      expect(feature.my_method).to eq('expected')\n    end\n  end\nend\n</code></pre> <p>Integration tests:</p> <pre><code># spec/integration/my_feature_integration_spec.rb\nRSpec.describe 'MyFeature Integration' do\n  it 'works end-to-end' do\n    # Test full workflow\n  end\nend\n</code></pre>"},{"location":"development/contributing/#test-coverage","title":"Test Coverage","text":"<p>Aim for &gt;90% test coverage:</p> <pre><code>COVERAGE=true bundle exec rspec\nopen coverage/index.html\n</code></pre>"},{"location":"development/contributing/#local-development","title":"Local Development","text":""},{"location":"development/contributing/#running-locally","title":"Running Locally","text":"<pre><code># Run with local configuration\n./bin/cookstyle-runner\n\n# Run with debug mode\nGCR_DEBUG_MODE=1 ./bin/cookstyle-runner\n\n# Run with specific repos\nGCR_FILTER_REPOS=test-repo ./bin/cookstyle-runner\n</code></pre>"},{"location":"development/contributing/#using-docker","title":"Using Docker","text":"<pre><code># Build local image\ndocker-compose build\n\n# Run tests in Docker\ndocker-compose run test\n\n# Run application in Docker\ndocker-compose up\n</code></pre>"},{"location":"development/contributing/#debugging","title":"Debugging","text":"<pre><code># Enable debug logging\nGCR_DEBUG_MODE=1 ./bin/cookstyle-runner\n\n# Use pry for debugging\n# Add `binding.pry` in code, then run\nbundle exec ./bin/cookstyle-runner\n\n# Use Docker for debugging\ndocker-compose run --entrypoint /bin/bash app\n</code></pre>"},{"location":"development/contributing/#documentation","title":"Documentation","text":""},{"location":"development/contributing/#updating-documentation","title":"Updating Documentation","text":"<p>Documentation is built with MkDocs:</p> <pre><code># Install MkDocs\npip install mkdocs-material mkdocs-git-revision-date-localized-plugin\n\n# Serve locally\nmkdocs serve\n\n# Build\nmkdocs build\n\n# Deploy (maintainers only)\nmkdocs gh-deploy\n### Documentation Structure\n\n```text\ndocs/\n\u251c\u2500\u2500 index.md                    # Home page\n\u251c\u2500\u2500 installation/\n\u2502   \u251c\u2500\u2500 index.md               # Installation overview\n\u2502   \u251c\u2500\u2500 docker-compose.md      # Docker Compose guide\n\u251c\u2500\u2500 configuration/\n\u2502   \u251c\u2500\u2500 index.md               # Configuration overview\n\u2502   \u251c\u2500\u2500 environment-variables.md\n\u2502   \u2514\u2500\u2500 advanced.md\n\u251c\u2500\u2500 usage/\n\u2502   \u251c\u2500\u2500 basic.md\n\u2502   \u251c\u2500\u2500 advanced.md\n\u2502   \u2514\u2500\u2500 troubleshooting.md\n\u2514\u2500\u2500 development/\n    \u251c\u2500\u2500 contributing.md        # This file\n    \u2514\u2500\u2500 architecture.md\n</code></pre>"},{"location":"development/contributing/#release-process","title":"Release Process","text":"<p>(For maintainers)</p> <ol> <li>Update CHANGELOG.md</li> <li>Create release branch: <code>release/v1.2.3</code></li> <li>Update version (if applicable)</li> <li>Create PR to main</li> <li>After merge, create GitHub Release</li> <li>Tag triggers Docker image build</li> </ol>"},{"location":"development/contributing/#code-review","title":"Code Review","text":""},{"location":"development/contributing/#as-a-reviewer","title":"As a Reviewer","text":"<ul> <li>Be constructive and respectful</li> <li>Focus on code quality, not personal preferences</li> <li>Suggest improvements, don't demand them</li> <li>Approve when ready, request changes if needed</li> </ul>"},{"location":"development/contributing/#as-an-author","title":"As an Author","text":"<ul> <li>Respond to all comments</li> <li>Make requested changes or explain why not</li> <li>Keep discussions focused on the code</li> <li>Be open to feedback</li> </ul>"},{"location":"development/contributing/#getting-help","title":"Getting Help","text":"<ul> <li>Questions: Open a Discussion</li> <li>Bugs: Open an Issue</li> <li>Chat: (If available)</li> </ul>"},{"location":"development/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Be respectful, inclusive, and professional. We're all here to build great software together.</p>"},{"location":"development/contributing/#license","title":"License","text":"<p>By contributing, you agree that your contributions will be licensed under the Apache License 2.0.</p>"},{"location":"installation/","title":"Installation Overview","text":"<p>The GitHub Cookstyle Runner can be deployed in multiple ways depending on your infrastructure and requirements.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing, ensure you have:</p>"},{"location":"installation/#1-github-app-credentials","title":"1. GitHub App Credentials","text":"<p>You'll need to create a GitHub App with the following:</p> <ul> <li>GitHub App ID: The numeric ID of your GitHub App</li> <li>Installation ID: The installation ID for your organization</li> <li>Private Key: A PEM-encoded private key for authentication</li> </ul> <p>Creating a GitHub App</p> <p>See the GitHub App Setup Guide for detailed instructions on creating a GitHub App.</p>"},{"location":"installation/#2-required-permissions","title":"2. Required Permissions","text":"<p>Your GitHub App must have the following permissions:</p> <ul> <li> <p>Repository permissions:</p> <ul> <li>Contents: Read &amp; Write (to clone repos and create branches)</li> <li>Pull Requests: Read &amp; Write (to create PRs)</li> <li>Issues: Read &amp; Write (to create issues for manual fixes)</li> <li>Metadata: Read (to access repository information)</li> </ul> </li> <li> <p>Organization permissions:</p> <ul> <li>Members: Read (to search for repositories)</li> </ul> </li> </ul>"},{"location":"installation/#3-environment-requirements","title":"3. Environment Requirements","text":"<p>Choose your deployment method:</p> Docker ComposeKubernetesLocal Development <ul> <li>Docker Engine 20.10+</li> <li>Docker Compose 2.0+</li> </ul> <ul> <li>Kubernetes 1.19+</li> <li>kubectl configured</li> <li>Persistent storage support</li> </ul> <ul> <li>Ruby 3.4+</li> <li>Git</li> <li>Bundler</li> </ul>"},{"location":"installation/#installation-methods","title":"Installation Methods","text":""},{"location":"installation/#docker-compose","title":"Docker Compose","text":"<p>Best for: Local development, testing, single-host deployments</p> <p>Docker Compose Installation Guide \u2192</p>"},{"location":"installation/#kubernetes","title":"Kubernetes","text":"<p>Best for: Production deployments, scheduled runs, high availability</p> <p>Kubernetes Installation Guide \u2192</p>"},{"location":"installation/#local-development","title":"Local Development","text":"<p>Best for: Contributing to the project, debugging</p> <pre><code># Clone the repository\ngit clone https://github.com/damacus/github-cookstyle-runner.git\ncd github-cookstyle-runner\n\n# Install dependencies\nbundle install\n\n# Configure (copy and edit)\ncp config/settings/local.yml.example config/settings/local.yml\n\n# Run\n./bin/cookstyle-runner\n</code></pre>"},{"location":"installation/#docker-images","title":"Docker Images","text":"<p>Images are published to GitHub Container Registry:</p> Tag Description Use Case <code>latest</code> Latest main branch Production <code>v1.0.0</code> Specific version Pinned deployments <code>dev</code> Latest PR build Testing <p>Pull the image:</p> <pre><code>docker pull ghcr.io/damacus/github-cookstyle-runner:latest\n</code></pre>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<ol> <li>Choose your installation method above</li> <li>Follow the detailed installation guide</li> <li>Configure the application</li> <li>Run your first scan</li> </ol>"},{"location":"installation/docker-compose/","title":"Docker Compose Installation","text":"<p>Docker Compose is ideal for local development, testing, or running on a single host.</p>"},{"location":"installation/docker-compose/#setup","title":"Setup","text":""},{"location":"installation/docker-compose/#1-create-docker-composeyml","title":"1. Create docker-compose.yml","text":"<p>Create a <code>docker-compose.yml</code> file in your working directory:</p> <pre><code>services:\n  cookstyle-runner:\n    image: ghcr.io/damacus/github-cookstyle-runner:latest\n    volumes:\n      # Persistent cache for improved performance\n      - cookstyle_cache:/app/.cache\n      # Optional: mount custom configuration\n      # - ./config/settings/local.yml:/app/config/settings/local.yml\n    environment:\n      # Required: GitHub App Authentication\n      - GITHUB_APP_ID=${GITHUB_APP_ID}\n      - GITHUB_APP_INSTALLATION_ID=${GITHUB_APP_INSTALLATION_ID}\n      - GITHUB_APP_PRIVATE_KEY=${GITHUB_APP_PRIVATE_KEY}\n\n      # Required: Repository Configuration\n      - GCR_DESTINATION_REPO_OWNER=your-org-name\n      - GCR_DESTINATION_REPO_TOPICS=chef-cookbook\n\n      # Required: Git Configuration\n      - GCR_GIT_EMAIL=bot@example.com\n      - GCR_GIT_NAME=Cookstyle Bot\n\n      # Optional: Branch Configuration\n      - GCR_BRANCH_NAME=automated/cookstyle\n      - GCR_DEFAULT_GIT_BRANCH=main\n\n      # Optional: Pull Request Configuration\n      - GCR_PULL_REQUEST_TITLE=Automated PR: Cookstyle Changes\n      - GCR_PULL_REQUEST_LABELS=tech-debt,automated\n      - GCR_CREATE_MANUAL_FIX_PRS=1\n\n      # Optional: Cache Configuration\n      - GCR_USE_CACHE=1\n      - GCR_CACHE_MAX_AGE=7\n      - GCR_FORCE_REFRESH=0\n\n      # Optional: Performance Configuration\n      - GCR_THREAD_COUNT=4\n      - GCR_RETRY_COUNT=3\n      - GCR_DEBUG_MODE=0\n\n      # Optional: Repository Filtering\n      # - GCR_FILTER_REPOS=repo1,repo2,repo3\n\nvolumes:\n  cookstyle_cache:\n</code></pre>"},{"location":"installation/docker-compose/#2-create-env-file","title":"2. Create .env File","text":"<p>For security, store sensitive credentials in a <code>.env</code> file:</p> <pre><code># .env\nGITHUB_APP_ID=123456\nGITHUB_APP_INSTALLATION_ID=789012\nGITHUB_APP_PRIVATE_KEY=\"-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEA...\n-----END RSA PRIVATE KEY-----\"\n</code></pre> <p>Security</p> <p>Add <code>.env</code> to your <code>.gitignore</code> to prevent committing secrets to version control.</p>"},{"location":"installation/docker-compose/#3-run-the-application","title":"3. Run the Application","text":"<pre><code># One-time run\ndocker-compose up\n\n# Run in background\ndocker-compose up -d\n\n# View logs\ndocker-compose logs -f\n\n# Stop the application\ndocker-compose down\n</code></pre>"},{"location":"installation/docker-compose/#scheduled-runs","title":"Scheduled Runs","text":"<p>For scheduled runs, use a cron job on the host:</p> <pre><code># Edit crontab\ncrontab -e\n\n# Add entry to run daily at 2 AM\n0 2 * * * cd /path/to/cookstyle-runner &amp;&amp; docker-compose up\n</code></pre>"},{"location":"installation/docker-compose/#monitoring","title":"Monitoring","text":""},{"location":"installation/docker-compose/#view-logs","title":"View Logs","text":"<pre><code># View logs\ndocker-compose logs -f cookstyle-runner\n\n# View last 100 lines\ndocker-compose logs --tail=100 cookstyle-runner\n</code></pre>"},{"location":"installation/docker-compose/#check-container-status","title":"Check Container Status","text":"<pre><code># Check container status\ndocker-compose ps\n\n# Access container shell\ndocker-compose exec cookstyle-runner /bin/bash\n</code></pre>"},{"location":"installation/docker-compose/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/docker-compose/#container-wont-start","title":"Container Won't Start","text":"<p>Check logs for errors:</p> <pre><code>docker-compose logs cookstyle-runner\n</code></pre> <p>Common issues:</p> <ul> <li>Missing required environment variables</li> <li>Invalid GitHub App credentials</li> <li>Network connectivity issues</li> </ul>"},{"location":"installation/docker-compose/#cache-issues","title":"Cache Issues","text":"<p>Clear the cache volume:</p> <pre><code># Stop containers\ndocker-compose down\n\n# Remove volumes\ndocker-compose down -v\n\n# Restart\ndocker-compose up\n</code></pre>"},{"location":"installation/docker-compose/#upgrading","title":"Upgrading","text":"<p>Pull the latest image and restart:</p> <pre><code># Pull latest image\ndocker-compose pull\n\n# Restart with new image\ndocker-compose up -d\n</code></pre>"},{"location":"installation/docker-compose/#uninstallation","title":"Uninstallation","text":"<pre><code># Stop and remove containers\ndocker-compose down\n\n# Remove volumes (including cache)\ndocker-compose down -v\n\n# Remove images\ndocker rmi ghcr.io/damacus/github-cookstyle-runner:latest\n</code></pre>"},{"location":"installation/docker-compose/#next-steps","title":"Next Steps","text":"<ul> <li>Configure the application</li> <li>Learn about usage</li> <li>Troubleshooting guide</li> </ul>"},{"location":"installation/kubernetes/","title":"Kubernetes Installation","text":"<p>Kubernetes is ideal for production deployments, especially when using CronJobs for scheduled runs.</p>"},{"location":"installation/kubernetes/#prerequisites","title":"Prerequisites","text":"<ul> <li>Kubernetes 1.19+</li> <li>kubectl configured</li> <li>Persistent storage support</li> </ul>"},{"location":"installation/kubernetes/#setup","title":"Setup","text":""},{"location":"installation/kubernetes/#1-create-secret-for-github-app-credentials","title":"1. Create Secret for GitHub App Credentials","text":"<p>Create a Kubernetes Secret to store your GitHub App credentials securely.</p>"},{"location":"installation/kubernetes/#option-a-from-command-line","title":"Option A: From Command Line","text":"<pre><code>kubectl create secret generic cookstyle-runner-secrets \\\n  --from-literal=github-app-id=123456 \\\n  --from-literal=github-app-installation-id=789012 \\\n  --from-file=github-app-private-key=/path/to/private-key.pem \\\n  --namespace=default\n</code></pre>"},{"location":"installation/kubernetes/#option-b-from-yaml","title":"Option B: From YAML","text":"<p>Create <code>secrets.yaml</code>:</p> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: cookstyle-runner-secrets\n  namespace: default\ntype: Opaque\nstringData:\n  github-app-id: \"123456\"\n  github-app-installation-id: \"789012\"\n  github-app-private-key: |\n    -----BEGIN RSA PRIVATE KEY-----\n    MIIEpAIBAAKCAQEA...\n    -----END RSA PRIVATE KEY-----\n</code></pre> <p>Apply the secret:</p> <pre><code>kubectl apply -f secrets.yaml\n</code></pre> <p>Security</p> <p>Never commit secrets to version control. Consider using tools like Sealed Secrets or external secret managers.</p>"},{"location":"installation/kubernetes/#2-create-configmap","title":"2. Create ConfigMap","text":"<p>Create <code>configmap.yaml</code> for application configuration:</p> <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: cookstyle-runner-config\n  namespace: default\ndata:\n  GCR_DESTINATION_REPO_OWNER: \"your-org-name\"\n  GCR_DESTINATION_REPO_TOPICS: \"chef-cookbook\"\n  GCR_GIT_EMAIL: \"bot@example.com\"\n  GCR_GIT_NAME: \"Cookstyle Bot\"\n  GCR_BRANCH_NAME: \"automated/cookstyle\"\n  GCR_DEFAULT_GIT_BRANCH: \"main\"\n  GCR_PULL_REQUEST_TITLE: \"Automated PR: Cookstyle Changes\"\n  GCR_PULL_REQUEST_LABELS: \"tech-debt,automated\"\n  GCR_CREATE_MANUAL_FIX_PRS: \"1\"\n  GCR_USE_CACHE: \"1\"\n  GCR_CACHE_MAX_AGE: \"7\"\n  GCR_THREAD_COUNT: \"4\"\n  GCR_RETRY_COUNT: \"3\"\n  GCR_DEBUG_MODE: \"0\"\n</code></pre> <p>Apply the ConfigMap:</p> <pre><code>kubectl apply -f configmap.yaml\n</code></pre>"},{"location":"installation/kubernetes/#3-create-persistentvolumeclaim","title":"3. Create PersistentVolumeClaim","text":"<p>Create <code>pvc.yaml</code> for cache storage:</p> <pre><code>apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: cookstyle-runner-cache\n  namespace: default\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 5Gi\n  # Optional: specify storage class\n  # storageClassName: standard\n</code></pre> <p>Apply the PVC:</p> <pre><code>kubectl apply -f pvc.yaml\n</code></pre>"},{"location":"installation/kubernetes/#4-create-cronjob","title":"4. Create CronJob","text":"<p>Create <code>cronjob.yaml</code> for scheduled runs:</p> <pre><code>apiVersion: batch/v1\nkind: CronJob\nmetadata:\n  name: cookstyle-runner\n  namespace: default\nspec:\n  # Run daily at 2 AM UTC\n  schedule: \"0 2 * * *\"\n\n  # Keep last 3 successful and 1 failed job for debugging\n  successfulJobsHistoryLimit: 3\n  failedJobsHistoryLimit: 1\n\n  # Don't start new job if previous is still running\n  concurrencyPolicy: Forbid\n\n  jobTemplate:\n    spec:\n      # Clean up completed jobs after 1 hour\n      ttlSecondsAfterFinished: 3600\n\n      template:\n        metadata:\n          labels:\n            app: cookstyle-runner\n        spec:\n          restartPolicy: OnFailure\n\n          containers:\n          - name: cookstyle-runner\n            image: ghcr.io/damacus/github-cookstyle-runner:latest\n            imagePullPolicy: Always\n\n            # Resource limits (adjust based on your needs)\n            resources:\n              requests:\n                memory: \"512Mi\"\n                cpu: \"500m\"\n              limits:\n                memory: \"2Gi\"\n                cpu: \"2000m\"\n\n            # Environment variables from ConfigMap\n            envFrom:\n            - configMapRef:\n                name: cookstyle-runner-config\n\n            # Sensitive environment variables from Secret\n            env:\n            - name: GITHUB_APP_ID\n              valueFrom:\n                secretKeyRef:\n                  name: cookstyle-runner-secrets\n                  key: github-app-id\n            - name: GITHUB_APP_INSTALLATION_ID\n              valueFrom:\n                secretKeyRef:\n                  name: cookstyle-runner-secrets\n                  key: github-app-installation-id\n            - name: GITHUB_APP_PRIVATE_KEY\n              valueFrom:\n                secretKeyRef:\n                  name: cookstyle-runner-secrets\n                  key: github-app-private-key\n\n            # Persistent cache volume\n            volumeMounts:\n            - name: cache\n              mountPath: /app/.cache\n\n          volumes:\n          - name: cache\n            persistentVolumeClaim:\n              claimName: cookstyle-runner-cache\n</code></pre> <p>Apply the CronJob:</p> <pre><code>kubectl apply -f cronjob.yaml\n</code></pre>"},{"location":"installation/kubernetes/#5-verify-deployment","title":"5. Verify Deployment","text":"<pre><code># Check CronJob\nkubectl get cronjob cookstyle-runner\n\n# Check PVC\nkubectl get pvc cookstyle-runner-cache\n\n# Check ConfigMap\nkubectl get configmap cookstyle-runner-config\n\n# Check Secret\nkubectl get secret cookstyle-runner-secrets\n</code></pre>"},{"location":"installation/kubernetes/#testing","title":"Testing","text":"<p>Manually trigger a job to test your configuration:</p> <pre><code># Create a test job\nkubectl create job --from=cronjob/cookstyle-runner cookstyle-runner-manual-test\n\n# View job status\nkubectl get job cookstyle-runner-manual-test\n\n# View logs\nkubectl logs -f job/cookstyle-runner-manual-test\n\n# Clean up test job\nkubectl delete job cookstyle-runner-manual-test\n</code></pre>"},{"location":"installation/kubernetes/#alternative-one-time-job","title":"Alternative: One-time Job","text":"<p>For one-time runs instead of scheduled CronJobs, create <code>job.yaml</code>:</p> <pre><code>apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: cookstyle-runner-oneshot\n  namespace: default\nspec:\n  ttlSecondsAfterFinished: 3600\n  template:\n    metadata:\n      labels:\n        app: cookstyle-runner\n    spec:\n      restartPolicy: OnFailure\n      containers:\n      - name: cookstyle-runner\n        image: ghcr.io/damacus/github-cookstyle-runner:latest\n        envFrom:\n        - configMapRef:\n            name: cookstyle-runner-config\n        env:\n        - name: GITHUB_APP_ID\n          valueFrom:\n            secretKeyRef:\n              name: cookstyle-runner-secrets\n              key: github-app-id\n        - name: GITHUB_APP_INSTALLATION_ID\n          valueFrom:\n            secretKeyRef:\n              name: cookstyle-runner-secrets\n              key: github-app-installation-id\n        - name: GITHUB_APP_PRIVATE_KEY\n          valueFrom:\n            secretKeyRef:\n              name: cookstyle-runner-secrets\n              key: github-app-private-key\n        volumeMounts:\n        - name: cache\n          mountPath: /app/.cache\n      volumes:\n      - name: cache\n        persistentVolumeClaim:\n          claimName: cookstyle-runner-cache\n</code></pre> <p>Run the job:</p> <pre><code>kubectl apply -f job.yaml\nkubectl logs -f job/cookstyle-runner-oneshot\n</code></pre>"},{"location":"installation/kubernetes/#monitoring","title":"Monitoring","text":""},{"location":"installation/kubernetes/#view-cronjob-status","title":"View CronJob Status","text":"<pre><code># View CronJob details\nkubectl describe cronjob cookstyle-runner\n\n# View recent jobs\nkubectl get jobs --selector=app=cookstyle-runner\n\n# View job history\nkubectl get jobs --selector=app=cookstyle-runner --sort-by=.metadata.creationTimestamp\n</code></pre>"},{"location":"installation/kubernetes/#view-logs","title":"View Logs","text":"<pre><code># View logs from most recent job\nkubectl logs -l app=cookstyle-runner --tail=100\n\n# View logs from specific job\nkubectl logs job/cookstyle-runner-28934567\n\n# Follow logs in real-time\nkubectl logs -f -l app=cookstyle-runner\n</code></pre>"},{"location":"installation/kubernetes/#check-cache-pvc","title":"Check Cache PVC","text":"<pre><code># Check PVC status\nkubectl get pvc cookstyle-runner-cache\n\n# View PVC details\nkubectl describe pvc cookstyle-runner-cache\n\n# Check storage usage (requires metrics-server)\nkubectl top pv\n</code></pre>"},{"location":"installation/kubernetes/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/kubernetes/#job-fails-to-start","title":"Job Fails to Start","text":"<p>Check events:</p> <pre><code>kubectl describe cronjob cookstyle-runner\nkubectl describe job &lt;job-name&gt;\n</code></pre> <p>Common issues:</p> <ul> <li>Missing secrets or ConfigMap</li> <li>Insufficient resources</li> <li>Image pull errors</li> </ul>"},{"location":"installation/kubernetes/#out-of-memory","title":"Out of Memory","text":"<p>If pods are killed with OOMKilled status:</p> <ol> <li>Reduce <code>GCR_THREAD_COUNT</code> in ConfigMap</li> <li>Increase memory limits in CronJob spec</li> <li>Process fewer repositories using <code>GCR_FILTER_REPOS</code></li> </ol>"},{"location":"installation/kubernetes/#cache-issues","title":"Cache Issues","text":"<p>Check PVC status and clear if needed:</p> <pre><code># Delete and recreate PVC (will lose cache)\nkubectl delete pvc cookstyle-runner-cache\nkubectl apply -f pvc.yaml\n</code></pre>"},{"location":"installation/kubernetes/#upgrading","title":"Upgrading","text":"<p>Update the image version in your CronJob:</p> <pre><code># Edit CronJob\nkubectl edit cronjob cookstyle-runner\n\n# Or update via kubectl set image\nkubectl set image cronjob/cookstyle-runner \\\n  cookstyle-runner=ghcr.io/damacus/github-cookstyle-runner:v2.0.0\n\n# Verify update\nkubectl describe cronjob cookstyle-runner | grep Image\n</code></pre>"},{"location":"installation/kubernetes/#uninstallation","title":"Uninstallation","text":"<p>Remove all resources:</p> <pre><code># Delete CronJob\nkubectl delete cronjob cookstyle-runner\n\n# Delete ConfigMap\nkubectl delete configmap cookstyle-runner-config\n\n# Delete Secret\nkubectl delete secret cookstyle-runner-secrets\n\n# Delete PVC (will delete cache data)\nkubectl delete pvc cookstyle-runner-cache\n\n# Or delete all at once\nkubectl delete -f cronjob.yaml\nkubectl delete -f configmap.yaml\nkubectl delete -f secrets.yaml\nkubectl delete -f pvc.yaml\n</code></pre>"},{"location":"installation/kubernetes/#next-steps","title":"Next Steps","text":"<ul> <li>Configure the application</li> <li>Learn about usage</li> <li>Troubleshooting guide</li> </ul>"},{"location":"usage/advanced/","title":"Advanced Usage","text":"<p>Advanced usage patterns and workflows for power users.</p>"},{"location":"usage/advanced/#batch-processing","title":"Batch Processing","text":""},{"location":"usage/advanced/#process-multiple-organizations","title":"Process Multiple Organizations","text":"<p>Deploy separate instances for each organization:</p> <pre><code># Organization A\ndocker-compose -f docker-compose-org-a.yml up\n\n# Organization B\ndocker-compose -f docker-compose-org-b.yml up\n</code></pre>"},{"location":"usage/advanced/#parallel-processing-with-filtering","title":"Parallel Processing with Filtering","text":"<p>Process different repository groups in parallel:</p> <pre><code># Terminal 1: Process group 1\ndocker-compose run -e GCR_FILTER_REPOS=repo1,repo2,repo3 cookstyle-runner\n\n# Terminal 2: Process group 2\ndocker-compose run -e GCR_FILTER_REPOS=repo4,repo5,repo6 cookstyle-runner\n</code></pre>"},{"location":"usage/advanced/#custom-workflows","title":"Custom Workflows","text":""},{"location":"usage/advanced/#dry-run-mode","title":"Dry Run Mode","text":"<p>Test configuration without creating PRs (not yet implemented):</p> <pre><code># Future feature\nGCR_DRY_RUN=1 docker-compose up\n</code></pre>"},{"location":"usage/advanced/#selective-processing","title":"Selective Processing","text":""},{"location":"usage/advanced/#only-auto-correctable-issues","title":"Only Auto-Correctable Issues","text":"<pre><code>GCR_CREATE_MANUAL_FIX_PRS=0 docker-compose up\n</code></pre>"},{"location":"usage/advanced/#only-manual-issues","title":"Only Manual Issues","text":"<p>Process repos but only create issues for manual fixes:</p> <pre><code># Requires custom scripting - not directly supported\n</code></pre>"},{"location":"usage/advanced/#integration-patterns","title":"Integration Patterns","text":""},{"location":"usage/advanced/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"usage/advanced/#github-actions","title":"GitHub Actions","text":"<pre><code>name: Scheduled Cookstyle\n\non:\n  schedule:\n    - cron: '0 2 * * *'  # Daily at 2 AM\n  workflow_dispatch:\n\njobs:\n  cookstyle:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Run Cookstyle Runner\n        run: |\n          docker run --rm \\\n            -e GITHUB_APP_ID=${{ secrets.GITHUB_APP_ID }} \\\n            -e GITHUB_APP_INSTALLATION_ID=${{ secrets.GITHUB_APP_INSTALLATION_ID }} \\\n            -e GITHUB_APP_PRIVATE_KEY=\"${{ secrets.GITHUB_APP_PRIVATE_KEY }}\" \\\n            -e GCR_DESTINATION_REPO_OWNER=my-org \\\n            -e GCR_DESTINATION_REPO_TOPICS=chef-cookbook \\\n            -e GCR_GIT_EMAIL=bot@example.com \\\n            -e GCR_GIT_NAME=\"Cookstyle Bot\" \\\n            ghcr.io/damacus/github-cookstyle-runner:latest\n</code></pre>"},{"location":"usage/advanced/#jenkins","title":"Jenkins","text":"<pre><code>pipeline {\n    agent any\n\n    triggers {\n        cron('0 2 * * *')\n    }\n\n    environment {\n        GITHUB_APP_ID = credentials('github-app-id')\n        GITHUB_APP_INSTALLATION_ID = credentials('github-app-installation-id')\n        GITHUB_APP_PRIVATE_KEY = credentials('github-app-private-key')\n    }\n\n    stages {\n        stage('Run Cookstyle') {\n            steps {\n                sh '''\n                    docker run --rm \\\n                        -e GITHUB_APP_ID \\\n                        -e GITHUB_APP_INSTALLATION_ID \\\n                        -e GITHUB_APP_PRIVATE_KEY \\\n                        -e GCR_DESTINATION_REPO_OWNER=my-org \\\n                        -e GCR_DESTINATION_REPO_TOPICS=chef-cookbook \\\n                        -e GCR_GIT_EMAIL=bot@example.com \\\n                        -e GCR_GIT_NAME=\"Cookstyle Bot\" \\\n                        ghcr.io/damacus/github-cookstyle-runner:latest\n                '''\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"usage/advanced/#webhook-integration","title":"Webhook Integration","text":"<p>Trigger on repository events (requires custom wrapper):</p> <pre><code># webhook_handler.py\nfrom flask import Flask, request\nimport subprocess\n\napp = Flask(__name__)\n\n@app.route('/webhook', methods=['POST'])\ndef handle_webhook():\n    event = request.headers.get('X-GitHub-Event')\n    payload = request.json\n\n    if event == 'push':\n        repo = payload['repository']['name']\n        # Trigger Cookstyle Runner for specific repo\n        subprocess.run([\n            'docker', 'run', '--rm',\n            '-e', f'GCR_FILTER_REPOS={repo}',\n            # ... other env vars\n            'ghcr.io/damacus/github-cookstyle-runner:latest'\n        ])\n\n    return '', 200\n</code></pre>"},{"location":"usage/advanced/#performance-optimization","title":"Performance Optimization","text":""},{"location":"usage/advanced/#memory-constrained-environments","title":"Memory-Constrained Environments","text":"<pre><code># Reduce thread count\nGCR_THREAD_COUNT=2\n\n# Process fewer repos at once\nGCR_FILTER_REPOS=repo1,repo2\n\n# Kubernetes: Set resource limits\nresources:\n  limits:\n    memory: \"512Mi\"\n</code></pre>"},{"location":"usage/advanced/#high-throughput-environments","title":"High-Throughput Environments","text":"<pre><code># Increase threads\nGCR_THREAD_COUNT=16\n\n# Aggressive caching\nGCR_CACHE_MAX_AGE=30\n\n# Kubernetes: Increase resources\nresources:\n  requests:\n    memory: \"1Gi\"\n    cpu: \"1000m\"\n  limits:\n    memory: \"4Gi\"\n    cpu: \"4000m\"\n</code></pre>"},{"location":"usage/advanced/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"usage/advanced/#structured-logging","title":"Structured Logging","text":"<p>Parse logs for monitoring:</p> <pre><code># Extract key metrics\ndocker-compose logs cookstyle-runner | grep \"Summary:\"\n\n# Count PRs created\ndocker-compose logs cookstyle-runner | grep \"Pull request created\" | wc -l\n\n# Find errors\ndocker-compose logs cookstyle-runner | grep \"ERROR\"\n</code></pre>"},{"location":"usage/advanced/#prometheus-metrics-future","title":"Prometheus Metrics (Future)","text":"<pre><code># Future feature - not yet implemented\nmetrics:\n  - cookstyle_repos_processed_total\n  - cookstyle_prs_created_total\n  - cookstyle_offenses_found_total\n  - cookstyle_processing_duration_seconds\n</code></pre>"},{"location":"usage/advanced/#alerting","title":"Alerting","text":"<p>Set up alerts for failures:</p> <pre><code># Example: Send alert if exit code != 0\ndocker-compose up || curl -X POST https://alerts.example.com/webhook\n</code></pre>"},{"location":"usage/advanced/#cache-management","title":"Cache Management","text":""},{"location":"usage/advanced/#inspect-cache","title":"Inspect Cache","text":"<pre><code># Docker Compose\ndocker-compose run --entrypoint cat cookstyle-runner /app/.cache/cache.json | jq\n\n# Kubernetes\nkubectl exec -it &lt;pod-name&gt; -- cat /app/.cache/cache.json | jq\n</code></pre>"},{"location":"usage/advanced/#clear-cache","title":"Clear Cache","text":"<pre><code># Docker Compose\ndocker-compose run --entrypoint rm cookstyle-runner /app/.cache/cache.json\n\n# Kubernetes\nkubectl exec -it &lt;pod-name&gt; -- rm /app/.cache/cache.json\n</code></pre>"},{"location":"usage/advanced/#backup-cache","title":"Backup Cache","text":"<pre><code># Docker Compose\ndocker cp &lt;container-id&gt;:/app/.cache/cache.json ./cache-backup.json\n\n# Kubernetes\nkubectl cp &lt;pod-name&gt;:/app/.cache/cache.json ./cache-backup.json\n</code></pre>"},{"location":"usage/advanced/#custom-cookstyle-rules","title":"Custom Cookstyle Rules","text":""},{"location":"usage/advanced/#mount-custom-rubocopyml","title":"Mount Custom .rubocop.yml","text":"<pre><code># docker-compose.yml\nservices:\n  cookstyle-runner:\n    volumes:\n      - ./custom-rubocop.yml:/app/.rubocop.yml:ro\n</code></pre> <p>Note: This affects the runner itself, not the target repositories.</p>"},{"location":"usage/advanced/#troubleshooting-advanced-scenarios","title":"Troubleshooting Advanced Scenarios","text":""},{"location":"usage/advanced/#rate-limiting","title":"Rate Limiting","text":"<p>If you hit rate limits:</p> <pre><code># Check rate limit status\ncurl -H \"Authorization: Bearer &lt;token&gt;\" \\\n  https://api.github.com/rate_limit\n\n# Solutions:\n# 1. Reduce thread count\nGCR_THREAD_COUNT=2\n\n# 2. Enable aggressive caching\nGCR_CACHE_MAX_AGE=30\n\n# 3. Process fewer repos\nGCR_FILTER_REPOS=critical-repo1,critical-repo2\n</code></pre>"},{"location":"usage/advanced/#large-repository-sets","title":"Large Repository Sets","text":"<p>For organizations with 100+ repositories:</p> <pre><code># Split into batches\n# Batch 1\nGCR_FILTER_REPOS=repo1,repo2,...,repo50\n\n# Batch 2 (run later)\nGCR_FILTER_REPOS=repo51,repo52,...,repo100\n</code></pre>"},{"location":"usage/advanced/#network-issues","title":"Network Issues","text":"<p>Handle transient network failures:</p> <pre><code># Increase retry count\nGCR_RETRY_COUNT=5\n\n# Enable debug logging\nGCR_DEBUG_MODE=1\n</code></pre>"},{"location":"usage/advanced/#next-steps","title":"Next Steps","text":"<ul> <li>Troubleshooting guide</li> <li>Configuration reference</li> <li>Basic usage</li> </ul>"},{"location":"usage/basic/","title":"Basic Usage","text":"<p>Learn how to run the GitHub Cookstyle Runner and understand its output.</p>"},{"location":"usage/basic/#running-the-application","title":"Running the Application","text":""},{"location":"usage/basic/#docker-compose","title":"Docker Compose","text":"<pre><code># One-time run\ndocker-compose up\n\n# Run in background\ndocker-compose up -d\n\n# View logs\ndocker-compose logs -f cookstyle-runner\n</code></pre>"},{"location":"usage/basic/#kubernetes","title":"Kubernetes","text":"<pre><code># Manually trigger a job\nkubectl create job --from=cronjob/cookstyle-runner cookstyle-manual-run\n\n# View logs\nkubectl logs -f job/cookstyle-manual-run\n</code></pre>"},{"location":"usage/basic/#local-development","title":"Local Development","text":"<pre><code># Run directly\n./bin/cookstyle-runner\n\n# Or with bundle\nbundle exec ./bin/cookstyle-runner\n</code></pre>"},{"location":"usage/basic/#understanding-output","title":"Understanding Output","text":""},{"location":"usage/basic/#startup","title":"Startup","text":"<pre><code>[INFO] GitHub Cookstyle Runner starting...\n[INFO] Configuration loaded successfully\n[INFO] GitHub App authenticated\n[INFO] Cache loaded: 15 entries\n[INFO] Thread count: 4\n[INFO] Cache max age: 7 days\n</code></pre>"},{"location":"usage/basic/#repository-processing","title":"Repository Processing","text":"<pre><code>[INFO] Found 23 repositories matching topics: chef-cookbook\n[INFO] Processing repositories...\n[INFO] [1/23] Processing: sous-chefs/apt\n[INFO] [1/23] Cloning repository...\n[INFO] [1/23] Running Cookstyle...\n[INFO] [1/23] Found 3 offenses (1 auto-correctable, 2 manual)\n[INFO] [1/23] Creating pull request...\n[INFO] [1/23] \u2713 Pull request created: #42\n[INFO] [2/23] Processing: sous-chefs/nginx\n[INFO] [2/23] \u2713 No offenses found (cached)\n</code></pre>"},{"location":"usage/basic/#completion","title":"Completion","text":"<pre><code>[INFO] Processing complete\n[INFO] Summary:\n[INFO]   Total repositories: 23\n[INFO]   Processed: 23\n[INFO]   Skipped (cached): 15\n[INFO]   Pull requests created: 5\n[INFO]   Issues created: 2\n[INFO]   Errors: 0\n[INFO] Cache saved: 23 entries\n</code></pre>"},{"location":"usage/basic/#common-workflows","title":"Common Workflows","text":""},{"location":"usage/basic/#first-run","title":"First Run","text":"<p>On your first run, the application will:</p> <ol> <li>Authenticate with GitHub</li> <li>Search for repositories by topics</li> <li>Clone each repository</li> <li>Run Cookstyle</li> <li>Create PRs for auto-correctable issues</li> <li>Cache results</li> </ol> <p>Expected time: 2-5 minutes per repository (depending on size)</p>"},{"location":"usage/basic/#subsequent-runs","title":"Subsequent Runs","text":"<p>With caching enabled:</p> <ol> <li>Load cache</li> <li>Check each repository's latest commit SHA</li> <li>Skip unchanged repositories</li> <li>Process only changed repositories</li> </ol> <p>Expected time: Seconds for cached repos, 2-5 minutes for changed repos</p>"},{"location":"usage/basic/#force-refresh","title":"Force Refresh","text":"<p>To reprocess all repositories:</p> <pre><code># Docker Compose\ndocker-compose run -e GCR_FORCE_REFRESH=1 cookstyle-runner\n\n# Kubernetes\nkubectl set env cronjob/cookstyle-runner GCR_FORCE_REFRESH=1\nkubectl create job --from=cronjob/cookstyle-runner cookstyle-force-refresh\nkubectl set env cronjob/cookstyle-runner GCR_FORCE_REFRESH-  # Remove after\n</code></pre>"},{"location":"usage/basic/#pull-request-output","title":"Pull Request Output","text":""},{"location":"usage/basic/#auto-correctable-issues","title":"Auto-Correctable Issues","text":"<p>When Cookstyle finds auto-correctable issues, a PR is created with:</p> <p>Title: <code>Automated PR: Cookstyle Changes</code></p> <p>Body:</p> <pre><code>## Cookstyle Auto-Corrections\n\nThis PR contains automatic fixes from Cookstyle.\n\n### Summary\n- **Total Offenses**: 5\n- **Auto-Corrected**: 5\n\n### Files Changed\n- `recipes/default.rb`: 3 offenses\n- `recipes/install.rb`: 2 offenses\n\n### Cookstyle Version\n7.32.1\n\n---\n*This PR was automatically created by the GitHub Cookstyle Runner*\n</code></pre>"},{"location":"usage/basic/#manual-fix-issues","title":"Manual Fix Issues","text":"<p>When <code>GCR_CREATE_MANUAL_FIX_PRS=1</code>, PRs are created for manual fixes with detailed instructions:</p> <p>Title: <code>Cookstyle: Manual Fixes Required</code></p> <p>Body:</p> <pre><code>## Cookstyle Manual Fixes Required\n\nThe following issues require manual intervention:\n\n### test/integration/default/default_spec.rb\n**Line 1**: Chef/Deprecations/ResourceWithoutUnifiedTrue\n&gt; Set `unified_mode true` in your custom resources\n\n### recipes/config.rb\n**Line 45**: Chef/Correctness/InvalidPlatformHelper\n&gt; Use valid platform helper methods\n\n---\n*This PR was automatically created by the GitHub Cookstyle Runner*\n</code></pre>"},{"location":"usage/basic/#processing-specific-repositories","title":"Processing Specific Repositories","text":""},{"location":"usage/basic/#single-repository","title":"Single Repository","text":"<pre><code>docker-compose run -e GCR_FILTER_REPOS=apt cookstyle-runner\n</code></pre>"},{"location":"usage/basic/#multiple-repositories","title":"Multiple Repositories","text":"<pre><code>docker-compose run -e GCR_FILTER_REPOS=apt,nginx,haproxy cookstyle-runner\n</code></pre>"},{"location":"usage/basic/#monitoring-progress","title":"Monitoring Progress","text":""},{"location":"usage/basic/#real-time-logs","title":"Real-time Logs","text":"<pre><code># Docker Compose\ndocker-compose logs -f cookstyle-runner\n\n# Kubernetes\nkubectl logs -f -l app=cookstyle-runner\n</code></pre>"},{"location":"usage/basic/#check-github","title":"Check GitHub","text":"<ul> <li>Pull Requests: Check your organization's repositories for new PRs</li> <li>Issues: Check for new issues (if <code>GCR_CREATE_MANUAL_FIX_PRS=1</code>)</li> </ul>"},{"location":"usage/basic/#exit-codes","title":"Exit Codes","text":"Code Meaning 0 Success - all repositories processed 1 Configuration error 2 Authentication error 3 Runtime error"},{"location":"usage/basic/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about advanced features</li> <li>Troubleshooting common issues</li> <li>Configure the application</li> </ul>"},{"location":"usage/troubleshooting/","title":"Troubleshooting","text":"<p>Common issues and their solutions.</p>"},{"location":"usage/troubleshooting/#authentication-issues","title":"Authentication Issues","text":""},{"location":"usage/troubleshooting/#symptom-401-unauthorized","title":"Symptom: 401 Unauthorized","text":"<pre><code>[ERROR] GitHub API authentication failed: 401 Unauthorized\n</code></pre> <p>Causes:</p> <ul> <li>Invalid GitHub App ID</li> <li>Invalid Installation ID</li> <li>Invalid or expired private key</li> <li>App not installed on organization</li> </ul> <p>Solutions:</p> <ol> <li>Verify GitHub App credentials:</li> </ol> <pre><code># Check App ID and Installation ID are numeric\necho $GITHUB_APP_ID\necho $GITHUB_APP_INSTALLATION_ID\n\n# Verify private key format\necho \"$GITHUB_APP_PRIVATE_KEY\" | head -1\n# Should output: -----BEGIN RSA PRIVATE KEY-----\n</code></pre> <ol> <li>Verify App installation:</li> <li>Go to GitHub \u2192 Settings \u2192 GitHub Apps</li> <li>Check that the app is installed on your organization</li> <li> <p>Verify the Installation ID matches</p> </li> <li> <p>Generate new private key:</p> </li> <li>GitHub App settings \u2192 Generate new private key</li> <li>Update <code>GITHUB_APP_PRIVATE_KEY</code> environment variable</li> </ol>"},{"location":"usage/troubleshooting/#symptom-403-forbidden","title":"Symptom: 403 Forbidden","text":"<pre><code>[ERROR] GitHub API request failed: 403 Forbidden\n</code></pre> <p>Causes:</p> <ul> <li>Insufficient permissions</li> <li>Rate limiting</li> <li>Repository access denied</li> </ul> <p>Solutions:</p> <ol> <li>Check GitHub App permissions:</li> <li>Repository: Contents (read/write)</li> <li>Repository: Pull Requests (read/write)</li> <li>Repository: Issues (read/write)</li> <li> <p>Organization: Members (read)</p> </li> <li> <p>Check rate limits:</p> </li> </ol> <pre><code># View rate limit status in logs\ndocker-compose logs cookstyle-runner | grep \"rate limit\"\n\n# Enable caching to reduce API calls\nGCR_USE_CACHE=1\nGCR_CACHE_MAX_AGE=7\n</code></pre>"},{"location":"usage/troubleshooting/#configuration-issues","title":"Configuration Issues","text":""},{"location":"usage/troubleshooting/#symptom-missing-required-configuration","title":"Symptom: Missing Required Configuration","text":"<pre><code>[ERROR] Configuration validation failed:\n  - github.app_id is required\n  - destination.repo_owner is required\n</code></pre> <p>Solution:</p> <p>Ensure all required environment variables are set:</p> <pre><code># Required variables\nGITHUB_APP_ID=123456\nGITHUB_APP_INSTALLATION_ID=789012\nGITHUB_APP_PRIVATE_KEY=\"-----BEGIN RSA PRIVATE KEY-----...\"\nGCR_DESTINATION_REPO_OWNER=my-org\nGCR_DESTINATION_REPO_TOPICS=chef-cookbook\nGCR_GIT_EMAIL=bot@example.com\nGCR_GIT_NAME=Cookstyle Bot\n</code></pre>"},{"location":"usage/troubleshooting/#symptom-invalid-configuration-values","title":"Symptom: Invalid Configuration Values","text":"<pre><code>[ERROR] Configuration validation failed:\n  - cache.max_age_days must be a positive integer\n</code></pre> <p>Solution:</p> <p>Check data types:</p> <pre><code># Must be numeric\nGCR_CACHE_MAX_AGE=7  # Not \"7 days\"\nGCR_THREAD_COUNT=4   # Not \"four\"\n\n# Must be 0 or 1 for booleans\nGCR_USE_CACHE=1      # Not \"true\"\nGCR_DEBUG_MODE=0     # Not \"false\"\n</code></pre>"},{"location":"usage/troubleshooting/#repository-processing-issues","title":"Repository Processing Issues","text":""},{"location":"usage/troubleshooting/#symptom-no-repositories-found","title":"Symptom: No Repositories Found","text":"<pre><code>[INFO] Found 0 repositories matching topics: chef-cookbook\n</code></pre> <p>Causes:</p> <ul> <li>No repositories have the specified topics</li> <li>GitHub App doesn't have access to repositories</li> <li>Wrong organization name</li> </ul> <p>Solutions:</p> <ol> <li>Verify organization name:</li> </ol> <pre><code># Check spelling and case\nGCR_DESTINATION_REPO_OWNER=my-org  # Not My-Org\n</code></pre> <ol> <li>Check repository topics:</li> <li>Go to repositories on GitHub</li> <li> <p>Verify they have the specified topics</p> </li> <li> <p>Use specific repository filter:</p> </li> </ol> <pre><code>GCR_FILTER_REPOS=known-repo-name\n</code></pre>"},{"location":"usage/troubleshooting/#symptom-repository-clone-failed","title":"Symptom: Repository Clone Failed","text":"<pre><code>[ERROR] Failed to clone repository: sous-chefs/apt\nfatal: could not read Username for 'https://github.com'\n</code></pre> <p>Causes:</p> <ul> <li>Authentication failure</li> <li>Network issues</li> <li>Repository doesn't exist</li> </ul> <p>Solutions:</p> <ol> <li> <p>Verify authentication (see Authentication Issues above)</p> </li> <li> <p>Check repository exists:</p> </li> </ol> <pre><code># Test manually\ngit clone https://github.com/owner/repo\n</code></pre> <ol> <li>Check network connectivity:</li> </ol> <pre><code># Test GitHub connectivity\ncurl -I https://github.com\n</code></pre>"},{"location":"usage/troubleshooting/#symptom-cookstyle-command-failed","title":"Symptom: Cookstyle Command Failed","text":"<pre><code>[ERROR] Cookstyle command failed with exit code 1\n</code></pre> <p>Causes:</p> <ul> <li>Invalid Ruby syntax in target repository</li> <li>Cookstyle not installed</li> <li>Permission issues</li> </ul> <p>Solutions:</p> <ol> <li>Enable debug mode:</li> </ol> <pre><code>GCR_DEBUG_MODE=1\n</code></pre> <ol> <li>Test Cookstyle manually:</li> </ol> <pre><code># Access container\ndocker-compose exec cookstyle-runner /bin/bash\n\n# Run Cookstyle\ncd /tmp/repos/owner/repo\ncookstyle --version\ncookstyle -a --format json\n</code></pre>"},{"location":"usage/troubleshooting/#pull-request-issues","title":"Pull Request Issues","text":""},{"location":"usage/troubleshooting/#symptom-pr-creation-failed","title":"Symptom: PR Creation Failed","text":"<pre><code>[ERROR] Failed to create pull request: 422 Unprocessable Entity\n</code></pre> <p>Causes:</p> <ul> <li>Branch already exists</li> <li>No changes to commit</li> <li>Invalid branch name</li> <li>Base branch doesn't exist</li> </ul> <p>Solutions:</p> <ol> <li>Check if PR already exists:</li> <li>Go to repository on GitHub</li> <li> <p>Check for existing PR from the branch</p> </li> <li> <p>Verify branch configuration:</p> </li> </ol> <pre><code># Check branch names are valid\nGCR_BRANCH_NAME=automated/cookstyle  # Valid\nGCR_DEFAULT_GIT_BRANCH=main          # Must exist in repo\n</code></pre> <ol> <li>Force refresh to recreate:</li> </ol> <pre><code>GCR_FORCE_REFRESH=1\n</code></pre>"},{"location":"usage/troubleshooting/#symptom-no-prs-created","title":"Symptom: No PRs Created","text":"<pre><code>[INFO] Processing complete\n[INFO]   Pull requests created: 0\n</code></pre> <p>Causes:</p> <ul> <li>No offenses found (good!)</li> <li>All repositories cached and unchanged</li> <li>Cookstyle auto-correction disabled</li> </ul> <p>Solutions:</p> <ol> <li>Check if offenses exist:</li> </ol> <pre><code># Enable debug mode to see Cookstyle output\nGCR_DEBUG_MODE=1\n</code></pre> <ol> <li>Force refresh to bypass cache:</li> </ol> <pre><code>GCR_FORCE_REFRESH=1\n</code></pre> <ol> <li>Test specific repository:</li> </ol> <pre><code>GCR_FILTER_REPOS=repo-with-known-issues\nGCR_USE_CACHE=0\n</code></pre>"},{"location":"usage/troubleshooting/#cache-issues","title":"Cache Issues","text":""},{"location":"usage/troubleshooting/#symptom-cache-not-working","title":"Symptom: Cache Not Working","text":"<pre><code>[INFO] [1/23] Processing: sous-chefs/apt (not cached)\n[INFO] [2/23] Processing: sous-chefs/nginx (not cached)\n</code></pre> <p>Causes:</p> <ul> <li>Cache disabled</li> <li>Cache file corrupted</li> <li>Cache volume not mounted</li> </ul> <p>Solutions:</p> <ol> <li>Verify cache is enabled:</li> </ol> <pre><code>GCR_USE_CACHE=1\n</code></pre> <ol> <li>Check cache volume:</li> </ol> <pre><code># Docker Compose\ndocker-compose exec cookstyle-runner ls -la /app/.cache/\n\n# Kubernetes\nkubectl exec &lt;pod-name&gt; -- ls -la /app/.cache/\n</code></pre> <ol> <li>Clear and rebuild cache:</li> </ol> <pre><code># Remove cache file\ndocker-compose run --entrypoint rm cookstyle-runner /app/.cache/cache.json\n\n# Run again to rebuild\ndocker-compose up\n</code></pre>"},{"location":"usage/troubleshooting/#symptom-stale-cache","title":"Symptom: Stale Cache","text":"<pre><code>[INFO] [1/23] Processing: sous-chefs/apt (cached)\n# But repository has new commits\n</code></pre> <p>Causes:</p> <ul> <li>Cache max age too high</li> <li>Repository SHA not updated</li> </ul> <p>Solutions:</p> <ol> <li>Reduce cache max age:</li> </ol> <pre><code>GCR_CACHE_MAX_AGE=1  # 1 day\n</code></pre> <ol> <li>Force refresh:</li> </ol> <pre><code>GCR_FORCE_REFRESH=1\n</code></pre>"},{"location":"usage/troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"usage/troubleshooting/#symptom-out-of-memory-oomkilled","title":"Symptom: Out of Memory (OOMKilled)","text":"<pre><code>[ERROR] Container killed: OOMKilled\n</code></pre> <p>Solutions:</p> <ol> <li>Reduce thread count:</li> </ol> <pre><code>GCR_THREAD_COUNT=2\n</code></pre> <ol> <li>Increase memory limits (Kubernetes):</li> </ol> <pre><code>resources:\n  limits:\n    memory: \"2Gi\"\n</code></pre> <ol> <li>Process fewer repositories:</li> </ol> <pre><code>GCR_FILTER_REPOS=repo1,repo2,repo3\n</code></pre>"},{"location":"usage/troubleshooting/#symptom-slow-processing","title":"Symptom: Slow Processing","text":"<pre><code>[INFO] Processing taking longer than expected\n</code></pre> <p>Solutions:</p> <ol> <li>Enable caching:</li> </ol> <pre><code>GCR_USE_CACHE=1\nGCR_CACHE_MAX_AGE=7\n</code></pre> <ol> <li>Increase thread count:</li> </ol> <pre><code>GCR_THREAD_COUNT=8\n</code></pre> <ol> <li>Check network latency:</li> </ol> <pre><code># Test GitHub API response time\ntime curl -I https://api.github.com\n</code></pre>"},{"location":"usage/troubleshooting/#docker-issues","title":"Docker Issues","text":""},{"location":"usage/troubleshooting/#symptom-image-pull-failed","title":"Symptom: Image Pull Failed","text":"<pre><code>Error response from daemon: pull access denied\n</code></pre> <p>Solution:</p> <p>Verify image name and tag:</p> <pre><code>docker pull ghcr.io/damacus/github-cookstyle-runner:latest\n</code></pre>"},{"location":"usage/troubleshooting/#symptom-volume-mount-permission-denied","title":"Symptom: Volume Mount Permission Denied","text":"<pre><code>[ERROR] Permission denied: /app/.cache/cache.json\n</code></pre> <p>Solution:</p> <p>Fix volume permissions:</p> <pre><code># Create cache directory with correct permissions\nmkdir -p /tmp/cookstyle-runner\nchmod 777 /tmp/cookstyle-runner\n</code></pre>"},{"location":"usage/troubleshooting/#kubernetes-issues","title":"Kubernetes Issues","text":""},{"location":"usage/troubleshooting/#symptom-cronjob-not-running","title":"Symptom: CronJob Not Running","text":"<pre><code>kubectl get cronjob cookstyle-runner\n# Shows but never creates jobs\n</code></pre> <p>Solutions:</p> <ol> <li>Check CronJob schedule:</li> </ol> <pre><code>kubectl describe cronjob cookstyle-runner\n</code></pre> <ol> <li>Manually trigger job:</li> </ol> <pre><code>kubectl create job --from=cronjob/cookstyle-runner test-run\n</code></pre> <ol> <li>Check events:</li> </ol> <pre><code>kubectl get events --sort-by='.lastTimestamp'\n</code></pre>"},{"location":"usage/troubleshooting/#symptom-pod-fails-to-start","title":"Symptom: Pod Fails to Start","text":"<pre><code>kubectl get pods\n# Shows CrashLoopBackOff or Error\n</code></pre> <p>Solutions:</p> <ol> <li>Check pod logs:</li> </ol> <pre><code>kubectl logs &lt;pod-name&gt;\n</code></pre> <ol> <li>Check pod events:</li> </ol> <pre><code>kubectl describe pod &lt;pod-name&gt;\n</code></pre> <ol> <li>Verify secrets and configmaps:</li> </ol> <pre><code>kubectl get secret cookstyle-runner-secrets\nkubectl get configmap cookstyle-runner-config\n</code></pre>"},{"location":"usage/troubleshooting/#getting-help","title":"Getting Help","text":"<p>If you're still experiencing issues:</p> <ol> <li>Enable debug logging:</li> </ol> <pre><code>GCR_DEBUG_MODE=1\n</code></pre> <ol> <li>Collect logs:</li> </ol> <pre><code># Docker Compose\ndocker-compose logs cookstyle-runner &gt; logs.txt\n\n# Kubernetes\nkubectl logs &lt;pod-name&gt; &gt; logs.txt\n</code></pre> <ol> <li>Open an issue:</li> <li>Go to GitHub Issues</li> <li>Include:<ul> <li>Error message</li> <li>Configuration (redact secrets!)</li> <li>Logs (redact sensitive data!)</li> <li>Environment (Docker/Kubernetes, versions)</li> </ul> </li> </ol>"},{"location":"usage/troubleshooting/#next-steps","title":"Next Steps","text":"<ul> <li>Basic usage guide</li> <li>Advanced usage patterns</li> <li>Configuration reference</li> </ul>"}]}
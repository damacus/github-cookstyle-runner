# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `cookstyle` gem.
# Please instead update this file by running `bin/tapioca gem cookstyle`.


# Cookstyle patches the RuboCop tool to set a new default configuration that
# is vendored in the Cookstyle codebase.
#
# source://cookstyle//lib/cookstyle/version.rb#2
module Cookstyle
  class << self
    # @return [String] the absolute path to the main RuboCop configuration YAML file
    #
    # source://cookstyle//lib/cookstyle.rb#22
    def config; end
  end
end

# source://cookstyle//lib/cookstyle/version.rb#4
Cookstyle::RUBOCOP_VERSION = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/cookstyle/version.rb#3
Cookstyle::VERSION = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/monkey_patches/directive_comment.rb#2
module RuboCop; end

# RuboCop Chef project namespace
#
# source://cookstyle//lib/rubocop/chef.rb#4
module RuboCop::Chef
  class << self
    # source://cookstyle//lib/rubocop/chef/cookbook_only.rb#66
    def CookbookOnly(segments); end
  end
end

# Helpers for use in autocorrection
#
# source://cookstyle//lib/rubocop/chef/autocorrect_helpers.rb#21
module RuboCop::Chef::AutocorrectHelpers
  # if the node has a heredoc as an argument you'll only get the start of the heredoc and removing
  # the node will result in broken ruby. This way we match the node and the entire heredoc for removal
  #
  # source://cookstyle//lib/rubocop/chef/autocorrect_helpers.rb#24
  def expression_including_heredocs(node); end
end

# source://cookstyle//lib/rubocop/chef.rb#7
RuboCop::Chef::CONFIG = T.let(T.unsafe(nil), Hash)

# source://cookstyle//lib/rubocop/chef.rb#6
RuboCop::Chef::CONFIG_DEFAULT = T.let(T.unsafe(nil), Pathname)

# Common node helpers used for matching against Chef Infra Cookbooks
#
# source://cookstyle//lib/rubocop/chef/cookbook_helpers.rb#21
module RuboCop::Chef::CookbookHelpers
  # Match particular properties within a resource
  #
  # @param resource_names [Symbol, Array<Symbol>] The name of the resources to match
  # @param property_names [String] The name of the property to match (or action)
  # @param node [RuboCop::AST::Node] The rubocop ast node to search
  # @return [Boolean]
  # @yield
  #
  # source://cookstyle//lib/rubocop/chef/cookbook_helpers.rb#49
  def match_property_in_resource?(resource_names, property_names, node); end

  # Match a particular resource
  #
  # @param resource_name [String] The name of the resource to match
  # @param node [RuboCop::AST::Node] The rubocop ast node to search
  # @return [Boolean]
  # @yield
  #
  # source://cookstyle//lib/rubocop/chef/cookbook_helpers.rb#35
  def match_resource_type?(resource_name, node); end

  # source://cookstyle//lib/rubocop/chef/cookbook_helpers.rb#70
  def method_arg_ast_to_string(ast); end

  # source://cookstyle//lib/rubocop/chef/cookbook_helpers.rb#22
  def resource_block_name_if_string(node); end

  private

  # source://cookstyle//lib/rubocop/chef/cookbook_helpers.rb#109
  def extract_send_types(node); end

  # given a node object does it look like a chef resource or not?
  # warning: currently this requires a resource with properties since we key off blocks and property-less resources look like methods
  #
  # @param node [RuboCop::AST::Node] AST object to test
  # @return [boolean]
  #
  # source://cookstyle//lib/rubocop/chef/cookbook_helpers.rb#95
  def looks_like_resource?(node); end

  # @param property [String, Array]
  # @return [Array]
  #
  # source://cookstyle//lib/rubocop/chef/cookbook_helpers.rb#83
  def symbolized_property_types(property); end
end

# Mixin for cops that skips non-cookbook files
#
# The criteria for whether cookstyle analyzes a certain ruby file
# is configured via `AllCops/Chef`. For example, if you want to
# customize your project to scan all files within a `test/` directory
# then you could add this to your configuration:
#
# @example configuring analyzed paths
#
#   AllCops:
#   Chef:
#   Patterns:
#   - '_spec.rb$'
#   - '(?:^|/)spec/'
#
# source://cookstyle//lib/rubocop/chef/cookbook_only.rb#20
module RuboCop::Chef::CookbookOnly
  extend ::RuboCop::Chef::CookbookOnly::ClassMethods

  mixes_in_class_methods ::RuboCop::Chef::CookbookOnly::ClassMethods

  # @return [Boolean]
  #
  # source://cookstyle//lib/rubocop/chef/cookbook_only.rb#24
  def relevant_file?(file); end

  private

  # source://cookstyle//lib/rubocop/chef/cookbook_only.rb#30
  def cookbook_pattern; end

  # source://cookstyle//lib/rubocop/chef/cookbook_only.rb#42
  def cookbook_pattern_config(segment); end
end

# source://cookstyle//lib/rubocop/chef/cookbook_only.rb#22
RuboCop::Chef::CookbookOnly::COOKBOOK_SEGMENTS = T.let(T.unsafe(nil), Array)

# source://cookstyle//lib/rubocop/chef/cookbook_only.rb#50
module RuboCop::Chef::CookbookOnly::ClassMethods
  # source://cookstyle//lib/rubocop/chef/cookbook_only.rb#53
  def cookbook_only_segments; end

  # Sets the attribute cookbook_only_segments
  #
  # @param value the value to set the attribute cookbook_only_segments to.
  #
  # source://cookstyle//lib/rubocop/chef/cookbook_only.rb#51
  def cookbook_only_segments=(_arg0); end

  # source://cookstyle//lib/rubocop/chef/cookbook_only.rb#57
  def included(klass); end
end

# source://cookstyle//lib/rubocop/chef/cookbook_only.rb#21
RuboCop::Chef::CookbookOnly::DEFAULT_CONFIGURATION = T.let(T.unsafe(nil), Hash)

# source://cookstyle//lib/rubocop/chef.rb#5
RuboCop::Chef::PROJECT_ROOT = T.let(T.unsafe(nil), Pathname)

# common helpers for Platforms in Chef Infra Cookbooks
#
# source://cookstyle//lib/rubocop/chef/platform_helpers.rb#21
module RuboCop::Chef::PlatformHelpers; end

# a mapping of invalid platforms values to valid platforms
#
# source://cookstyle//lib/rubocop/chef/platform_helpers.rb#44
RuboCop::Chef::PlatformHelpers::INVALID_PLATFORMS = T.let(T.unsafe(nil), Hash)

# a mapping of invalid platform family values to valid platform family
#
# source://cookstyle//lib/rubocop/chef/platform_helpers.rb#23
RuboCop::Chef::PlatformHelpers::INVALID_PLATFORM_FAMILIES = T.let(T.unsafe(nil), Hash)

# source://cookstyle//lib/rubocop/monkey_patches/config.rb#4
class RuboCop::Config
  # source://rubocop/1.75.5/lib/rubocop/config.rb#31
  def initialize(hash = T.unsafe(nil), loaded_path = T.unsafe(nil)); end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def [](*_arg0, **_arg1, &_arg2); end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def []=(*_arg0, **_arg1, &_arg2); end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#212
  def active_support_extensions_enabled?; end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#127
  def add_excludes_from_higher_level(highest_config); end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#239
  def allowed_camel_case_file?(file); end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#283
  def base_dir_for_path_parameters; end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#313
  def bundler_lock_file_path; end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#85
  def check; end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#180
  def clusivity_config_for_badge?(badge); end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#200
  def cop_enabled?(name); end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def delete(*_arg0, **_arg1, &_arg2); end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#139
  def deprecation_check; end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def dig(*_arg0, **_arg1, &_arg2); end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#204
  def disabled_new_cops?; end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def each(*_arg0, **_arg1, &_arg2); end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def each_key(*_arg0, **_arg1, &_arg2); end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#208
  def enabled_new_cops?; end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def fetch(*_arg0, **_arg1, &_arg2); end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#261
  def file_to_exclude?(file); end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#220
  def file_to_include?(file); end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#196
  def for_all_cops; end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#166
  def for_badge(badge); end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#153
  def for_cop(cop); end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#191
  def for_department(department_name); end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#160
  def for_enabled_cop(cop); end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#338
  def gem_versions_in_target; end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#342
  def inspect; end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#110
  def internal?; end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def key?(*_arg0, **_arg1, &_arg2); end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def keys(*_arg0, **_arg1, &_arg2); end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#81
  def loaded_features; end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#21
  def loaded_path; end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#77
  def loaded_plugins; end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#115
  def make_excludes_absolute; end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def map(*_arg0, **_arg1, &_arg2); end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def merge(*_arg0, **_arg1, &_arg2); end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#293
  def parser_engine; end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#274
  def path_relative_to_config(path); end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#270
  def patterns_to_exclude; end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#266
  def patterns_to_include; end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#324
  def pending_cops; end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#253
  def possibly_include_hidden?; end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def replace(*_arg0, **_arg1, &_arg2); end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#105
  def signature; end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#308
  def smart_loaded_path; end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#216
  def string_literals_frozen_by_default?; end

  # This is a copy of the #target_rails_version method from RuboCop
  #
  # source://cookstyle//lib/rubocop/monkey_patches/config.rb#6
  def target_chef_version; end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#297
  def target_rails_version; end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def target_ruby_version(*_arg0, **_arg1, &_arg2); end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def to_h(*_arg0, **_arg1, &_arg2); end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def to_hash(*_arg0, **_arg1, &_arg2); end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#101
  def to_s; end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def transform_values(*_arg0, **_arg1, &_arg2); end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def validate(*_arg0, **_arg1, &_arg2); end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#92
  def validate_after_resolution; end

  private

  # source://rubocop/1.75.5/lib/rubocop/config.rb#392
  def department_of(qualified_cop_name); end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#380
  def enable_cop?(qualified_cop_name, cop_options); end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#367
  def gem_version_to_major_minor_float(gem_version); end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#373
  def read_gem_versions_from_target_lockfile; end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#354
  def read_rails_version_from_bundler_lock_file; end

  # source://rubocop/1.75.5/lib/rubocop/config.rb#349
  def target_rails_version_from_bundler_lock_file; end

  class << self
    # source://rubocop/1.75.5/lib/rubocop/config.rb#23
    def create(hash, path, check: T.unsafe(nil)); end
  end
end

# source://cookstyle//lib/rubocop/monkey_patches/base.rb#3
module RuboCop::Cop; end

# source://cookstyle//lib/rubocop/monkey_patches/base.rb#4
class RuboCop::Cop::Base
  include ::RuboCop::PathUtil

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#156
  def initialize(config = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#278
  def active_support_extensions_enabled?; end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#189
  def add_global_offense(message = T.unsafe(nil), severity: T.unsafe(nil)); end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#201
  def add_offense(node_or_range, message: T.unsafe(nil), severity: T.unsafe(nil), &block); end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#357
  def always_autocorrect?; end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#343
  def begin_investigation(processed_source, offset: T.unsafe(nil), original: T.unsafe(nil)); end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#324
  def callbacks_needed; end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#43
  def config; end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#252
  def config_to_allow_offenses; end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#256
  def config_to_allow_offenses=(hash); end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#363
  def contextual_autocorrect?; end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#246
  def cop_config; end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#238
  def cop_name; end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#295
  def excluded_file?(file); end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#234
  def external_dependency_checksum; end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#367
  def inspect; end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#183
  def message(_range = T.unsafe(nil)); end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#238
  def name; end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#315
  def offenses; end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#170
  def on_investigation_end; end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#164
  def on_new_investigation; end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#176
  def on_other_file; end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#300
  def parse(source, path = T.unsafe(nil)); end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#270
  def parser_engine; end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#43
  def processed_source; end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#306
  def ready; end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#286
  def relevant_file?(file); end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#282
  def string_literals_frozen_by_default?; end

  # This is a copy of the #target_rails_version method from rubocop-rails
  #
  # source://cookstyle//lib/rubocop/monkey_patches/base.rb#6
  def target_chef_version; end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#266
  def target_gem_version(gem_name); end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#274
  def target_rails_version; end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#260
  def target_ruby_version; end

  private

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#485
  def annotate(message); end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#379
  def apply_correction(corrector); end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#449
  def attempt_correction(range, corrector); end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#375
  def callback_argument(range); end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#408
  def complete_investigation; end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#423
  def correct(range); end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#393
  def current_corrector; end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#385
  def current_offense_locations; end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#397
  def current_offenses; end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#389
  def currently_disabled_lines; end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#513
  def custom_severity; end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#509
  def default_severity; end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#463
  def disable_uncorrectable(range); end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#499
  def enabled_line?(line_number); end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#491
  def file_name_matches_any?(file, parameter, default_result); end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#481
  def find_message(range, message); end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#505
  def find_severity(_range, severity); end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#526
  def range_for_original(range); end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#470
  def range_from_node_or_range(node_or_range); end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#418
  def reset_investigation; end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#534
  def target_satisfies_all_gem_version_requirements?; end

  # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#438
  def use_corrector(range, corrector); end

  class << self
    # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#59
    def autocorrect_incompatible_with; end

    # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#93
    def badge; end

    # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#329
    def callbacks_needed; end

    # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#97
    def cop_name; end

    # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#101
    def department; end

    # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#70
    def documentation_url(config = T.unsafe(nil)); end

    # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#81
    def exclude_from_registry; end

    # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#138
    def gem_requirements; end

    # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#74
    def inherited(subclass); end

    # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#118
    def joining_forces; end

    # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#105
    def lint?; end

    # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#111
    def match?(given_names); end

    # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#151
    def requires_gem(gem_name, *version_requirements); end

    # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#87
    def support_autocorrect?; end

    # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#129
    def support_multiple_source?; end

    private

    # source://rubocop/1.75.5/lib/rubocop/cop/base.rb#401
    def restrict_on_send; end
  end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/block_guard_clause_string_only.rb#20
module RuboCop::Cop::Chef; end

# source://cookstyle//lib/rubocop/cop/chef/correctness/block_guard_clause_string_only.rb#21
module RuboCop::Cop::Chef::Correctness; end

# A resource guard (not_if/only_if) that is a string should not be wrapped in `{}`. Wrapping a guard string in {} causes it to be executed as Ruby code which will always return true instead of a shell command that will actually run.
#
# @example
#
#   ### incorrect
#   template '/etc/foo' do
#   mode '0644'
#   source 'foo.erb'
#   only_if { 'test -f /etc/foo' }
#   end
#
#   ### correct
#   template '/etc/foo' do
#   mode '0644'
#   source 'foo.erb'
#   only_if 'test -f /etc/foo'
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/block_guard_clause_string_only.rb#40
class RuboCop::Cop::Chef::Correctness::BlockGuardWithOnlyString < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/correctness/block_guard_clause_string_only.rb#45
  def block_guard_with_only_string?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/block_guard_clause_string_only.rb#49
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/block_guard_clause_string_only.rb#43
RuboCop::Cop::Chef::Correctness::BlockGuardWithOnlyString::MSG = T.let(T.unsafe(nil), String)

# Use `raise` to force Chef Infra Client to fail instead of using `Chef::Application.fatal`, which masks the full stack trace of the failure and makes debugging difficult.
#
# @example
#
#   ### incorrect
#   Chef::Application.fatal!('Something horrible happened!')
#
#   ### correct
#   raise "Something horrible happened!"
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/chef_application_fatal.rb#32
class RuboCop::Cop::Chef::Correctness::ChefApplicationFatal < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/correctness/chef_application_fatal.rb#38
  def application_fatal?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/chef_application_fatal.rb#45
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/chef_application_fatal.rb#35
RuboCop::Cop::Chef::Correctness::ChefApplicationFatal::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/correctness/chef_application_fatal.rb#36
RuboCop::Cop::Chef::Correctness::ChefApplicationFatal::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Don't use Ruby to shellout in a `only_if` / `not_if` conditional. Any string value used in an `only_if` / `not_if` is executed in your system's shell and the return code of the command is the result for the `not_if` / `only_if` determination.
#
# @example
#
#   ### incorrect
#   cookbook_file '/logs/foo/error.log' do
#   source 'error.log'
#   only_if { system('wget https://www.bar.com/foobar.txt -O /dev/null') }
#   end
#
#   cookbook_file '/logs/foo/error.log' do
#   source 'error.log'
#   only_if { shell_out('wget https://www.bar.com/foobar.txt -O /dev/null').exitstatus == 0 }
#   end
#
#   ### correct
#   cookbook_file '/logs/foo/error.log' do
#   source 'error.log'
#   only_if 'wget https://www.bar.com/foobar.txt -O /dev/null'
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/conditional_ruby_shellout.rb#43
class RuboCop::Cop::Chef::Correctness::ConditionalRubyShellout < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/correctness/conditional_ruby_shellout.rb#49
  def conditional_shellout?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/conditional_ruby_shellout.rb#58
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/conditional_ruby_shellout.rb#47
RuboCop::Cop::Chef::Correctness::ConditionalRubyShellout::MSG = T.let(T.unsafe(nil), String)

# Don't use node.save to save partial node data to the Chef Infra Server mid-run unless it's a requirement of cookbook design that can't be avoided. Node.save can result in failed Chef Infra runs appearing in search and increases load on the Chef Infra Server."
#
# @example
#
#   ### incorrect
#   node.save
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/node_save.rb#29
class RuboCop::Cop::Chef::Correctness::CookbookUsesNodeSave < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/correctness/node_save.rb#33
  def node_save?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/node_save.rb#37
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/node_save.rb#30
RuboCop::Cop::Chef::Correctness::CookbookUsesNodeSave::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/correctness/node_save.rb#31
RuboCop::Cop::Chef::Correctness::CookbookUsesNodeSave::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The `dnf_package` resource does not support the `allow_downgrades` property.
#
# @example
#
#   ### incorrect
#   dnf_package 'nginx' do
#   version '1.2.3'
#   allow_downgrades true
#   end
#
#   ### correct
#   dnf_package 'nginx' do
#   version '1.2.3'
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/dnf_package_allow_downgrades.rb#37
class RuboCop::Cop::Chef::Correctness::DnfPackageAllowDowngrades < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/correctness/dnf_package_allow_downgrades.rb#44
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/dnf_package_allow_downgrades.rb#42
RuboCop::Cop::Chef::Correctness::DnfPackageAllowDowngrades::MSG = T.let(T.unsafe(nil), String)

# Libraries should be injected into the `Chef::DSL::Recipe` class and not `Chef::Recipe` or `Chef::Provider` classes directly.
#
# @example
#
#   ### incorrect
#   ::Chef::Recipe.send(:include, Filebeat::Helpers)
#   ::Chef::Provider.send(:include, Filebeat::Helpers)
#   ::Chef::Recipe.include Filebeat::Helpers
#   ::Chef::Provider.include Filebeat::Helpers
#
#   ### correct
#   ::Chef::DSL::Recipe.send(:include, Filebeat::Helpers) # covers previous Recipe & Provider classes
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/incorrect_library_injection.rb#35
class RuboCop::Cop::Chef::Correctness::IncorrectLibraryInjection < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/correctness/incorrect_library_injection.rb#42
  def correct_injection?(param0); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/incorrect_library_injection.rb#56
  def legacy_injection?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/incorrect_library_injection.rb#61
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/incorrect_library_injection.rb#39
RuboCop::Cop::Chef::Correctness::IncorrectLibraryInjection::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/correctness/incorrect_library_injection.rb#40
RuboCop::Cop::Chef::Correctness::IncorrectLibraryInjection::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Cookbook names should not contain invalid characters such as periods.
#
# @example
#
#   ### incorrect
#   name 'foo.bar'
#
#   ### correct
#   name 'foo_bar'
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_cookbook_name.rb#32
class RuboCop::Cop::Chef::Correctness::InvalidCookbookName < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_cookbook_name.rb#36
  def has_name?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_cookbook_name.rb#38
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_cookbook_name.rb#34
RuboCop::Cop::Chef::Correctness::InvalidCookbookName::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_cookbook_name.rb#33
RuboCop::Cop::Chef::Correctness::InvalidCookbookName::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Default actions in resources should be symbols or an array of symbols.
#
# @example
#
#   ### incorrect
#   default_action 'create'
#
#   ### correct
#   default_action :create
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_default_action.rb#32
class RuboCop::Cop::Chef::Correctness::InvalidDefaultAction < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_default_action.rb#36
  def default_action?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_default_action.rb#38
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_default_action.rb#33
RuboCop::Cop::Chef::Correctness::InvalidDefaultAction::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_default_action.rb#34
RuboCop::Cop::Chef::Correctness::InvalidDefaultAction::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The resource to notify when calling `notifies` or `subscribes` must be a string.
#
# @example
#
#   ### incorrect
#
#   template '/etc/www/configures-apache.conf' do
#   notifies :restart, service['apache'], :immediately
#   end
#
#   template '/etc/www/configures-apache.conf' do
#   notifies :restart, service[apache], :immediately
#   end
#
#   ### correct
#
#   template '/etc/www/configures-apache.conf' do
#   notifies :restart, 'service[apache]', :immediately
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_notification_resource.rb#42
class RuboCop::Cop::Chef::Correctness::InvalidNotificationResource < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_notification_resource.rb#46
  def invalid_notification?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_notification_resource.rb#50
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_notification_resource.rb#43
RuboCop::Cop::Chef::Correctness::InvalidNotificationResource::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_notification_resource.rb#44
RuboCop::Cop::Chef::Correctness::InvalidNotificationResource::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Valid notification timings are `:immediately`, `:immediate` (alias for :immediately), `:delayed`, and `:before`.
#
# @example
#
#   ### incorrect
#
#   template '/etc/www/configures-apache.conf' do
#   notifies :restart, 'service[apache]', :nope
#   end
#
#   ### correct
#
#   template '/etc/www/configures-apache.conf' do
#   notifies :restart, 'service[apache]', :immediately
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_notification_timing.rb#38
class RuboCop::Cop::Chef::Correctness::InvalidNotificationTiming < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_notification_timing.rb#42
  def notification_with_timing?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_notification_timing.rb#46
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_notification_timing.rb#39
RuboCop::Cop::Chef::Correctness::InvalidNotificationTiming::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_notification_timing.rb#40
RuboCop::Cop::Chef::Correctness::InvalidNotificationTiming::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Pass valid platform families to the `platform_family?` helper. See [Infra Language: Platform Family](https://docs.chef.io/infra_language/checking_platforms/#platform_family-values) for a complete list of platform families.
#
# @example
#
#   ### incorrect
#   platform_family?('redhat')
#   platform_family?('sles')
#
#   ### incorrect
#   platform_family?('rhel')
#   platform_family?('suse')
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_platform_family_helper.rb#34
class RuboCop::Cop::Chef::Correctness::InvalidPlatformFamilyHelper < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::PlatformHelpers
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_platform_family_helper.rb#46
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_platform_family_helper.rb#42
  def platform_family_helper?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_platform_family_helper.rb#39
RuboCop::Cop::Chef::Correctness::InvalidPlatformFamilyHelper::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_platform_family_helper.rb#40
RuboCop::Cop::Chef::Correctness::InvalidPlatformFamilyHelper::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Use valid platform family values in case statements. See [Infra Language: Platform Family](https://docs.chef.io/infra_language/checking_platforms/#platform_family-values) for a complete list of platform families.
#
# @example
#
#   ### incorrect
#   case node['platform_family']
#   when 'redhat'
#   puts "I'm on a RHEL-like system"
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_platform_family_values_in_case.rb#32
class RuboCop::Cop::Chef::Correctness::InvalidPlatformFamilyInCase < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  include ::RuboCop::Chef::PlatformHelpers
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_platform_family_values_in_case.rb#39
  def node_platform_family?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_platform_family_values_in_case.rb#43
  def on_case(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_platform_family_values_in_case.rb#37
RuboCop::Cop::Chef::Correctness::InvalidPlatformFamilyInCase::MSG = T.let(T.unsafe(nil), String)

# Pass valid platforms to the `platform?` helper. See [Infra Language: Platform](https://docs.chef.io/infra_language/checking_platforms/#platform-values) for a list of many common platform values.
#
# @example
#
#   ### incorrect
#   platform?('darwin')
#   platform?('rhel')
#   platform?('sles')
#
#   ### correct
#   platform?('mac_os_x')
#   platform?('redhat')
#   platform?('suse')
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_platform_helper.rb#36
class RuboCop::Cop::Chef::Correctness::InvalidPlatformHelper < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::PlatformHelpers

  # source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_platform_helper.rb#46
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_platform_helper.rb#42
  def platform_helper?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_platform_helper.rb#39
RuboCop::Cop::Chef::Correctness::InvalidPlatformHelper::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_platform_helper.rb#40
RuboCop::Cop::Chef::Correctness::InvalidPlatformHelper::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Use valid platform values in case statements. See [Infra Language: Platform](https://docs.chef.io/infra_language/checking_platforms/#platform-values) for a list of many common platform values.
#
# @example
#
#   ### incorrect
#   case node['platform']
#   when 'rhel'
#   puts "I'm on a Red Hat system!"
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_platform_values_in_case.rb#32
class RuboCop::Cop::Chef::Correctness::InvalidPlatformInCase < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  include ::RuboCop::Chef::PlatformHelpers
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_platform_values_in_case.rb#40
  def node_platform?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_platform_values_in_case.rb#44
  def on_case(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_platform_values_in_case.rb#37
RuboCop::Cop::Chef::Correctness::InvalidPlatformInCase::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_platform_values_in_case.rb#38
RuboCop::Cop::Chef::Correctness::InvalidPlatformInCase::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# metadata.rb `supports` methods should contain valid platforms. See [Infra Language: Platform](https://docs.chef.io/infra_language/checking_platforms/#platform-values) for a list of many common platform values.
#
# @example
#
#   ### incorrect
#   supports 'darwin'
#   supports 'mswin'
#
#   ### correct
#   supports 'mac_os_x'
#   supports 'windows'
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_platform_metadata.rb#34
class RuboCop::Cop::Chef::Correctness::InvalidPlatformMetadata < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::PlatformHelpers
  extend ::RuboCop::Cop::AutoCorrector

  # private
  #
  # source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_platform_metadata.rb#78
  def corrected_platform_source(node); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_platform_metadata.rb#63
  def on_block(node); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_platform_metadata.rb#52
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_platform_metadata.rb#41
  def supports?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_platform_metadata.rb#43
  def supports_array?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_platform_metadata.rb#38
RuboCop::Cop::Chef::Correctness::InvalidPlatformMetadata::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_platform_metadata.rb#39
RuboCop::Cop::Chef::Correctness::InvalidPlatformMetadata::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Pass valid platform families to the value_for_platform_family helper. See [Infra Language: Platform Family](https://docs.chef.io/infra_language/checking_platforms/#platform_family-values) for a complete list of platform families.
#
# @example
#
#   ### incorrect
#   value_for_platform_family(
#   %w(rhel sles) => 'foo',
#   %w(mac) => 'foo'
#   )
#
#   ### correct
#   value_for_platform_family(
#   %w(rhel suse) => 'foo',
#   %w(mac_os_x) => 'foo'
#   )
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_value_for_platform_family_helper.rb#38
class RuboCop::Cop::Chef::Correctness::InvalidPlatformValueForPlatformFamilyHelper < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::PlatformHelpers

  # source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_value_for_platform_family_helper.rb#52
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_value_for_platform_family_helper.rb#44
  def value_for_platform_family?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_value_for_platform_family_helper.rb#41
RuboCop::Cop::Chef::Correctness::InvalidPlatformValueForPlatformFamilyHelper::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_value_for_platform_family_helper.rb#42
RuboCop::Cop::Chef::Correctness::InvalidPlatformValueForPlatformFamilyHelper::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Pass valid platforms to the value_for_platform helper. See [Infra Language: Platform](https://docs.chef.io/infra_language/checking_platforms/#platform-values) for a list of many common platform values.
#
# @example
#
#   ### incorrect
#   value_for_platform(
#   %w(rhel mac_os_x_server) => { 'default' => 'foo' },
#   %w(sles) => { 'default' => 'bar' }
#   )
#   ### correct
#   value_for_platform(
#   %w(redhat mac_os_x) => { 'default' => 'foo' },
#   %w(opensuseleap) => { 'default' => 'bar' }
#   )
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_value_for_platform_helper.rb#37
class RuboCop::Cop::Chef::Correctness::InvalidPlatformValueForPlatformHelper < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::PlatformHelpers

  # source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_value_for_platform_helper.rb#51
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_value_for_platform_helper.rb#43
  def value_for_platform?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_value_for_platform_helper.rb#40
RuboCop::Cop::Chef::Correctness::InvalidPlatformValueForPlatformHelper::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_value_for_platform_helper.rb#41
RuboCop::Cop::Chef::Correctness::InvalidPlatformValueForPlatformHelper::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Cookbook metadata.rb version field should follow X.Y.Z version format.
#
# @example
#
#   ### incorrect
#   version '1.2.3.4'
#
#   ### correct
#   version '1.2.3'
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_version_metadata.rb#32
class RuboCop::Cop::Chef::Correctness::InvalidVersionMetadata < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_version_metadata.rb#38
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_version_metadata.rb#36
  def version?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_version_metadata.rb#33
RuboCop::Cop::Chef::Correctness::InvalidVersionMetadata::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/correctness/invalid_version_metadata.rb#34
RuboCop::Cop::Chef::Correctness::InvalidVersionMetadata::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# When setting a node attribute as the default value for a custom resource property, wrap the node attribute in `lazy {}` so that its value is available when the resource executes.
#
# @example
#
#   ### incorrect
#   property :Something, String, default: node['hostname']
#
#   ### correct
#   property :Something, String, default: lazy { node['hostname'] }
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/lazy_eval_node_attribute_defaults.rb#32
class RuboCop::Cop::Chef::Correctness::LazyEvalNodeAttributeDefaults < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/correctness/lazy_eval_node_attribute_defaults.rb#38
  def non_lazy_node_attribute_default?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/lazy_eval_node_attribute_defaults.rb#42
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/lazy_eval_node_attribute_defaults.rb#36
RuboCop::Cop::Chef::Correctness::LazyEvalNodeAttributeDefaults::MSG = T.let(T.unsafe(nil), String)

# Using `lazy {}` within a resource guard (not_if/only_if) will cause failures and is unnecessary as resource guards are always lazily evaluated.
#
# @example
#
#   ### incorrect
#   template '/etc/foo' do
#   mode '0644'
#   source 'foo.erb'
#   only_if { lazy { ::File.exist?('/etc/foo')} }
#   end
#
#   ### correct
#   template '/etc/foo' do
#   mode '0644'
#   source 'foo.erb'
#   only_if { ::File.exist?('/etc/foo') }
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/lazy_in_resource_guard.rb#40
class RuboCop::Cop::Chef::Correctness::LazyInResourceGuard < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/correctness/lazy_in_resource_guard.rb#45
  def lazy_in_guard?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/lazy_in_resource_guard.rb#56
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/lazy_in_resource_guard.rb#43
RuboCop::Cop::Chef::Correctness::LazyInResourceGuard::MSG = T.let(T.unsafe(nil), String)

# The macos_userdefaults resource prior to Chef Infra Client 16.3 would silently continue if invalid types were passed resulting in unexpected behavior. Valid values are: "array", "bool", "dict", "float", "int", and "string".
#
# @example
#
#   ### incorrect
#   macos_userdefaults 'set a value' do
#   global true
#   key 'key'
#   type 'boolean'
#   end
#
#   ### correct
#   macos_userdefaults 'set a value' do
#   global true
#   key 'key'
#   type 'bool'
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/macos_userdefaults_invalid_type.rb#40
class RuboCop::Cop::Chef::Correctness::MacosUserdefaultsInvalidType < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/correctness/macos_userdefaults_invalid_type.rb#53
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/macos_userdefaults_invalid_type.rb#45
RuboCop::Cop::Chef::Correctness::MacosUserdefaultsInvalidType::INVALID_VALUE_MAP = T.let(T.unsafe(nil), Hash)

# source://cookstyle//lib/rubocop/cop/chef/correctness/macos_userdefaults_invalid_type.rb#51
RuboCop::Cop::Chef::Correctness::MacosUserdefaultsInvalidType::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/correctness/macos_userdefaults_invalid_type.rb#44
RuboCop::Cop::Chef::Correctness::MacosUserdefaultsInvalidType::VALID_VALUES = T.let(T.unsafe(nil), Array)

# When using the value_for_platform helper you must include a hash of possible platforms where each platform contains a hash of versions and potential values. If you don't wish to match on a particular version you can instead use the key 'default'.
#
# @example
#
#   ### incorrect
#   value_for_platform(
#   %w(redhat oracle) => 'baz'
#   )
#
#   ### correct
#   value_for_platform(
#   %w(redhat oracle) => {
#   '5' => 'foo',
#   '6' => 'bar',
#   'default'd => 'baz',
#   }
#   )
#
#   value_for_platform(
#   %w(redhat oracle) => {
#   'default' => 'foo',
#   },
#   'default' => 'bar'
#   )
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/malformed_value_for_platform.rb#47
class RuboCop::Cop::Chef::Correctness::MalformedPlatformValueForPlatformHelper < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/correctness/malformed_value_for_platform.rb#50
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/malformed_value_for_platform.rb#48
RuboCop::Cop::Chef::Correctness::MalformedPlatformValueForPlatformHelper::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# metadata.rb cookbook dependencies and version constraints should be comma separated.
#
# @example
#
#   ### incorrect
#   depends 'some_awesome_cookbook' '= 4.5.5'
#   depends 'some_other_cool_cookbook' '< 8.0'
#
#   ### correct
#   depends 'some_awesome_cookbook', '= 4.5.5'
#   depends 'some_other_cool_cookbook', '< 8.0'
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/metadata_malformed_version.rb#34
class RuboCop::Cop::Chef::Correctness::MetadataMalformedDepends < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/correctness/metadata_malformed_version.rb#40
  def depends_without_comma?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/metadata_malformed_version.rb#47
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/metadata_malformed_version.rb#38
RuboCop::Cop::Chef::Correctness::MetadataMalformedDepends::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/correctness/metadata_malformed_version.rb#37
RuboCop::Cop::Chef::Correctness::MetadataMalformedDepends::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# metadata.rb needs to include the name method or it will fail on Chef Infra Client 12 and later.
#
# @example
#
#   ### correct
#   name 'foo'
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/metadata_missing_name.rb#29
class RuboCop::Cop::Chef::Correctness::MetadataMissingName < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/correctness/metadata_missing_name.rb#35
  def cb_name?(param0); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/metadata_missing_name.rb#37
  def on_new_investigation; end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/metadata_missing_name.rb#33
RuboCop::Cop::Chef::Correctness::MetadataMissingName::MSG = T.let(T.unsafe(nil), String)

# metadata.rb should define a version for the cookbook.
#
# @example
#
#   ### correct
#   name 'foo'
#   version '1.0.0'
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/metadata_missing_version.rb#30
class RuboCop::Cop::Chef::Correctness::MetadataMissingVersion < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/correctness/metadata_missing_version.rb#36
  def cb_version?(param0); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/metadata_missing_version.rb#38
  def on_new_investigation; end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/metadata_missing_version.rb#34
RuboCop::Cop::Chef::Correctness::MetadataMissingVersion::MSG = T.let(T.unsafe(nil), String)

# Normal attributes are discouraged since their semantics differ importantly from the default and override levels. Their values persist in the node object even after all code referencing them has been deleted, unlike default and override.
#
# Code should be updated to use default or override levels, but this will change attribute merging behavior so needs to be validated manually and force_default or force_override levels may need to be used in recipe code.
#
# @example
#
#   ### incorrect
#   node.normal['foo'] = true
#
#   ### correct
#   node.default['foo'] = true
#   node.override['foo'] = true
#   node.force_default['foo'] = true
#   node.force_override['foo'] = true
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/node_normal.rb#36
class RuboCop::Cop::Chef::Correctness::NodeNormal < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/correctness/node_normal.rb#40
  def node_normal?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/node_normal.rb#44
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/node_normal.rb#37
RuboCop::Cop::Chef::Correctness::NodeNormal::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/correctness/node_normal.rb#38
RuboCop::Cop::Chef::Correctness::NodeNormal::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Normal attributes are discouraged since their semantics differ importantly from the default and override levels. Their values persist in the node object even after all code referencing them has been deleted, unlike default and override.
#
# Code should be updated to use default or override levels, but this will change attribute merging behavior so needs to be validated manually and force_default or force_override levels may need to be used in recipe code.
#
# @example
#
#   ### incorrect
#   node.normal_unless['foo'] = true
#
#   ### correct
#   node.default_unless['foo'] = true
#   node.override_unless['foo'] = true
#   node.force_default_unless['foo'] = true
#   node.force_override_unless['foo'] = true
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/node_normal_unless.rb#36
class RuboCop::Cop::Chef::Correctness::NodeNormalUnless < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/correctness/node_normal_unless.rb#40
  def node_normal_unless?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/node_normal_unless.rb#44
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/node_normal_unless.rb#37
RuboCop::Cop::Chef::Correctness::NodeNormalUnless::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/correctness/node_normal_unless.rb#38
RuboCop::Cop::Chef::Correctness::NodeNormalUnless::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# When notifying or subscribing actions within a resource the action should always be a symbol. In Chef Infra Client releases before 14.0, this may result in double notification.
#
# @example
#
#   ### incorrect
#   execute 'some command' do
#   notifies 'restart', 'service[httpd]', 'delayed'
#   end
#
#   execute 'some command' do
#   subscribes 'restart', 'service[httpd]', 'delayed'
#   end
#
#   ### correct
#   execute 'some command' do
#   notifies :restart, 'service[httpd]', 'delayed'
#   end
#
#   execute 'some command' do
#   subscribes :restart, 'service[httpd]', 'delayed'
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/notifies_action_not_symbol.rb#44
class RuboCop::Cop::Chef::Correctness::NotifiesActionNotSymbol < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/correctness/notifies_action_not_symbol.rb#50
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/notifies_action_not_symbol.rb#48
RuboCop::Cop::Chef::Correctness::NotifiesActionNotSymbol::MSG = T.let(T.unsafe(nil), String)

# Don't represent file modes as Strings containing octal values.
#
# @example
#
#   ### incorrect
#   file '/etc/some_file' do
#   mode '0o755'
#   end
#
#   ### correct
#   file '/etc/some_file' do
#   mode '0755'
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/octal_mode_as_string.rb#36
class RuboCop::Cop::Chef::Correctness::OctalModeAsString < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/correctness/octal_mode_as_string.rb#40
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/octal_mode_as_string.rb#37
RuboCop::Cop::Chef::Correctness::OctalModeAsString::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/correctness/octal_mode_as_string.rb#38
RuboCop::Cop::Chef::Correctness::OctalModeAsString::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The OpenSSL cookbook provides a deprecated `secure_password` helper in the `Opscode::OpenSSL::Password` class, which should no longer be used. This helper would generate a random password that would be used when a data bag or attribute was no present. The practice of generating passwords to be stored on the node is bad security as it exposes the password to anyone that can view the nodes, and deleting a node deletes the password. Passwords should be retrieved from a secure source for use in cookbooks.
#
#   ### incorrect
#   ::Chef::Recipe.send(:include, Opscode::OpenSSL::Password)
#   basic_auth_password = secure_password
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/openssl_password_helpers.rb#28
class RuboCop::Cop::Chef::Correctness::OpenSSLPasswordHelpers < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/correctness/openssl_password_helpers.rb#37
  def on_const(node); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/openssl_password_helpers.rb#31
  def openssl_helper?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/openssl_password_helpers.rb#29
RuboCop::Cop::Chef::Correctness::OpenSSLPasswordHelpers::MSG = T.let(T.unsafe(nil), String)

# Use Ruby's built-in `File.exist?('C:\somefile')` method instead of executing PowerShell's `Test-Path` cmdlet, which takes longer to load.
#
# @example
#
#   ### incorrect
#   powershell_out('Test-Path "C:\\Program Files\\LAPS\\CSE\\AdmPwd.dll"').stdout.strip == 'True'
#
#   ### correct
#   ::File.exist?('C:\Program Files\LAPS\CSE\AdmPwd.dll')
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/powershell_file_exists.rb#32
class RuboCop::Cop::Chef::Correctness::PowershellFileExists < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/correctness/powershell_file_exists.rb#40
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/powershell_file_exists.rb#36
  def powershell_out_exists?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/powershell_file_exists.rb#34
RuboCop::Cop::Chef::Correctness::PowershellFileExists::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/correctness/powershell_file_exists.rb#33
RuboCop::Cop::Chef::Correctness::PowershellFileExists::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Use the `file` or `directory` resources built into Chef Infra Client with the :delete action to remove files/directories instead of using Remove-Item in a powershell_script resource
#
#  ### correct
#  file 'C:\Windows\foo\bar.txt' do
#    action :delete
#  end
#
# @example
#
#   ### incorrect
#   powershell_script 'Cleanup old files' do
#   code 'Remove-Item C:\Windows\foo\bar.txt'
#   only_if { ::File.exist?('C:\\Windows\\foo\\bar.txt') }
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/powershell_delete_file.rb#37
class RuboCop::Cop::Chef::Correctness::PowershellScriptDeleteFile < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers

  # source://cookstyle//lib/rubocop/cop/chef/correctness/powershell_delete_file.rb#42
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/powershell_delete_file.rb#40
RuboCop::Cop::Chef::Correctness::PowershellScriptDeleteFile::MSG = T.let(T.unsafe(nil), String)

# Resource properties or attributes should always define a type to help users understand the correct allowed values.
#
# @example
#
#   ### incorrect
#   property :size, regex: /^\d+[KMGTP]$/
#   attribute :size, regex: /^\d+[KMGTP]$/
#
#   ### correct
#   property :size, String, regex: /^\d+[KMGTP]$/
#   attribute :size, kind_of: String, regex: /^\d+[KMGTP]$/
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/property_without_type.rb#34
class RuboCop::Cop::Chef::Correctness::PropertyWithoutType < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/correctness/property_without_type.rb#48
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/property_without_type.rb#38
  def property_without_type?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/property_without_type.rb#35
RuboCop::Cop::Chef::Correctness::PropertyWithoutType::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/correctness/property_without_type.rb#36
RuboCop::Cop::Chef::Correctness::PropertyWithoutType::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Chef Infra Client uses properties in several resources to track state. These should not be set in recipes as they break the internal workings of the Chef Infra Client
#
# @example
#
#   ### incorrect
#   service 'foo' do
#   running true
#   action [:start, :enable]
#   end
#
#   ### correct
#   service 'foo' do
#   action [:start, :enable]
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/resource_sets_internal_properties.rb#37
class RuboCop::Cop::Chef::Correctness::ResourceSetsInternalProperties < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers

  # source://cookstyle//lib/rubocop/cop/chef/correctness/resource_sets_internal_properties.rb#42
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/resource_sets_internal_properties.rb#40
RuboCop::Cop::Chef::Correctness::ResourceSetsInternalProperties::MSG = T.let(T.unsafe(nil), String)

# Use name properties instead of setting the name property in a resource. Setting the name property directly causes notification and reporting issues.
#
# @example
#
#   ### incorrect
#   service 'foo' do
#   name 'bar'
#   end
#
#   ### correct
#   service 'foo' do
#   service_name 'bar'
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/resource_sets_name_property.rb#36
class RuboCop::Cop::Chef::Correctness::ResourceSetsNameProperty < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers

  # source://cookstyle//lib/rubocop/cop/chef/correctness/resource_sets_name_property.rb#41
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/resource_sets_name_property.rb#39
RuboCop::Cop::Chef::Correctness::ResourceSetsNameProperty::MSG = T.let(T.unsafe(nil), String)

# The :nothing action is often typo'd as :none
#
# @example
#
#   ### incorrect
#   service 'foo' do
#   action :none
#   end
#
#   ### correct
#   service 'foo' do
#   action :nothing
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/resource_with_none_action.rb#36
class RuboCop::Cop::Chef::Correctness::ResourceWithNoneAction < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/correctness/resource_with_none_action.rb#42
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/resource_with_none_action.rb#40
RuboCop::Cop::Chef::Correctness::ResourceWithNoneAction::MSG = T.let(T.unsafe(nil), String)

# Scope file exist to access the correct `File` class by using `::File.exist?` not `File.exist?`.
#
# @example
#
#   ### incorrect
#   not_if { File.exist?('/etc/foo/bar') }
#
#   ### correct
#   not_if { ::File.exist?('/etc/foo/bar') }
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/scoped_file_exist.rb#32
class RuboCop::Cop::Chef::Correctness::ScopedFileExist < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/correctness/scoped_file_exist.rb#41
  def on_block(node); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/scoped_file_exist.rb#37
  def unscoped_file_exist?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/scoped_file_exist.rb#35
RuboCop::Cop::Chef::Correctness::ScopedFileExist::MSG = T.let(T.unsafe(nil), String)

# Use a service resource to start and stop services
#
# @example when command starts a service
#
#   ### incorrect
#   command "/etc/init.d/mysql start"
#   command "/sbin/service/memcached start"
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/service_resource.rb#29
class RuboCop::Cop::Chef::Correctness::ServiceResource < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/correctness/service_resource.rb#33
  def execute_command?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/service_resource.rb#37
  def on_send(node); end

  # @return [Boolean]
  #
  # source://cookstyle//lib/rubocop/cop/chef/correctness/service_resource.rb#45
  def starts_service?(cmd); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/service_resource.rb#30
RuboCop::Cop::Chef::Correctness::ServiceResource::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/correctness/service_resource.rb#31
RuboCop::Cop::Chef::Correctness::ServiceResource::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Versions used in metadata.rb supports calls should be floats not integers.
#
# @example
#
#   ### incorrect
#   supports 'redhat', '> 8'
#
#   ### correct
#   supports 'redhat', '> 8.0'
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/supports_must_be_float.rb#32
class RuboCop::Cop::Chef::Correctness::SupportsMustBeFloat < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/correctness/supports_must_be_float.rb#40
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/supports_must_be_float.rb#38
  def supports_with_constraint?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/supports_must_be_float.rb#35
RuboCop::Cop::Chef::Correctness::SupportsMustBeFloat::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/correctness/supports_must_be_float.rb#36
RuboCop::Cop::Chef::Correctness::SupportsMustBeFloat::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Use file_cache_path rather than hard-coding system temp paths
#
# @example downloading a large file into /tmp/
#
#   ### incorrect
#   remote_file '/tmp/large-file.tar.gz' do
#
#   ### correct
#   remote_file "#{Chef::Config[:file_cache_path]}/large-file.tar.gz" do
#
# source://cookstyle//lib/rubocop/cop/chef/correctness/tmp_path.rb#31
class RuboCop::Cop::Chef::Correctness::TmpPath < ::RuboCop::Cop::Base
  # @return [Boolean]
  #
  # source://cookstyle//lib/rubocop/cop/chef/correctness/tmp_path.rb#51
  def file_cache_path?(path); end

  # @return [Boolean]
  #
  # source://cookstyle//lib/rubocop/cop/chef/correctness/tmp_path.rb#46
  def hardcoded_tmp?(path); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/tmp_path.rb#39
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/correctness/tmp_path.rb#35
  def remote_file?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/correctness/tmp_path.rb#32
RuboCop::Cop::Chef::Correctness::TmpPath::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/correctness/tmp_path.rb#33
RuboCop::Cop::Chef::Correctness::TmpPath::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/cb_depends_on_self.rb#21
module RuboCop::Cop::Chef::Deprecations; end

# Chef Workstation 0.8 and later renamed the `ChefDK` module used when writing custom cookbook generators from `ChefDK` to `ChefCLI`. For compatibility with the latest Chef Workstation releases you'll need to reference the new class names.
#
# @example
#
#   ### incorrect
#   ChefDK::CLI
#   ChefDK::Generator::TemplateHelper
#   module ChefDK
#   # some additional code
#   end
#
#   ### correct
#   ChefCLI::CLI
#   ChefCLI::Generator::TemplateHelper
#   module ChefCLI
#   # some additional code
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/chefdk_generators.rb#40
class RuboCop::Cop::Chef::Deprecations::ChefDKGenerators < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/chefdk_generators.rb#44
  def on_const(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/chefdk_generators.rb#42
RuboCop::Cop::Chef::Deprecations::ChefDKGenerators::MSG = T.let(T.unsafe(nil), String)

# There is no need to include the empty and deprecated chef_handler::default recipe to use the chef_handler resource
#
# @example
#
#   ### incorrect
#   include_recipe 'chef_handler'
#   include_recipe 'chef_handler::default'
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_handler_recipe.rb#30
class RuboCop::Cop::Chef::Deprecations::ChefHandlerRecipe < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_handler_recipe.rb#37
  def chef_handler_recipe?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_handler_recipe.rb#41
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_handler_recipe.rb#34
RuboCop::Cop::Chef::Deprecations::ChefHandlerRecipe::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_handler_recipe.rb#35
RuboCop::Cop::Chef::Deprecations::ChefHandlerRecipe::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Use the type `property` instead of the deprecated `supports` property in the `chef_handler` resource. The `supports` property was removed in `chef_handler` cookbook version 3.0 (June 2017) and Chef Infra Client 14.0.
#
# @example
#
#   ### incorrect
#   chef_handler 'whatever' do
#   supports start: true, report: true, exception: true
#   end0
#
#   ### correct
#   chef_handler 'whatever' do
#   type start: true, report: true, exception: true
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_handler_supports.rb#36
class RuboCop::Cop::Chef::Deprecations::ChefHandlerUsesSupports < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_handler_supports.rb#42
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_handler_supports.rb#40
RuboCop::Cop::Chef::Deprecations::ChefHandlerUsesSupports::MSG = T.let(T.unsafe(nil), String)

# Use `delete_resource` or `edit_resource` helpers introduced in Chef Infra Client 12.10 instead of functionality in the deprecated `chef-rewind` gem
#
# @example
#
#   chef_gem 'chef-rewind'
#
#   require 'chef/rewind'
#
#   rewind "user[postgres]" do
#   home '/var/lib/pgsql/9.2'
#   cookbook 'my-postgresql'
#   end
#
#   unwind "user[postgres]"
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_rewind.rb#37
class RuboCop::Cop::Chef::Deprecations::ChefRewind < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::TargetChefVersion
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_rewind.rb#86
  def on_block(node); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_rewind.rb#65
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_rewind.rb#57
  def require_rewind?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_rewind.rb#53
  def rewind_gem_install?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_rewind.rb#61
  def rewind_resources?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_rewind.rb#45
RuboCop::Cop::Chef::Deprecations::ChefRewind::MAPPING = T.let(T.unsafe(nil), Hash)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_rewind.rb#50
RuboCop::Cop::Chef::Deprecations::ChefRewind::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_rewind.rb#51
RuboCop::Cop::Chef::Deprecations::ChefRewind::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Don't use the deprecated `Chef::ShellOut` class which was removed in Chef Infra Client 13. Use the `Mixlib::ShellOut` class instead, which behaves identically or convert to the simpler `shell_out` helper.
#
# @example
#
#   ### incorrect
#   include Chef::ShellOut
#   require 'chef/shellout'
#   Chef::ShellOut.new('some_command')
#
#   ### correct
#   include Mixlib::ShellOut
#   require 'mixlib/shellout'
#   Mixlib::ShellOut.new('some_command')
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_shellout.rb#36
class RuboCop::Cop::Chef::Deprecations::ChefShellout < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_shellout.rb#43
  def include_shellout?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_shellout.rb#60
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_shellout.rb#49
  def require_shellout?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_shellout.rb#53
  def shellout_new?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_shellout.rb#40
RuboCop::Cop::Chef::Deprecations::ChefShellout::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_shellout.rb#41
RuboCop::Cop::Chef::Deprecations::ChefShellout::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Don't use the deprecated ChefSpec Coverage report functionality in your specs. This feature has been removed as coverage reports encourage cookbook authors to write ineffective specs. Focus on testing your logic instead of achieving 100% code coverage.
#
# @example
#
#   ### incorrect
#
#   at_exit { ChefSpec::Coverage.report! }
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/chefspec_coverage_report.rb#30
class RuboCop::Cop::Chef::Deprecations::ChefSpecCoverageReport < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/chefspec_coverage_report.rb#34
  def coverage_reporter?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/chefspec_coverage_report.rb#38
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/chefspec_coverage_report.rb#32
RuboCop::Cop::Chef::Deprecations::ChefSpecCoverageReport::MSG = T.let(T.unsafe(nil), String)

# Use `ChefSpec::SoloRunner` or `ChefSpec::ServerRunner` instead of the deprecated `ChefSpec::Runner`. These new runners were introduced in ChefSpec 4.1 (Oct 2014).
#
# @example
#
#   ### incorrect
#
#   describe 'foo::default' do
#   subject { ChefSpec::Runner.new.converge(described_recipe) }
#
#   # some spec code
#   end
#
#   ### correct
#
#   describe 'foo::default' do
#   subject { ChefSpec::ServerRunner.new.converge(described_recipe) }
#
#   # some spec code
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/chefspec_legacy_runner.rb#42
class RuboCop::Cop::Chef::Deprecations::ChefSpecLegacyRunner < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/chefspec_legacy_runner.rb#46
  def chefspec_runner?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/chefspec_legacy_runner.rb#50
  def on_const(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/chefspec_legacy_runner.rb#44
RuboCop::Cop::Chef::Deprecations::ChefSpecLegacyRunner::MSG = T.let(T.unsafe(nil), String)

# Do not use legacy chef-sugar helper methods, which will not be moved into Chef Infra Client itself. For a complete set of chef-sugar helpers now shipping in Chef Infra Client itself see https://github.com/chef/chef/tree/main/chef-utils#getting-started
#
# @example
#
#   ### incorrect
#   vagrant_key?
#   vagrant_domain?
#   vagrant_user?
#   require_chef_gem
#   best_ip_for(node)
#   nexus?
#   ios_xr?
#   ruby_20?
#   ruby_19?
#   includes_recipe?('foo::bar')
#   wrlinux?
#   dev_null
#   nexentacore_platform?
#   opensolaris_platform?
#   nexentacore?
#   opensolaris?
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_sugar_helpers.rb#44
class RuboCop::Cop::Chef::Deprecations::ChefSugarHelpers < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_sugar_helpers.rb#48
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_sugar_helpers.rb#45
RuboCop::Cop::Chef::Deprecations::ChefSugarHelpers::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_sugar_helpers.rb#46
RuboCop::Cop::Chef::Deprecations::ChefSugarHelpers::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Use `platform?('windows')` instead of the legacy `Chef::Platform.windows?` helper
#
# @example
#
#   ### incorrect
#   Chef::Platform.windows?
#
#   ### correct
#   platform?('windows')
#   platform_family?('windows')
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_windows_platform_helper.rb#33
class RuboCop::Cop::Chef::Deprecations::ChefWindowsPlatformHelper < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_windows_platform_helper.rb#38
  def chef_platform_windows?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_windows_platform_helper.rb#44
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_windows_platform_helper.rb#35
RuboCop::Cop::Chef::Deprecations::ChefWindowsPlatformHelper::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_windows_platform_helper.rb#36
RuboCop::Cop::Chef::Deprecations::ChefWindowsPlatformHelper::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The Librarian-Chef depsolving project is no longer maintained and a Cheffile should not be used for cookbook depsolving. Consider using Policyfiles instead. If the Policyfiles model is not compatible with your workflow you may find Berkshelf offers a more similar, and still supported, experience to Librarian-Chef.
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/cheffile.rb#24
class RuboCop::Cop::Chef::Deprecations::Cheffile < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/cheffile.rb#29
  def on_new_investigation; end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/cheffile.rb#27
RuboCop::Cop::Chef::Deprecations::Cheffile::MSG = T.let(T.unsafe(nil), String)

# Use the `:remove` action in the `chocolatey_package` resource instead of `:uninstall` which was removed in Chef Infra Client 14+.
#
# @example
#
#   ### incorrect
#   chocolatey_package 'nginx' do
#   action :uninstall
#   end
#
#   ### correct
#   chocolatey_package 'nginx' do
#   action :remove
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/chocolatey_package_uninstall_action.rb#36
class RuboCop::Cop::Chef::Deprecations::ChocolateyPackageUninstallAction < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/chocolatey_package_uninstall_action.rb#42
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/chocolatey_package_uninstall_action.rb#40
RuboCop::Cop::Chef::Deprecations::ChocolateyPackageUninstallAction::MSG = T.let(T.unsafe(nil), String)

# Don't depend on the deprecated `compat_resource` cookbook made obsolete by Chef Infra Client 12.19+.
#
# @example
#
#   ### incorrect
#   depends 'compat_resource'
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/depends_compat_resource.rb#29
class RuboCop::Cop::Chef::Deprecations::CookbookDependsOnCompatResource < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::TargetChefVersion
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/depends_compat_resource.rb#39
  def depends_compat_resource?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/depends_compat_resource.rb#43
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/depends_compat_resource.rb#36
RuboCop::Cop::Chef::Deprecations::CookbookDependsOnCompatResource::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/depends_compat_resource.rb#37
RuboCop::Cop::Chef::Deprecations::CookbookDependsOnCompatResource::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Don't depend on the `partial_search` cookbook made obsolete by Chef Infra Client 13.
#
# @example
#
#   ### incorrect
#   depends 'partial_search'
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/depends_partial_search.rb#29
class RuboCop::Cop::Chef::Deprecations::CookbookDependsOnPartialSearch < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/depends_partial_search.rb#37
  def depends_partial_search?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/depends_partial_search.rb#41
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/depends_partial_search.rb#34
RuboCop::Cop::Chef::Deprecations::CookbookDependsOnPartialSearch::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/depends_partial_search.rb#35
RuboCop::Cop::Chef::Deprecations::CookbookDependsOnPartialSearch::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Cookbooks should not depend on the deprecated Poise framework cookbooks. They should instead be refactored to use standard Chef Infra custom resources.
#
# @example
#
#   ### incorrect
#   depends 'poise'
#   depends 'poise-service'
#   depends 'poise-hoist'
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/depends_poise.rb#31
class RuboCop::Cop::Chef::Deprecations::CookbookDependsOnPoise < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/deprecation/depends_poise.rb#35
  def depends_method?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/depends_poise.rb#39
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/depends_poise.rb#32
RuboCop::Cop::Chef::Deprecations::CookbookDependsOnPoise::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/depends_poise.rb#33
RuboCop::Cop::Chef::Deprecations::CookbookDependsOnPoise::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Make sure a cookbook doesn't depend on itself. This will fail on Chef Infra Client 13+
#
# @example
#
#   ### incorrect
#   name 'foo'
#   depends 'foo'
#
#   ### correct
#   name 'foo'
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/cb_depends_on_self.rb#33
class RuboCop::Cop::Chef::Deprecations::CookbooksDependsOnSelf < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/cb_depends_on_self.rb#41
  def cb_name?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/cb_depends_on_self.rb#40
  def dependencies(param0); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/cb_depends_on_self.rb#43
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/cb_depends_on_self.rb#37
RuboCop::Cop::Chef::Deprecations::CookbooksDependsOnSelf::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/cb_depends_on_self.rb#38
RuboCop::Cop::Chef::Deprecations::CookbooksDependsOnSelf::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The Delivery CLI from Chef Delivery/Workflow is no longer bundled with Chef Workstation as Chef Delivery is end of life as of Dec 31st 2021.
#
# Users of Delivery / Workflow would include a `.delivery` directory in their cookbooks. This directory would include Delivery local-mode configs
# or Delivery cookbooks. The contents of this directory are now obsolete and should be removed.
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/delivery.rb#27
class RuboCop::Cop::Chef::Deprecations::Delivery < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp

  # An empty / simple TOML file can also be syntatically valid Ruby, so
  # RuboCop may start an investigation instead of calling on_other_file.
  #
  # source://cookstyle//lib/rubocop/cop/chef/deprecation/delivery.rb#32
  def on_new_investigation; end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/delivery.rb#32
  def on_other_file; end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/delivery.rb#30
RuboCop::Cop::Chef::Deprecations::Delivery::MSG = T.let(T.unsafe(nil), String)

# Don't depend on the deprecated `chef_nginx` cookbook that was replaced by the `nginx` cookbook. The legacy chef_nginx cookbook may not be compatible with newer Chef Infra Client releases.
#
# @example
#
#   ### incorrect
#   depends 'chef_nginx'
#
#   ### correct
#   depends 'nginx'
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/depends_chef_nginx_cookbook.rb#32
class RuboCop::Cop::Chef::Deprecations::DependsOnChefNginxCookbook < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/depends_chef_nginx_cookbook.rb#39
  def depends_compat_resource?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/depends_chef_nginx_cookbook.rb#43
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/depends_chef_nginx_cookbook.rb#36
RuboCop::Cop::Chef::Deprecations::DependsOnChefNginxCookbook::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/depends_chef_nginx_cookbook.rb#37
RuboCop::Cop::Chef::Deprecations::DependsOnChefNginxCookbook::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Don't depend on the chef-reporting cookbook made obsolete by Chef Infra Client 11.6. This cookbook installs a gem that is not compatible with newer Chef Infra Client releases.
#
# @example
#
#   ### incorrect
#   depends 'chef-reporting'
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/depends_chef_reporting_cookbook.rb#29
class RuboCop::Cop::Chef::Deprecations::DependsOnChefReportingCookbook < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/depends_chef_reporting_cookbook.rb#36
  def legacy_depends?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/depends_chef_reporting_cookbook.rb#40
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/depends_chef_reporting_cookbook.rb#33
RuboCop::Cop::Chef::Deprecations::DependsOnChefReportingCookbook::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/depends_chef_reporting_cookbook.rb#34
RuboCop::Cop::Chef::Deprecations::DependsOnChefReportingCookbook::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Don't depend on the EOL `omnibus_updater` cookbook. This cookbook no longer works with newer Chef Infra Client releases and has been replaced with the more reliable `chef_client_updater` cookbook.
#
# @example
#
#   ### incorrect
#   depends 'omnibus_updater'
#
#   ### correct
#   depends 'chef_client_updater'
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/depends_omnibus_updater_cookbook.rb#32
class RuboCop::Cop::Chef::Deprecations::DependsOnOmnibusUpdaterCookbook < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/depends_omnibus_updater_cookbook.rb#39
  def legacy_depends?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/depends_omnibus_updater_cookbook.rb#43
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/depends_omnibus_updater_cookbook.rb#36
RuboCop::Cop::Chef::Deprecations::DependsOnOmnibusUpdaterCookbook::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/depends_omnibus_updater_cookbook.rb#37
RuboCop::Cop::Chef::Deprecations::DependsOnOmnibusUpdaterCookbook::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Use currently supported platforms in ChefSpec listed at https://github.com/chef/fauxhai/blob/main/PLATFORMS.md. Fauxhai / ChefSpec will perform fuzzy matching on platform version values so it's always best to be less specific ie. 10 instead of 10.3
#
# @example
#
#   let(:chef_run) { ChefSpec::ServerRunner.new(platform: 'ubuntu', version: '14.04') }
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_chefspec_platform.rb#28
class RuboCop::Cop::Chef::Deprecations::DeprecatedChefSpecPlatform < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_chefspec_platform.rb#90
  def chefspec_definition?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_chefspec_platform.rb#94
  def legacy_chefspec_platform(platform, version); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_chefspec_platform.rb#115
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_chefspec_platform.rb#105
  def replacement_string(platform, version); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_chefspec_platform.rb#34
RuboCop::Cop::Chef::Deprecations::DeprecatedChefSpecPlatform::DEPRECATED_MAPPING = T.let(T.unsafe(nil), Hash)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_chefspec_platform.rb#32
RuboCop::Cop::Chef::Deprecations::DeprecatedChefSpecPlatform::MSG = T.let(T.unsafe(nil), String)

# Use `provider_for_action` or provides instead of the deprecated `Chef::Platform` methods in resources, which were removed in Chef Infra Client 13.
#
# @example
#
#   ### incorrect
#   resource = Chef::Resource::File.new("/tmp/foo.xyz", run_context)
#   provider = Chef::Platform.provider_for_resource(resource, :create)
#
#   resource = Chef::Resource::File.new("/tmp/foo.xyz", run_context)
#   provider = Chef::Platform.find_provider("ubuntu", "16.04", resource)
#
#   resource = Chef::Resource::File.new("/tmp/foo.xyz", run_context)
#   provider = Chef::Platform.find_provider_for_node(node, resource)
#
#   Chef::Platform.set :platform => :mac_os_x, :resource => :package, :provider => Chef::Provider::Package::Homebrew
#
#   ### correct
#   resource = Chef::Resource::File.new("/tmp/foo.xyz", run_context)
#   provider = resource.provider_for_action(:create)
#
#   # provides :package, platform_family: 'mac_os_x'
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_platform_methods.rb#44
class RuboCop::Cop::Chef::Deprecations::DeprecatedPlatformMethods < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_platform_methods.rb#52
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_platform_methods.rb#48
  def platform_method?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_platform_methods.rb#45
RuboCop::Cop::Chef::Deprecations::DeprecatedPlatformMethods::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_platform_methods.rb#46
RuboCop::Cop::Chef::Deprecations::DeprecatedPlatformMethods::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The large number of `shell_out` helper methods in Chef Infra Client has been reduced to just `shell_out` and `shell_out!` methods. The legacy methods were removed in Chef Infra Client and cookbooks using these legacy helpers will need to be updated.
#
# @example
#
#   ### incorrect
#   shell_out_compact('foo')
#   shell_out_compact!('foo')
#   shell_out_with_timeout('foo')
#   shell_out_with_timeout!('foo')
#   shell_out_with_systems_locale('foo')
#   shell_out_with_systems_locale!('foo')
#   shell_out_compact_timeout('foo')
#   shell_out_compact_timeout!('foo')
#
#   ### correct
#   shell_out('foo')
#   shell_out!('foo')
#   shell_out!('foo', default_env: false) # replaces shell_out_with_systems_locale
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_shellout_methods.rb#41
class RuboCop::Cop::Chef::Deprecations::DeprecatedShelloutMethods < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_shellout_methods.rb#57
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_shellout_methods.rb#46
RuboCop::Cop::Chef::Deprecations::DeprecatedShelloutMethods::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_shellout_methods.rb#47
RuboCop::Cop::Chef::Deprecations::DeprecatedShelloutMethods::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The `sudo` resource in the sudo cookbook 5.0 (2018) or Chef Infra Client 14 and later have replaced the existing `:install` and `:remove` actions with `:create` and `:delete` actions to better match other resources in Chef Infra.
#
# @example
#
#   ### incorrect
#   sudo 'admins' do
#   users 'bob'
#   groups 'sysadmins, superusers'
#   action :remove
#   end
#
#   ### correct
#   sudo 'admins' do
#   users 'bob'
#   groups 'sysadmins, superusers'
#   action :delete
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_sudo_actions.rb#40
class RuboCop::Cop::Chef::Deprecations::DeprecatedSudoActions < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::TargetChefVersion
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_sudo_actions.rb#49
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_sudo_actions.rb#47
RuboCop::Cop::Chef::Deprecations::DeprecatedSudoActions::MSG = T.let(T.unsafe(nil), String)

# Don't use the deprecated `older_than_win_2012_or_8?` helper. Windows versions before 2012 and 8 are now end of life and this helper will always return false.
#
# @example
#
#   ### incorrect
#   if older_than_win_2012_or_8?
#   # do some legacy things
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_windows_version_check.rb#31
class RuboCop::Cop::Chef::Deprecations::DeprecatedWindowsVersionCheck < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_windows_version_check.rb#35
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_windows_version_check.rb#32
RuboCop::Cop::Chef::Deprecations::DeprecatedWindowsVersionCheck::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_windows_version_check.rb#33
RuboCop::Cop::Chef::Deprecations::DeprecatedWindowsVersionCheck::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# With the release of Chef Infra Client 12.14 and the yum cookbook 3.0 the actions the `yum_repository` resource actions were renamed. The `add` action became `create` and `delete` became `remove` to better match other resources in Chef Infra Client.
#
# @example
#
#   ### incorrect
#   yum_repository 'OurCo' do
#   description 'OurCo yum repository'
#   baseurl 'http://artifacts.ourco.org/foo/bar'
#   gpgkey 'http://artifacts.ourco.org/pub/yum/RPM-GPG-KEY-OURCO-6'
#   action :add
#   end
#
#   ### correct
#   yum_repository 'OurCo' do
#   description 'OurCo yum repository'
#   baseurl 'http://artifacts.ourco.org/foo/bar'
#   gpgkey 'http://artifacts.ourco.org/pub/yum/RPM-GPG-KEY-OURCO-6'
#   action :create
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_yum_repository_actions.rb#42
class RuboCop::Cop::Chef::Deprecations::DeprecatedYumRepositoryActions < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::TargetChefVersion
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_yum_repository_actions.rb#51
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_yum_repository_actions.rb#49
RuboCop::Cop::Chef::Deprecations::DeprecatedYumRepositoryActions::MSG = T.let(T.unsafe(nil), String)

# With the release of Chef Infra Client 12.14 and the yum cookbook 3.0 several properties in the `yum_repository` resource were renamed. `url` -> `baseurl`, `keyurl` -> `gpgkey`, and `mirrorexpire` -> `mirror_expire`.
#
# @example
#
#   ### incorrect
#   yum_repository 'OurCo' do
#   description 'OurCo yum repository'
#   url 'http://artifacts.ourco.org/foo/bar'
#   keyurl 'http://artifacts.ourco.org/pub/yum/RPM-GPG-KEY-OURCO-6'
#   mirrorexpire 1440
#   action :create
#   end
#
#   ### correct
#   yum_repository 'OurCo' do
#   description 'OurCo yum repository'
#   baseurl 'http://artifacts.ourco.org/foo/bar'
#   gpgkey 'http://artifacts.ourco.org/pub/yum/RPM-GPG-KEY-OURCO-6'
#   mirror_expire 1440
#   action :create
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_yum_repository_properties.rb#44
class RuboCop::Cop::Chef::Deprecations::DeprecatedYumRepositoryProperties < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::TargetChefVersion
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_yum_repository_properties.rb#53
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_yum_repository_properties.rb#51
RuboCop::Cop::Chef::Deprecations::DeprecatedYumRepositoryProperties::MSG = T.let(T.unsafe(nil), String)

# The beta Audit Mode for Chef Infra Client was removed in Chef Infra Client 15.0. Users should instead use InSpec and the audit cookbook or the Compliance Phase introduced in Chef Infra Client 17. See https://www.inspec.io/ for more information.
#
# @example
#
#   ### incorrect
#   control_group 'Baseline' do
#   control 'SSH' do
#   it 'should be listening on port 22' do
#   expect(port(22)).to be_listening
#   end
#   end
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/eol_audit_mode.rb#34
class RuboCop::Cop::Chef::Deprecations::EOLAuditModeUsage < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/deprecation/eol_audit_mode.rb#38
  def control_group?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/eol_audit_mode.rb#40
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/eol_audit_mode.rb#35
RuboCop::Cop::Chef::Deprecations::EOLAuditModeUsage::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/eol_audit_mode.rb#36
RuboCop::Cop::Chef::Deprecations::EOLAuditModeUsage::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Don't use the deprecated easy_install resource removed in Chef Infra Client 13.
#
# @example
#
#   ### incorrect
#   easy_install "my_thing" do
#   bar
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/easy_install.rb#31
class RuboCop::Cop::Chef::Deprecations::EasyInstallResource < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/deprecation/easy_install.rb#35
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/easy_install.rb#32
RuboCop::Cop::Chef::Deprecations::EasyInstallResource::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/easy_install.rb#33
RuboCop::Cop::Chef::Deprecations::EasyInstallResource::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Use `ignore_failure` in resources to continue when failures occur instead of the deprecated `epic_fail` property.
#
# @example
#
#   ### incorrect
#   package "foo" do
#   epic_fail true
#   end
#
#   ### correct
#   package "foo" do
#   ignore_failure true
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/epic_fail.rb#36
class RuboCop::Cop::Chef::Deprecations::EpicFail < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/epic_fail.rb#42
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/epic_fail.rb#39
RuboCop::Cop::Chef::Deprecations::EpicFail::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/epic_fail.rb#40
RuboCop::Cop::Chef::Deprecations::EpicFail::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Don't use the deprecated `erl_call` resource removed in Chef Infra Client 13."
#
# @example
#
#   ### incorrect
#   erl_call "foo" do
#   bar
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/erl_call.rb#31
class RuboCop::Cop::Chef::Deprecations::ErlCallResource < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/deprecation/erl_call.rb#35
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/erl_call.rb#32
RuboCop::Cop::Chef::Deprecations::ErlCallResource::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/erl_call.rb#33
RuboCop::Cop::Chef::Deprecations::ErlCallResource::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# In Chef Infra Client 13 and later you must set path env vars in execute resources using the `environment` property not the legacy `path` property.
#
# @example
#
#   ### incorrect
#   execute 'some_cmd' do
#   path '/foo/bar'
#   end
#
#   ### correct
#   execute 'some_cmd' do
#   environment {path: '/foo/bar'}
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/execute_path_property.rb#36
class RuboCop::Cop::Chef::Deprecations::ExecutePathProperty < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/execute_path_property.rb#41
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/execute_path_property.rb#39
RuboCop::Cop::Chef::Deprecations::ExecutePathProperty::MSG = T.let(T.unsafe(nil), String)

# In Chef Infra Client 13 and later you must either specific an absolute path when using the `execute` resource's `creates` property or also use the `cwd` property.
#
# @example
#
#   ### incorrect
#   execute 'some_cmd' do
#   creates 'something'
#   end
#
#   ### correct
#   execute 'some_cmd' do
#   creates '/tmp/something'
#   end
#
#   execute 'some_cmd' do
#   creates 'something'
#   cwd '/tmp/'
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/execute_relative_creates_without_cwd.rb#41
class RuboCop::Cop::Chef::Deprecations::ExecuteRelativeCreatesWithoutCwd < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/execute_relative_creates_without_cwd.rb#46
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/execute_relative_creates_without_cwd.rb#44
RuboCop::Cop::Chef::Deprecations::ExecuteRelativeCreatesWithoutCwd::MSG = T.let(T.unsafe(nil), String)

# The Foodcritic cookbook linter has been deprecated and should no longer be used for validating cookbooks. Do not include the `.foodcritic` config file used by Foodcritic in your cookbooks.
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/foodcritic_file.rb#24
class RuboCop::Cop::Chef::Deprecations::FoodcriticFile < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/foodcritic_file.rb#29
  def on_new_investigation; end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/foodcritic_file.rb#27
RuboCop::Cop::Chef::Deprecations::FoodcriticFile::MSG = T.let(T.unsafe(nil), String)

# The Foodcritic cookbook linter has been deprecated and should no longer be used for validating cookbooks.
#
# @example
#
#   ### incorrect
#   gem 'foodcritic'
#   require 'foodcritic'
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/foodcritic_testing.rb#30
class RuboCop::Cop::Chef::Deprecations::FoodcriticTesting < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/deprecation/foodcritic_testing.rb#34
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/foodcritic_testing.rb#31
RuboCop::Cop::Chef::Deprecations::FoodcriticTesting::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/foodcritic_testing.rb#32
RuboCop::Cop::Chef::Deprecations::FoodcriticTesting::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Chef Infra Client 16 and later a legacy HWRP resource must use `provides` to define how the resource is called in recipes or other resources. To maintain compatibility with Chef Infra Client < 16 use both `resource_name` and `provides`.
#
#  ### correct when Chef Infra Client < 15 (but compatible with 16+ as well)
#   class Chef
#     class Resource
#       class UlimitRule < Chef::Resource
#         resource_name :ulimit_rule
#         provides :ulimit_rule
#
#         property :type, [Symbol, String], required: true
#         property :item, [Symbol, String], required: true
#
#         # additional resource code
#       end
#     end
#   end
#
#  ### correct when Chef Infra Client 16+
#   class Chef
#     class Resource
#       class UlimitRule < Chef::Resource
#         provides :ulimit_rule
#
#         property :type, [Symbol, String], required: true
#         property :item, [Symbol, String], required: true
#
#         # additional resource code
#       end
#     end
#   end
#
#  # better
#  Convert your legacy HWRPs to custom resources
#
# @example
#
#   ### incorrect
#   class Chef
#   class Resource
#   class UlimitRule < Chef::Resource
#   property :type, [Symbol, String], required: true
#   property :item, [Symbol, String], required: true
#
#   # additional resource code
#   end
#   end
#   end
#
#   ### incorrect
#   class Chef
#   class Resource
#   class UlimitRule < Chef::Resource
#   resource_name :ulimit_rule
#
#   property :type, [Symbol, String], required: true
#   property :item, [Symbol, String], required: true
#
#   # additional resource code
#   end
#   end
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/hwrp_without_provides.rb#84
class RuboCop::Cop::Chef::Deprecations::HWRPWithoutProvides < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/hwrp_without_provides.rb#89
  def HWRP?(param0 = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://cookstyle//lib/rubocop/cop/chef/deprecation/hwrp_without_provides.rb#118
  def has_provides?; end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/hwrp_without_provides.rb#133
  def indentation(node); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/hwrp_without_provides.rb#105
  def on_class(node); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/hwrp_without_provides.rb#101
  def provides(param0); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/hwrp_without_provides.rb#103
  def resource_name(param0); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/hwrp_without_provides.rb#102
  def resource_name_ast(param0); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/hwrp_without_provides.rb#87
RuboCop::Cop::Chef::Deprecations::HWRPWithoutProvides::MSG = T.let(T.unsafe(nil), String)

# Chef Infra Client 15.3 and later include a new Unified Mode that simplifies the execution of resources by replace the traditional compile and converge phases with a single phase. Unified mode simplifies writing advanced resources and avoids confusing errors that often occur when mixing ruby and Chef Infra resources. Chef Infra Client 17.0 and later will begin warning that `unified_mode true` should be set in all resources to validate that they will continue to function in Chef Infra Client 18.0 (April 2022) when Unified Mode becomes the default.
#
# @example
#
#   ### incorrect
#   class Chef
#   class Resource
#   class UlimitRule < Chef::Resource
#   provides :ulimit_rule
#
#   property :type, [Symbol, String], required: true
#   property :item, [Symbol, String], required: true
#
#   # additional resource code
#   end
#   end
#   end
#
#   ### correct
#   class Chef
#   class Resource
#   class UlimitRule < Chef::Resource
#   provides :ulimit_rule
#   unified_mode true
#
#   property :type, [Symbol, String], required: true
#   property :item, [Symbol, String], required: true
#
#   # additional resource code
#   end
#   end
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/hwrp_without_unified_mode_true.rb#55
class RuboCop::Cop::Chef::Deprecations::HWRPWithoutUnifiedTrue < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/hwrp_without_unified_mode_true.rb#62
  def HWRP?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/hwrp_without_unified_mode_true.rb#76
  def on_class(node); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/hwrp_without_unified_mode_true.rb#74
  def unified_mode?(param0); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/hwrp_without_unified_mode_true.rb#60
RuboCop::Cop::Chef::Deprecations::HWRPWithoutUnifiedTrue::MSG = T.let(T.unsafe(nil), String)

# Do not include the deprecated xml::ruby recipe to install the nokogiri gem. Chef Infra Client 12 and later ships with nokogiri included.
#
# @example
#
#   ### incorrect
#   include_recipe 'xml::ruby'
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/xml_ruby_recipe.rb#29
class RuboCop::Cop::Chef::Deprecations::IncludingXMLRubyRecipe < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/xml_ruby_recipe.rb#39
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/xml_ruby_recipe.rb#35
  def xml_ruby_recipe?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/xml_ruby_recipe.rb#32
RuboCop::Cop::Chef::Deprecations::IncludingXMLRubyRecipe::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/xml_ruby_recipe.rb#33
RuboCop::Cop::Chef::Deprecations::IncludingXMLRubyRecipe::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Don't include the deprecated yum DNF compatibility recipe, which is no longer necessary
# as Chef Infra Client includes DNF package support
#
# @example
#
#   ### incorrect
#   include_recipe 'yum::dnf_yum_compat'
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/yum_dnf_compat_recipe.rb#30
class RuboCop::Cop::Chef::Deprecations::IncludingYumDNFCompatRecipe < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/yum_dnf_compat_recipe.rb#41
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/yum_dnf_compat_recipe.rb#37
  def yum_dnf_compat_recipe_usage?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/yum_dnf_compat_recipe.rb#34
RuboCop::Cop::Chef::Deprecations::IncludingYumDNFCompatRecipe::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/yum_dnf_compat_recipe.rb#35
RuboCop::Cop::Chef::Deprecations::IncludingYumDNFCompatRecipe::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The launchd resource's hash property was renamed to plist_hash in Chef Infra Client 13+ to avoid conflicts with Ruby's hash class.
#
# @example
#
#   ### incorrect
#   launchd 'foo' do
#   hash foo: 'bar'
#   end
#
#   ### correct
#   launchd 'foo' do
#   plist_hash foo: 'bar'
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/launchd_deprecated_hash_property.rb#36
class RuboCop::Cop::Chef::Deprecations::LaunchdDeprecatedHashProperty < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::TargetChefVersion
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/launchd_deprecated_hash_property.rb#45
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/launchd_deprecated_hash_property.rb#43
RuboCop::Cop::Chef::Deprecations::LaunchdDeprecatedHashProperty::MSG = T.let(T.unsafe(nil), String)

# Use the new-style notification syntax which allows you to notify resources defined later in a recipe or resource.
#
# @example
#
#   ### incorrect
#   template '/etc/www/configures-apache.conf' do
#   notifies :restart, resources(service: 'apache')
#   end
#
#   template '/etc/www/configures-apache.conf' do
#   notifies :restart, resources(service: 'apache'), :immediately
#   end
#
#   template '/etc/www/configures-apache.conf' do
#   notifies :restart, resources(service: service_name_variable), :immediately
#   end
#
#   template '/etc/www/configures-apache.conf' do
#   subscribes :restart, resources(service: service_name_variable), :immediately
#   end
#
#   ### correct
#   template '/etc/www/configures-apache.conf' do
#   notifies :restart, 'service[apache]'
#   end
#
#   template '/etc/www/configures-apache.conf' do
#   notifies :restart, 'service[apache]', :immediately
#   end
#
#   template '/etc/www/configures-apache.conf' do
#   notifies :restart, "service[#{service_name_variable}]", :immediately
#   end
#
#   template '/etc/www/configures-apache.conf' do
#   subscribes :restart, "service[#{service_name_variable}]", :immediately
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/legacy_notify_syntax.rb#60
class RuboCop::Cop::Chef::Deprecations::LegacyNotifySyntax < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/legacy_notify_syntax.rb#66
  def legacy_notify?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/legacy_notify_syntax.rb#70
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/legacy_notify_syntax.rb#63
RuboCop::Cop::Chef::Deprecations::LegacyNotifySyntax::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/legacy_notify_syntax.rb#64
RuboCop::Cop::Chef::Deprecations::LegacyNotifySyntax::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The Ohai default recipe previously allowed a user to ship custom Ohai plugins to a system by including them
# in a directory in the Ohai cookbook. This functionality was replaced with the ohai_plugin resource, which
# should be used instead as it doesn't require forking the ohai cookbook.
#
# @example
#
#   ### incorrect
#   include_recipe 'yum::elrepo'
#   include_recipe 'yum::epel'
#   include_recipe 'yum::ius'
#   include_recipe 'yum::remi'
#   include_recipe 'yum::repoforge'
#   include_recipe 'yum::yum'
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/legacy_yum_cookbook_recipes.rb#36
class RuboCop::Cop::Chef::Deprecations::LegacyYumCookbookRecipes < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/deprecation/legacy_yum_cookbook_recipes.rb#40
  def old_yum_recipe?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/legacy_yum_cookbook_recipes.rb#44
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/legacy_yum_cookbook_recipes.rb#37
RuboCop::Cop::Chef::Deprecations::LegacyYumCookbookRecipes::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/legacy_yum_cookbook_recipes.rb#38
RuboCop::Cop::Chef::Deprecations::LegacyYumCookbookRecipes::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The Librarian-Chef depsolving project is no longer maintained and a Cheffile should not be used for cookbook depsolving. Consider using Policyfiles instead.
#
# @example
#
#   ### incorrect
#   require 'chefspec/librarian'
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/librarian_chefspec.rb#29
class RuboCop::Cop::Chef::Deprecations::LibrarianChefSpec < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/deprecation/librarian_chefspec.rb#33
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/librarian_chefspec.rb#30
RuboCop::Cop::Chef::Deprecations::LibrarianChefSpec::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/librarian_chefspec.rb#31
RuboCop::Cop::Chef::Deprecations::LibrarianChefSpec::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The local resource's lc_all property has been deprecated and will be removed in Chef Infra Client 17
#
# @example
#
#   ### incorrect
#   locale 'set locale' do
#   lang 'en_gb.utf-8'
#   lc_all 'en_gb.utf-8'
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/locale_lc_all_property.rb#32
class RuboCop::Cop::Chef::Deprecations::LocaleDeprecatedLcAllProperty < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/locale_lc_all_property.rb#37
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/locale_lc_all_property.rb#35
RuboCop::Cop::Chef::Deprecations::LocaleDeprecatedLcAllProperty::MSG = T.let(T.unsafe(nil), String)

# In Chef Infra Client 16 the log resource no longer notifies when logging so notifications should not be triggered from log resources. Use the notify_group resource introduced in Chef Infra Client 15.8 instead to aggregate notifications.
#
# @example
#
#   ### incorrect
#   template '/etc/foo' do
#   source 'bar.erb'
#   notifies :write, 'log[Aggregate notifications using a single log resource]', :immediately
#   end
#
#   log 'Aggregate notifications using a single log resource' do
#   notifies :restart, 'service[foo]', :delayed
#   end
#
#   ### correct
#   template '/etc/foo' do
#   source 'bar.erb'
#   notifies :run, 'notify_group[Aggregate notifications using a single notify_group resource]', :immediately
#   end
#
#   notify_group 'Aggregate notifications using a single notify_group resource' do
#   notifies :restart, 'service[foo]', :delayed
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/log_resource_notifications.rb#46
class RuboCop::Cop::Chef::Deprecations::LogResourceNotifications < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/log_resource_notifications.rb#54
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/log_resource_notifications.rb#52
RuboCop::Cop::Chef::Deprecations::LogResourceNotifications::MSG = T.let(T.unsafe(nil), String)

# The `global` property in the macos_userdefaults resource was deprecated in Chef Infra Client 16.3. This property was never properly implemented and caused failures under many conditions. Omitting the `domain` property will now set global defaults.
#
# @example
#
#   ### incorrect
#   macos_userdefaults 'set a value' do
#   global true
#   key 'key'
#   value 'value'
#   end
#
#   ### correct
#   macos_userdefaults 'set a value' do
#   key 'key'
#   value 'value'
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/macos_userdefaults_global_property.rb#39
class RuboCop::Cop::Chef::Deprecations::MacosUserdefaultsGlobalProperty < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::TargetChefVersion
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/macos_userdefaults_global_property.rb#49
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/macos_userdefaults_global_property.rb#47
RuboCop::Cop::Chef::Deprecations::MacosUserdefaultsGlobalProperty::MSG = T.let(T.unsafe(nil), String)

# A resource property (or attribute) can't be marked as a name_property (or name_attribute) and also have a default value. The name property is a special property that is derived from the name of the resource block in and thus always has a value passed to the resource. For example if you define `my_resource 'foo'` in recipe, then the name property of `my_resource` will automatically be set to `foo`. Setting a property to be both a name_property and have a default value will cause Chef Infra Client failures in 13.0 and later releases.
#
# @example
#
#   ### incorrect
#   property :config_file, String, default: 'foo', name_property: true
#   attribute :config_file, String, default: 'foo', name_attribute: true
#
#   ### correct
#   property :config_file, String, name_property: true
#   attribute :config_file, String, name_attribute: true
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/name_property_and_default.rb#34
class RuboCop::Cop::Chef::Deprecations::NamePropertyWithDefaultValue < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/name_property_and_default.rb#44
  def name_property_with_default?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/name_property_and_default.rb#48
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/name_property_and_default.rb#38
RuboCop::Cop::Chef::Deprecations::NamePropertyWithDefaultValue::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/name_property_and_default.rb#39
RuboCop::Cop::Chef::Deprecations::NamePropertyWithDefaultValue::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The node.deep_fetch method has been removed from Chef-Sugar, and must be replaced by the node.read API.
#
# @example
#
#   ### incorrect
#   node.deep_fetch("foo")
#
#   ### correct
#   node.read("foo")
#
#   ### incorrect
#   node.deep_fetch!("foo")
#
#   ### correct
#   node.read!("foo")
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/node_deep_fetch.rb#37
class RuboCop::Cop::Chef::Deprecations::NodeDeepFetch < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/node_deep_fetch.rb#42
  def node_deep_fetch?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/node_deep_fetch.rb#46
  def on_send(node); end

  private

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/node_deep_fetch.rb#56
  def fix_name(name); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/node_deep_fetch.rb#40
RuboCop::Cop::Chef::Deprecations::NodeDeepFetch::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Use node attributes to access data provided by Ohai instead of using node methods to access that data.
#
# @example
#
#   ### incorrect
#   node.fqdn
#   node.platform
#   node.platform_family
#   node.platform_version
#   node.hostname
#
#   ### correct
#   node['fqdn']
#   node['platform']
#   node['platform_family']
#   node['platform_version']
#   node['hostname']
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/node_methods_not_attributes.rb#40
class RuboCop::Cop::Chef::Deprecations::NodeMethodsInsteadofAttributes < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/node_methods_not_attributes.rb#65
  def node_ohai_methods?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/node_methods_not_attributes.rb#69
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/node_methods_not_attributes.rb#43
RuboCop::Cop::Chef::Deprecations::NodeMethodsInsteadofAttributes::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/node_methods_not_attributes.rb#44
RuboCop::Cop::Chef::Deprecations::NodeMethodsInsteadofAttributes::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The `node.set` method has been removed in Chef Infra Client 13 and usage must be replaced with `node.normal`.
#
# This cop will autocorrect code to use node.normal, which is functionally identical to node.set, but we also discourage the use of that method as normal level attributes persist on the node even if the code setting the attribute is later removed.
#
# @example
#
#   ### incorrect
#   node.set['foo'] = true
#
#   ### correct
#   node.normal['foo'] = true
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/node_set.rb#33
class RuboCop::Cop::Chef::Deprecations::NodeSet < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/node_set.rb#39
  def node_set?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/node_set.rb#43
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/node_set.rb#36
RuboCop::Cop::Chef::Deprecations::NodeSet::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/node_set.rb#37
RuboCop::Cop::Chef::Deprecations::NodeSet::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The node.set_unless method has been removed in Chef Infra Client 13 and usage must be replaced with node.normal_unless.
#
# This cop will autocorrect code to use node.normal_unless, which is functionally identical to node.set_unless, but we also discourage the use of that method as normal level attributes persist on the node even if the code setting the attribute is later removed.
#
# @example
#
#   ### incorrect
#   node.set_unless['foo'] = true
#
#   ### correct
#   node.normal_unless['foo'] = true
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/node_set_unless.rb#33
class RuboCop::Cop::Chef::Deprecations::NodeSetUnless < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/node_set_unless.rb#39
  def node_set_unless?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/node_set_unless.rb#43
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/node_set_unless.rb#36
RuboCop::Cop::Chef::Deprecations::NodeSetUnless::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/node_set_unless.rb#37
RuboCop::Cop::Chef::Deprecations::NodeSetUnless::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# When setting a node attribute in Chef Infra Client 11 and later you must specify the precedence level.
#
# @example
#
#   ### incorrect
#   node['foo']['bar'] = 1
#   node['foo']['bar'] << 1
#   node['foo']['bar'] += 1
#   node['foo']['bar'] -= 1
#
#   ### correct
#   node.default['foo']['bar'] = 1
#   node.default['foo']['bar'] << 1
#   node.default['foo']['bar'] += 1
#   node.default['foo']['bar'] -= 1
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/node_set_without_level.rb#37
class RuboCop::Cop::Chef::Deprecations::NodeSetWithoutLevel < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/deprecation/node_set_without_level.rb#41
  def on_op_asgn(node); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/node_set_without_level.rb#48
  def on_send(node); end

  private

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/node_set_without_level.rb#57
  def add_offense_for_bare_assignment(sub_node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/node_set_without_level.rb#38
RuboCop::Cop::Chef::Deprecations::NodeSetWithoutLevel::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/node_set_without_level.rb#39
RuboCop::Cop::Chef::Deprecations::NodeSetWithoutLevel::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Legacy Chef::PartialSearch class usage should be updated to use the `search` helper instead with the `filter_result` key.
#
# @example
#
#   ### incorrect
#   ::Chef::PartialSearch.new.search((:node, 'role:web',
#   keys: { 'name' => [ 'name' ],
#   'ip' => [ 'ipaddress' ],
#   'kernel_version' => %w(kernel version),
#   }
#   ).each do |result|
#   puts result['name']
#   puts result['ip']
#   puts result['kernel_version']
#   end
#
#   ### correct
#   search(:node, 'role:web',
#   filter_result: { 'name' => [ 'name' ],
#   'ip' => [ 'ipaddress' ],
#   'kernel_version' => %w(kernel version),
#   }
#   ).each do |result|
#   puts result['name']
#   puts result['ip']
#   puts result['kernel_version']
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/partial_search_class_usage.rb#50
class RuboCop::Cop::Chef::Deprecations::PartialSearchClassUsage < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/deprecation/partial_search_class_usage.rb#58
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/partial_search_class_usage.rb#54
  def partial_search_class?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/partial_search_class_usage.rb#51
RuboCop::Cop::Chef::Deprecations::PartialSearchClassUsage::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/partial_search_class_usage.rb#52
RuboCop::Cop::Chef::Deprecations::PartialSearchClassUsage::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Legacy partial_search usage should be updated to use :filter_result in the search helper instead
#
# @example
#
#   ### incorrect
#   partial_search(:node, 'role:web',
#   keys: { 'name' => [ 'name' ],
#   'ip' => [ 'ipaddress' ],
#   'kernel_version' => %w(kernel version),
#   }
#   ).each do |result|
#   puts result['name']
#   puts result['ip']
#   puts result['kernel_version']
#   end
#
#   ### correct
#   search(:node, 'role:web',
#   filter_result: { 'name' => [ 'name' ],
#   'ip' => [ 'ipaddress' ],
#   'kernel_version' => %w(kernel version),
#   }
#   ).each do |result|
#   puts result['name']
#   puts result['ip']
#   puts result['kernel_version']
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/partial_search_helper_usage.rb#50
class RuboCop::Cop::Chef::Deprecations::PartialSearchHelperUsage < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/deprecation/partial_search_helper_usage.rb#54
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/partial_search_helper_usage.rb#51
RuboCop::Cop::Chef::Deprecations::PartialSearchHelperUsage::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/partial_search_helper_usage.rb#52
RuboCop::Cop::Chef::Deprecations::PartialSearchHelperUsage::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The poise_archive resource in the deprecated poise-archive should be replaced with the archive_file resource found in Chef Infra Client 15+.
#
# @example
#
#   ### incorrect
#   poise_archive 'https://example.com/myapp.tgz' do
#   destination '/opt/my_app'
#   end
#
#   ### correct
#   archive_file 'https://example.com/myapp.tgz' do
#   destination '/opt/my_app'
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/poise_archive.rb#36
class RuboCop::Cop::Chef::Deprecations::PoiseArchiveUsage < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/poise_archive.rb#44
  def depends_poise_archive?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/poise_archive.rb#54
  def on_block(node); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/poise_archive.rb#48
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/poise_archive.rb#41
RuboCop::Cop::Chef::Deprecations::PoiseArchiveUsage::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/poise_archive.rb#42
RuboCop::Cop::Chef::Deprecations::PoiseArchiveUsage::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The Policyfile source of `:community` has been replaced with `:supermarket`
#
# @example
#
#   ### incorrect
#   default_source :community
#
#   ### correct
#   default_source :supermarket
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/policyfile_community_source.rb#32
class RuboCop::Cop::Chef::Deprecations::PolicyfileCommunitySource < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/policyfile_community_source.rb#38
  def community_source?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/policyfile_community_source.rb#42
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/policyfile_community_source.rb#35
RuboCop::Cop::Chef::Deprecations::PolicyfileCommunitySource::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/policyfile_community_source.rb#36
RuboCop::Cop::Chef::Deprecations::PolicyfileCommunitySource::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Use `node['powershell']['version']` or the new `powershell_version` helper available in Chef Infra Client 15.8+ instead of the deprecated PowerShell cookbook helpers
#
# @example
#
#   ### incorrect
#   Powershell::VersionHelper.powershell_version?('4.0')
#
#   ### correct
#   node['powershell']['version'].to_f == 4.0
#
#   # better (Chef Infra Client 15.8+)
#   powershell_version == 4.0
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/powershell_cookbook_helpers.rb#35
class RuboCop::Cop::Chef::Deprecations::PowershellCookbookHelpers < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/powershell_cookbook_helpers.rb#48
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/powershell_cookbook_helpers.rb#41
  def ps_cb_helper?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/powershell_cookbook_helpers.rb#38
RuboCop::Cop::Chef::Deprecations::PowershellCookbookHelpers::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/powershell_cookbook_helpers.rb#39
RuboCop::Cop::Chef::Deprecations::PowershellCookbookHelpers::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Make sure to use include_recipe instead of require_recipe
#
# @example
#
#   ### incorrect
#   require_recipe 'foo'
#
#   ### correct
#   include_recipe 'foo'
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/require_recipe.rb#32
class RuboCop::Cop::Chef::Deprecations::RequireRecipe < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/require_recipe.rb#42
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/require_recipe.rb#38
  def require_recipe?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/require_recipe.rb#35
RuboCop::Cop::Chef::Deprecations::RequireRecipe::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/require_recipe.rb#36
RuboCop::Cop::Chef::Deprecations::RequireRecipe::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Resources written in the class based HWRP style should inherit from the 'Chef::Resource' class and not the 'ChefCompat::Resource' class from the deprecated compat_resource cookbook.
#
# @example
#
#   ### incorrect
#   class AptUpdate < ChefCompat::Resource
#   # some resource code
#   end
#
#   ### correct
#   class AptUpdate < Chef::Resource
#   # some resource code
#   end
#
#   # better
#   Write a custom resource using the custom resource DSL and avoid class based HWRPs entirely
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/inherits_compat_resource.rb#39
class RuboCop::Cop::Chef::Deprecations::ResourceInheritsFromCompatResource < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/inherits_compat_resource.rb#44
  def inherits_from_compat_resource?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/inherits_compat_resource.rb#48
  def on_class(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/inherits_compat_resource.rb#42
RuboCop::Cop::Chef::Deprecations::ResourceInheritsFromCompatResource::MSG = T.let(T.unsafe(nil), String)

# Some providers in resources override the provides? method, used to check whether they are a valid provider on the current platform. In Chef Infra Client 13, this will cause an error. Instead use `provides :SOME_PROVIDER_NAME` to register the provider.
#
# @example
#
#   ### incorrect
#   def provides?
#   true
#   end
#
#   ### correct
#   provides :SOME_PROVIDER_NAME
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/resource_overrides_provides_method.rb#34
class RuboCop::Cop::Chef::Deprecations::ResourceOverridesProvidesMethod < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/deprecation/resource_overrides_provides_method.rb#37
  def calls_provides?(param0); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/resource_overrides_provides_method.rb#39
  def on_def(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/resource_overrides_provides_method.rb#35
RuboCop::Cop::Chef::Deprecations::ResourceOverridesProvidesMethod::MSG = T.let(T.unsafe(nil), String)

# Don't use the dsl_name method in a resource to find the name of the resource. Use the resource_name method instead. dsl_name was removed in Chef Infra Client 13 and will now result in an error.
#
# @example
#
#   ### incorrect
#   my_resource = MyResource.dsl_name
#
#   ### correct
#   my_resource = MyResource.resource_name
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/resource_uses_dsl_name_method.rb#32
class RuboCop::Cop::Chef::Deprecations::ResourceUsesDslNameMethod < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/deprecation/resource_uses_dsl_name_method.rb#36
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/resource_uses_dsl_name_method.rb#33
RuboCop::Cop::Chef::Deprecations::ResourceUsesDslNameMethod::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/resource_uses_dsl_name_method.rb#34
RuboCop::Cop::Chef::Deprecations::ResourceUsesDslNameMethod::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Starting with Chef Infra Client 16, using `resource_name` without also using `provides` will result in resource failures. Make sure to use both `resource_name` and `provides` to change the name of the resource. You can also omit `resource_name` entirely if the value set matches the name Chef Infra Client automatically assigns based on COOKBOOKNAME_FILENAME.
#
# @example
#
#   ### incorrect
#   mycookbook/resources/myresource.rb:
#   resource_name :mycookbook_myresource
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/resource_uses_only_resource_name.rb#30
class RuboCop::Cop::Chef::Deprecations::ResourceUsesOnlyResourceName < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/resource_uses_only_resource_name.rb#40
  def cb_name_match(param0); end

  # determine the cookbook name either by parsing metadata.rb or by parsing metadata.json
  #
  # @return [String] the cookbook name
  #
  # source://cookstyle//lib/rubocop/cop/chef/deprecation/resource_uses_only_resource_name.rb#47
  def cookbook_name; end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/resource_uses_only_resource_name.rb#68
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/resource_uses_only_resource_name.rb#42
  def provides(param0); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/resource_uses_only_resource_name.rb#38
  def resource_name?(param0 = T.unsafe(nil)); end

  # given a resource name make sure there's a provides that matches that name
  #
  # @return [TrueClass, FalseClass]
  #
  # source://cookstyle//lib/rubocop/cop/chef/deprecation/resource_uses_only_resource_name.rb#61
  def valid_provides?(resource_name); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/resource_uses_only_resource_name.rb#35
RuboCop::Cop::Chef::Deprecations::ResourceUsesOnlyResourceName::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/resource_uses_only_resource_name.rb#36
RuboCop::Cop::Chef::Deprecations::ResourceUsesOnlyResourceName::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The Resource.provider_base allows the developer to specify within a resource a module to load the resource's provider from. Instead, the provider should call provides to register itself, or the resource should call provider to specify the provider to use.
#
# @example
#
#   ### incorrect
#   provider_base ::Chef::Provider::SomethingSomething
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/resource_uses_provider_base_method.rb#29
class RuboCop::Cop::Chef::Deprecations::ResourceUsesProviderBaseMethod < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/deprecation/resource_uses_provider_base_method.rb#33
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/resource_uses_provider_base_method.rb#30
RuboCop::Cop::Chef::Deprecations::ResourceUsesProviderBaseMethod::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/resource_uses_provider_base_method.rb#31
RuboCop::Cop::Chef::Deprecations::ResourceUsesProviderBaseMethod::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Don't call the deprecated `updated=` method in a resource to set the resource to updated. This method was removed from Chef Infra Client 13 and this will now cause an error. Instead wrap code that updated the state of the node in a `converge_by` block. Documentation on using the `converge_by` block can be found at https://docs.chef.io/custom_resources/.
#
# @example
#
#   ### incorrect
#   action :foo do
#   updated = true
#   end
#
#   ### correct
#   action :foo do
#   converge_by('resource did something') do
#   # code that causes the resource to converge
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/resource_uses_updated_method.rb#37
class RuboCop::Cop::Chef::Deprecations::ResourceUsesUpdatedMethod < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/deprecation/resource_uses_updated_method.rb#40
  def on_lvasgn(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/resource_uses_updated_method.rb#38
RuboCop::Cop::Chef::Deprecations::ResourceUsesUpdatedMethod::MSG = T.let(T.unsafe(nil), String)

# Chef Infra Client 15.3 and later include a new Unified Mode that simplifies the execution of resources by replace the traditional compile and converge phases with a single phase. Unified mode simplifies writing advanced resources and avoids confusing errors that often occur when mixing ruby and Chef Infra resources. Chef Infra Client 17.0 and later will begin warning that `unified_mode true` should be set in all resources to validate that they will continue to function in Chef Infra Client 18.0 (April 2022) when Unified Mode becomes the default.
#
# @example
#
#   ### incorrect
#   resource_name :foo
#   provides :foo
#
#   action :create do
#   # some action code
#   end
#
#   ### correct
#   resource_name :foo
#   provides :foo
#   unified_mode true
#
#   action :create do
#   # some action code
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/resource_without_unified_mode_true.rb#43
class RuboCop::Cop::Chef::Deprecations::ResourceWithoutUnifiedTrue < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/resource_without_unified_mode_true.rb#68
  def insert_below_provides(corrector); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/resource_without_unified_mode_true.rb#76
  def insert_below_resource_name(corrector); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/resource_without_unified_mode_true.rb#56
  def on_new_investigation; end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/resource_without_unified_mode_true.rb#54
  def provides(param0); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/resource_without_unified_mode_true.rb#53
  def resource_name(param0); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/resource_without_unified_mode_true.rb#52
  def unified_mode?(param0); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/resource_without_unified_mode_true.rb#50
RuboCop::Cop::Chef::Deprecations::ResourceWithoutUnifiedTrue::MSG = T.let(T.unsafe(nil), String)

# Pass options to shell_out helpers without the brackets to avoid Ruby 2.7 deprecation warnings.
#
# @example
#
#   ### incorrect
#   shell_out!('hostnamectl status', { returns: [0, 1] })
#   shell_out('hostnamectl status', { returns: [0, 1] })
#
#   ### correct
#   shell_out!('hostnamectl status', returns: [0, 1])
#   shell_out('hostnamectl status', returns: [0, 1])
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/ruby_27_keyword_argument_warnings.rb#34
class RuboCop::Cop::Chef::Deprecations::Ruby27KeywordArgumentWarnings < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/ruby_27_keyword_argument_warnings.rb#44
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/ruby_27_keyword_argument_warnings.rb#40
  def positional_shellout?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/ruby_27_keyword_argument_warnings.rb#37
RuboCop::Cop::Chef::Deprecations::Ruby27KeywordArgumentWarnings::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/ruby_27_keyword_argument_warnings.rb#38
RuboCop::Cop::Chef::Deprecations::Ruby27KeywordArgumentWarnings::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Use the :run action in the ruby_block resource instead of the deprecated :create action
#
# @example
#
#   ### incorrect
#   ruby_block 'my special ruby block' do
#   block do
#   puts 'running'
#   end
#   action :create
#   end
#
#   ### correct
#   ruby_block 'my special ruby block' do
#   block do
#   puts 'running'
#   end
#   action :run
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/ruby_block_create_action.rb#42
class RuboCop::Cop::Chef::Deprecations::RubyBlockCreateAction < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/ruby_block_create_action.rb#48
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/ruby_block_create_action.rb#46
RuboCop::Cop::Chef::Deprecations::RubyBlockCreateAction::MSG = T.let(T.unsafe(nil), String)

# correct
#
# query(:node, '*:*')
#  search(:node, '*:*', start: 0, rows: 1000, filter_result: { :ip_address => ["ipaddress"] })
#  search(:node, '*:*', start: 0, rows: 1000)
#  search(:node, '*:*', start: 0)
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/search_uses_positional_parameters.rb#38
class RuboCop::Cop::Chef::Deprecations::SearchUsesPositionalParameters < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/search_uses_positional_parameters.rb#50
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/search_uses_positional_parameters.rb#46
  def search_method?(param0 = T.unsafe(nil)); end

  private

  # Return the corrected search string
  #
  # @param node [RuboCop::AST::Node]
  # @return [String]
  #
  # source://cookstyle//lib/rubocop/cop/chef/deprecation/search_uses_positional_parameters.rb#85
  def corrected_string(node); end

  # lookup the position in NAMED_PARAM_LOOKUP_TABLE to create a new
  # hashified version of the query. Also convert Integer like Strings into Integers
  #
  # @param arg [RuboCop::AST::Node]
  # @param position [Integer]
  # @return [String]
  #
  # source://cookstyle//lib/rubocop/cop/chef/deprecation/search_uses_positional_parameters.rb#105
  def hashify_argument(arg, position); end

  # Does this value look like an Integer (it's an integer or a string)
  #
  # @param val [RuboCop::AST::Node]
  # @return [Boolean]
  #
  # source://cookstyle//lib/rubocop/cop/chef/deprecation/search_uses_positional_parameters.rb#126
  def integer_like_val?(val); end

  # Are the arguments in the passed node object positional
  #
  # @param node [RuboCop::AST::Node]
  # @return [Boolean]
  #
  # source://cookstyle//lib/rubocop/cop/chef/deprecation/search_uses_positional_parameters.rb#69
  def positional_arguments?(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/search_uses_positional_parameters.rb#41
RuboCop::Cop::Chef::Deprecations::SearchUsesPositionalParameters::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/search_uses_positional_parameters.rb#44
RuboCop::Cop::Chef::Deprecations::SearchUsesPositionalParameters::NAMED_PARAM_LOOKUP_TABLE = T.let(T.unsafe(nil), Array)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/search_uses_positional_parameters.rb#42
RuboCop::Cop::Chef::Deprecations::SearchUsesPositionalParameters::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/search_uses_positional_parameters.rb#60
RuboCop::Cop::Chef::Deprecations::SearchUsesPositionalParameters::VALID_TYPES = T.let(T.unsafe(nil), Array)

# The use_automatic_resource_name method was removed in Chef Infra Client 16. The resource name/provides should be set explicitly instead.
#
# @example
#
#   ### incorrect
#   module MyCookbook
#   class MyCookbookService < Chef::Resource
#   use_automatic_resource_name
#   provides :mycookbook_service
#
#   # some additional code
#   end
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/use_automatic_resource_name.rb#36
class RuboCop::Cop::Chef::Deprecations::UseAutomaticResourceName < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/use_automatic_resource_name.rb#43
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/use_automatic_resource_name.rb#40
RuboCop::Cop::Chef::Deprecations::UseAutomaticResourceName::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/use_automatic_resource_name.rb#41
RuboCop::Cop::Chef::Deprecations::UseAutomaticResourceName::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# use_inline_resources became the default in Chef Infra Client 13+ and no longer needs
# to be called in resources
#
# @example
#
#   ### incorrect
#   use_inline_resources
#   use_inline_resources if defined?(use_inline_resources)
#   use_inline_resources if respond_to?(:use_inline_resources)
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/use_inline_resources.rb#32
class RuboCop::Cop::Chef::Deprecations::UseInlineResourcesDefined < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/use_inline_resources.rb#39
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/use_inline_resources.rb#36
RuboCop::Cop::Chef::Deprecations::UseInlineResourcesDefined::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/use_inline_resources.rb#37
RuboCop::Cop::Chef::Deprecations::UseInlineResourcesDefined::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Chef Infra Client 16.5 introduced performance enhancements to Ruby library loading. Due to the underlying implementation of Ruby's `.to_yaml` method, it does not automatically load the `yaml` library and `YAML.dump()` should be used instead to properly load the `yaml` library.
#
# @example
#
#   ### incorrect
#   {"foo" => "bar"}.to_yaml
#
#   ### correct
#   YAML.dump({"foo" => "bar"})
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/use_yaml_dump.rb#32
class RuboCop::Cop::Chef::Deprecations::UseYamlDump < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/use_yaml_dump.rb#38
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/use_yaml_dump.rb#35
RuboCop::Cop::Chef::Deprecations::UseYamlDump::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/use_yaml_dump.rb#36
RuboCop::Cop::Chef::Deprecations::UseYamlDump::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The supports property was removed in Chef Infra Client 13 in favor of individual 'manage_home' and 'non_unique' properties.
#
# @example
#
#   ### incorrect
#   user "betty" do
#   supports({
#   manage_home: true,
#   non_unique: true
#   })
#   end
#
#   user 'betty' do
#   supports :manage_home => true
#   end
#
#   ### correct
#   user "betty" do
#   manage_home true
#   non_unique true
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/user_supports_property.rb#44
class RuboCop::Cop::Chef::Deprecations::UserDeprecatedSupportsProperty < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/user_supports_property.rb#50
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/user_supports_property.rb#48
RuboCop::Cop::Chef::Deprecations::UserDeprecatedSupportsProperty::MSG = T.let(T.unsafe(nil), String)

# The `Chef::REST` class was removed in Chef Infra Client 13.
#
# @example
#
#   ### incorrect
#   require 'chef/rest'
#   Chef::REST::RESTRequest.new(:GET, FOO, nil).call
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_rest.rb#30
class RuboCop::Cop::Chef::Deprecations::UsesChefRESTHelpers < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_rest.rb#48
  def on_const(node); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_rest.rb#42
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_rest.rb#34
  def require_rest?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_rest.rb#38
  def rest_const?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_rest.rb#31
RuboCop::Cop::Chef::Deprecations::UsesChefRESTHelpers::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/chef_rest.rb#32
RuboCop::Cop::Chef::Deprecations::UsesChefRESTHelpers::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Don't use deprecated Mixins no longer included in Chef Infra Client 14 and later.
#
# @example
#
#   ### incorrect
#   include Chef::Mixin::LanguageIncludeAttribute
#   include Chef::Mixin::RecipeDefinitionDSLCore
#   include Chef::Mixin::LanguageIncludeRecipe
#   include Chef::Mixin::Language
#   include Chef::DSL::Recipe::FullDSL
#   require 'chef/mixin/language'
#   require 'chef/mixin/language_include_attribute'
#   require 'chef/mixin/language_include_recipe'
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_mixins.rb#36
class RuboCop::Cop::Chef::Deprecations::UsesDeprecatedMixins < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_mixins.rb#47
  def deprecated_dsl?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_mixins.rb#43
  def deprecated_mixin?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_mixins.rb#51
  def dsl_mixin_require?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_mixins.rb#55
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_mixins.rb#40
RuboCop::Cop::Chef::Deprecations::UsesDeprecatedMixins::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/deprecated_mixins.rb#41
RuboCop::Cop::Chef::Deprecations::UsesDeprecatedMixins::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Use 'shell_out!' instead of the legacy 'run_command' or 'run_command_with_systems_locale' helpers for shelling out. The run_command helper was removed in Chef Infra Client 13.
#
# @example
#
#   ### incorrect
#   require 'chef/mixin/command'
#   include Chef::Mixin::Command
#
#   run_command('/bin/foo')
#   run_command_with_systems_locale('/bin/foo')
#
#   ### correct
#   shell_out!('/bin/foo')
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/run_command_helper.rb#36
class RuboCop::Cop::Chef::Deprecations::UsesRunCommandHelper < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/deprecation/run_command_helper.rb#40
  def calls_run_command?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/run_command_helper.rb#44
  def defines_run_command?(param0); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/run_command_helper.rb#42
  def include_mixin_command?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/run_command_helper.rb#46
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/run_command_helper.rb#41
  def require_mixin_command?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/run_command_helper.rb#37
RuboCop::Cop::Chef::Deprecations::UsesRunCommandHelper::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/run_command_helper.rb#38
RuboCop::Cop::Chef::Deprecations::UsesRunCommandHelper::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# In Chef Infra Client 13 the "file" variable for use within the verify property was replaced with the "path" variable.
#
# @example
#
#   ### incorrect
#   file '/etc/nginx.conf' do
#   verify 'nginx -t -c %{file}'
#   end
#
#   ### correct
#   file '/etc/nginx.conf' do
#   verify 'nginx -t -c %{path}'
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/verify_property_file_expansion.rb#36
class RuboCop::Cop::Chef::Deprecations::VerifyPropertyUsesFileExpansion < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::TargetChefVersion
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/verify_property_file_expansion.rb#45
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/verify_property_file_expansion.rb#43
RuboCop::Cop::Chef::Deprecations::VerifyPropertyUsesFileExpansion::MSG = T.let(T.unsafe(nil), String)

# The `windows_feature` resource no longer supports setting the `install_method` to `:servermanagercmd`. `:windows_feature_dism` or `:windows_feature_powershell` should be used instead.
#
# @example
#
#   ### incorrect
#   windows_feature 'DHCP' do
#   install_method :servermanagercmd
#   end
#
#   ### correct
#   windows_feature 'DHCP' do
#   install_method :windows_feature_dism
#   end
#
#   windows_feature 'DHCP' do
#   install_method :windows_feature_powershell
#   end
#
#   windows_feature_dism 'DHCP'
#
#   windows_feature_powershell 'DHCP'
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/windows_feature_servermanagercmd.rb#44
class RuboCop::Cop::Chef::Deprecations::WindowsFeatureServermanagercmd < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/windows_feature_servermanagercmd.rb#49
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/windows_feature_servermanagercmd.rb#47
RuboCop::Cop::Chef::Deprecations::WindowsFeatureServermanagercmd::MSG = T.let(T.unsafe(nil), String)

# In Chef Infra Client 13 and later the `windows_package` resource's `installer_type` property must be a symbol.
#
# @example
#
#   ### incorrect
#   windows_package 'AppveyorDeploymentAgent' do
#   source 'https://www.example.com/appveyor.msi'
#   installer_type 'msi'
#   options "/quiet /qn /norestart /log install.log"
#   end
#
#   ### correct
#   windows_package 'AppveyorDeploymentAgent' do
#   source 'https://www.example.com/appveyor.msi'
#   installer_type :msi
#   options "/quiet /qn /norestart /log install.log"
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/windows_package_installer_type_string.rb#40
class RuboCop::Cop::Chef::Deprecations::WindowsPackageInstallerTypeString < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/windows_package_installer_type_string.rb#46
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/windows_package_installer_type_string.rb#44
RuboCop::Cop::Chef::Deprecations::WindowsPackageInstallerTypeString::MSG = T.let(T.unsafe(nil), String)

# The :change action in the windows_task resource was removed when windows_task was added to Chef Infra Client 13+
# The default action of :create should can now be used to create an update tasks.
#
# @example
#
#   ### incorrect
#   windows_task 'chef ad-join leave start time' do
#   task_name 'chef ad-join leave'
#   start_day '06/09/2016'
#   start_time '01:00'
#   action [:change, :create]
#   end
#
#   ### correct
#   windows_task 'chef ad-join leave start time' do
#   task_name 'chef ad-join leave'
#   start_day '06/09/2016'
#   start_time '01:00'
#   action :create
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/windows_task_change_action.rb#43
class RuboCop::Cop::Chef::Deprecations::WindowsTaskChangeAction < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::TargetChefVersion
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/windows_task_change_action.rb#52
  def on_block(node); end

  private

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/windows_task_change_action.rb#66
  def check_action(ast_obj); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/windows_task_change_action.rb#50
RuboCop::Cop::Chef::Deprecations::WindowsTaskChangeAction::MSG = T.let(T.unsafe(nil), String)

# Use node['platform_version'] and node['kernel'] data instead of the deprecated Windows::VersionHelper helpers from the Windows cookbook.
#
# @example
#
#   ### incorrect
#   Windows::VersionHelper.nt_version
#   Windows::VersionHelper.server_version?
#   Windows::VersionHelper.core_version?
#   Windows::VersionHelper.workstation_version?
#
#   ### correct
#   node['platform_version'].to_f
#   node['kernel']['product_type'] == 'Server'
#   node['kernel']['server_core']
#   node['kernel']['product_type'] == 'Workstation'
#
# source://cookstyle//lib/rubocop/cop/chef/deprecation/windows_version_helpers.rb#38
class RuboCop::Cop::Chef::Deprecations::WindowsVersionHelpers < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::TargetChefVersion
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/windows_version_helpers.rb#51
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/deprecation/windows_version_helpers.rb#47
  def windows_helper?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/deprecation/windows_version_helpers.rb#44
RuboCop::Cop::Chef::Deprecations::WindowsVersionHelpers::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/deprecation/windows_version_helpers.rb#45
RuboCop::Cop::Chef::Deprecations::WindowsVersionHelpers::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://cookstyle//lib/rubocop/cop/chef/effortless/berksfile.rb#21
module RuboCop::Cop::Chef::Effortless; end

# Policyfiles should be used for cookbook dependency solving instead of a Berkshelf Berksfile.
#
# source://cookstyle//lib/rubocop/cop/chef/effortless/berksfile.rb#24
class RuboCop::Cop::Chef::Effortless::Berksfile < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp

  # source://cookstyle//lib/rubocop/cop/chef/effortless/berksfile.rb#29
  def on_new_investigation; end
end

# source://cookstyle//lib/rubocop/cop/chef/effortless/berksfile.rb#27
RuboCop::Cop::Chef::Effortless::Berksfile::MSG = T.let(T.unsafe(nil), String)

# Chef Vault is not supported in the Effortless pattern, so usage of Chef Vault must be shifted to another secrets management solution before leveraging the Effortless pattern.
#
# @example
#
#   ### incorrect
#   require 'chef-vault'
#
#   ### incorrect
#   ChefVault::Item
#
#   ### incorrect
#   include_recipe 'chef-vault'
#
#   ### incorrect
#   chef_gem 'chef-vault'
#
#   ### incorrect
#   chef_vault_item_for_environment(arg, arg1)
#
#   ### incorrect
#   chef_vault_item(arg, arg1)
#
# source://cookstyle//lib/rubocop/cop/chef/effortless/chef_vault_used.rb#44
class RuboCop::Cop::Chef::Effortless::ChefVaultUsed < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/effortless/chef_vault_used.rb#67
  def chef_vault_item?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/effortless/chef_vault_used.rb#63
  def chef_vault_item_for_environment?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/effortless/chef_vault_used.rb#78
  def on_const(node); end

  # source://cookstyle//lib/rubocop/cop/chef/effortless/chef_vault_used.rb#71
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/effortless/chef_vault_used.rb#52
  def require?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/effortless/chef_vault_used.rb#57
  def vault_const?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/effortless/chef_vault_used.rb#45
RuboCop::Cop::Chef::Effortless::ChefVaultUsed::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/effortless/chef_vault_used.rb#46
RuboCop::Cop::Chef::Effortless::ChefVaultUsed::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Data bags cannot be used with the Effortless Infra pattern
#
# @example
#
#   ### incorrect
#   data_bag_item('admins', login)
#   data_bag(data_bag_name)
#
# source://cookstyle//lib/rubocop/cop/chef/effortless/data_bags.rb#29
class RuboCop::Cop::Chef::Effortless::CookbookUsesDatabags < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/effortless/data_bags.rb#33
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/effortless/data_bags.rb#30
RuboCop::Cop::Chef::Effortless::CookbookUsesDatabags::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/effortless/data_bags.rb#31
RuboCop::Cop::Chef::Effortless::CookbookUsesDatabags::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Neither Policyfiles or Effortless Infra which is based on Policyfiles supports Chef Environments
#
# @example
#
#   ### incorrect
#   node.environment == "production"
#   node.chef_environment == "production"
#
# source://cookstyle//lib/rubocop/cop/chef/effortless/node_environment.rb#30
class RuboCop::Cop::Chef::Effortless::CookbookUsesEnvironments < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/effortless/node_environment.rb#34
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/effortless/node_environment.rb#31
RuboCop::Cop::Chef::Effortless::CookbookUsesEnvironments::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/effortless/node_environment.rb#32
RuboCop::Cop::Chef::Effortless::CookbookUsesEnvironments::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Effortless Infra does not support Policyfile's Policygroup feature
#
# @example
#
#   ### incorrect
#   node.policy_group == "foo"
#
# source://cookstyle//lib/rubocop/cop/chef/effortless/node_policygroup.rb#29
class RuboCop::Cop::Chef::Effortless::CookbookUsesPolicygroups < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/effortless/node_policygroup.rb#33
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/effortless/node_policygroup.rb#30
RuboCop::Cop::Chef::Effortless::CookbookUsesPolicygroups::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/effortless/node_policygroup.rb#31
RuboCop::Cop::Chef::Effortless::CookbookUsesPolicygroups::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Neither Policyfiles or Effortless Infra which is based on Policyfiles supports Chef Infra Roles
#
# @example
#
#   ### incorrect
#   node.role?('web_server')
#   node.roles.include?('web_server')
#
# source://cookstyle//lib/rubocop/cop/chef/effortless/node_roles.rb#30
class RuboCop::Cop::Chef::Effortless::CookbookUsesRoles < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/effortless/node_roles.rb#34
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/effortless/node_roles.rb#31
RuboCop::Cop::Chef::Effortless::CookbookUsesRoles::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/effortless/node_roles.rb#32
RuboCop::Cop::Chef::Effortless::CookbookUsesRoles::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Search is not compatible with the Effortless Infra pattern
#
# @example
#
#   ### incorrect
#   search(:node, 'run_list:recipe\[bacula\:\:server\]')
#
# source://cookstyle//lib/rubocop/cop/chef/effortless/search_used.rb#29
class RuboCop::Cop::Chef::Effortless::CookbookUsesSearch < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/effortless/search_used.rb#33
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/effortless/search_used.rb#30
RuboCop::Cop::Chef::Effortless::CookbookUsesSearch::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/effortless/search_used.rb#31
RuboCop::Cop::Chef::Effortless::CookbookUsesSearch::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Chef Vault is not supported in the Effortless pattern, so usage of Chef Vault must be shifted to another secrets management solution before leveraging the Effortless pattern.
#
# @example
#
#   ### incorrect
#   depends 'chef-vault'
#
# source://cookstyle//lib/rubocop/cop/chef/effortless/depends_chef_vault.rb#29
class RuboCop::Cop::Chef::Effortless::DependsChefVault < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/effortless/depends_chef_vault.rb#33
  def depends?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/effortless/depends_chef_vault.rb#38
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/effortless/depends_chef_vault.rb#30
RuboCop::Cop::Chef::Effortless::DependsChefVault::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/effortless/depends_chef_vault.rb#31
RuboCop::Cop::Chef::Effortless::DependsChefVault::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Policyfiles (and Effortless) do not use environments or roles so searching for those will need to be refactored before migrating to Policyfiles and the Effortless pattern.
#
# @example
#
#   ### incorrect
#   search(:node, 'chef_environment:foo')
#   search(:node, 'role:bar')
#
# source://cookstyle//lib/rubocop/cop/chef/effortless/search_for_environments_or_roles.rb#30
class RuboCop::Cop::Chef::Effortless::SearchForEnvironmentsOrRoles < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/effortless/search_for_environments_or_roles.rb#34
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/effortless/search_for_environments_or_roles.rb#31
RuboCop::Cop::Chef::Effortless::SearchForEnvironmentsOrRoles::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/effortless/search_for_environments_or_roles.rb#32
RuboCop::Cop::Chef::Effortless::SearchForEnvironmentsOrRoles::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://cookstyle//lib/rubocop/cop/chef/modernize/action_method_in_resource.rb#21
module RuboCop::Cop::Chef::Modernize; end

# Use the custom resource language's `action :my_action` blocks instead of creating actions with methods.
#
# @example
#
#   ### incorrect
#   def action_create
#   # :create action code here
#   end
#
#   ### correct
#   action :create do
#   # :create action code here
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/action_method_in_resource.rb#36
class RuboCop::Cop::Chef::Modernize::ActionMethodInResource < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/action_method_in_resource.rb#41
  def includes_poise?(param0); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/action_method_in_resource.rb#43
  def on_def(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/action_method_in_resource.rb#39
RuboCop::Cop::Chef::Modernize::ActionMethodInResource::MSG = T.let(T.unsafe(nil), String)

# The allowed actions can now be specified using the `allowed_actions` helper instead of using the @actions or @allowed_actions variables in the resource's initialize method. In general we recommend against writing HWRPs, but if HWRPs are necessary you should utilize as much of the resource DSL as possible.
#
# @example
#
#   ### incorrect
#   def initialize(*args)
#   super
#   @actions = [ :create, :add ]
#   end
#
#   # also bad
#   def initialize(*args)
#   super
#   @allowed_actions = [ :create, :add ]
#   end
#
#   ### correct
#   allowed_actions [ :create, :add ]
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/allowed_actions_initializer.rb#41
class RuboCop::Cop::Chef::Modernize::AllowedActionsFromInitialize < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/allowed_actions_initializer.rb#70
  def action_methods?(param0); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/allowed_actions_initializer.rb#72
  def initialize_method(param0); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/allowed_actions_initializer.rb#47
  def on_def(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/allowed_actions_initializer.rb#45
RuboCop::Cop::Chef::Modernize::AllowedActionsFromInitialize::MSG = T.let(T.unsafe(nil), String)

# The nokogiri gem ships in Chef Infra Client 12+ and does not need to be installed before being used
#
# @example
#
#   ### incorrect
#   chef_gem 'nokogiri'
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/chef_gem_nokogiri.rb#29
class RuboCop::Cop::Chef::Modernize::ChefGemNokogiri < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/chef_gem_nokogiri.rb#37
  def nokogiri_install?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/chef_gem_nokogiri.rb#41
  def on_block(node); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/chef_gem_nokogiri.rb#51
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/chef_gem_nokogiri.rb#34
RuboCop::Cop::Chef::Modernize::ChefGemNokogiri::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/chef_gem_nokogiri.rb#35
RuboCop::Cop::Chef::Modernize::ChefGemNokogiri::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# In Chef Infra Client 12.9 and later it is no longer necessary to call the class_eval method on the action class block.
#
# @example
#
#   ### incorrect
#   action_class.class_eval do
#   foo
#   end
#
#   ### correct
#   action_class do
#   foo
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/class_eval_action_class.rb#36
class RuboCop::Cop::Chef::Modernize::ClassEvalActionClass < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::TargetChefVersion
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/class_eval_action_class.rb#44
  def class_eval_action_class?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/class_eval_action_class.rb#52
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/class_eval_action_class.rb#42
RuboCop::Cop::Chef::Modernize::ClassEvalActionClass::MSG = T.let(T.unsafe(nil), String)

# Use ::File.exist?('/foo/bar') instead of the slower 'test -f /foo/bar' which requires shelling out
#
# @example
#
#   ### incorrect
#   only_if 'test -f /bin/foo'
#
#   ### correct
#   only_if { ::File.exist?('bin/foo') }
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/conditional_using_test.rb#32
class RuboCop::Cop::Chef::Modernize::ConditionalUsingTest < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/conditional_using_test.rb#42
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/conditional_using_test.rb#38
  def resource_conditional?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/conditional_using_test.rb#35
RuboCop::Cop::Chef::Modernize::ConditionalUsingTest::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/conditional_using_test.rb#36
RuboCop::Cop::Chef::Modernize::ConditionalUsingTest::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Use the cron_d resource that ships with Chef Infra Client 14.4+ instead of manually creating the file with template, file, or cookbook_file resources.
#
# @example
#
#   ### incorrect
#   template '/etc/cron.d/backup' do
#   source 'cron_backup_job.erb'
#   owner 'root'
#   group 'root'
#   mode '644'
#   end
#
#   cookbook_file '/etc/cron.d/backup' do
#   owner 'root'
#   group 'root'
#   mode '644'
#   end
#
#   file '/etc/cron.d/backup' do
#   content '*/30 * * * * backup /usr/local/bin/backup_script.sh'
#   owner 'root'
#   group 'root'
#   mode '644'
#   end
#
#   file '/etc/cron.d/blogs' do
#   action :delete
#   end
#
#   file "/etc/cron.d/#{job_name}" do
#   action :delete
#   end
#
#   file File.join('/etc/cron.d', job) do
#   action :delete
#   end
#
#   file 'delete old cron job' do
#   path '/etc/cron.d/backup'
#   action :delete
#   end
#
#   file 'delete old cron job' do
#   path "/etc/cron.d/#{job}"
#   action :delete
#   end
#
#   file 'delete old cron job' do
#   path ::File.join('/etc/cron.d', job)
#   action :delete
#   end
#
#   ### correct
#   cron_d 'backup' do
#   minute '1'
#   hour '1'
#   mailto 'sysadmins@example.com'
#   command '/usr/local/bin/backup_script.sh'
#   end
#
#   cron_d 'blogs' do
#   action :delete
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/cron_d_file_or_template.rb#86
class RuboCop::Cop::Chef::Modernize::CronDFileOrTemplate < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/modernize/cron_d_file_or_template.rb#94
  def file_or_template?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/cron_d_file_or_template.rb#102
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/cron_d_file_or_template.rb#92
RuboCop::Cop::Chef::Modernize::CronDFileOrTemplate::MSG = T.let(T.unsafe(nil), String)

# The cron_manage resource was renamed to cron_access in the 6.1 release of the cron cookbook, and later shipped in Chef Infra Client 14.4. The new resource name should be used.
#
# @example
#
#   ### incorrect
#   cron_manage 'mike'
#
#   ### correct
#   cron_access 'mike'
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/cron_manage_resource.rb#32
class RuboCop::Cop::Chef::Modernize::CronManageResource < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::TargetChefVersion
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/cron_manage_resource.rb#41
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/cron_manage_resource.rb#38
RuboCop::Cop::Chef::Modernize::CronManageResource::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/cron_manage_resource.rb#39
RuboCop::Cop::Chef::Modernize::CronManageResource::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# In HWRPs and LWRPs you defined attributes, but custom resources changed the name to be properties to avoid confusion with chef recipe attributes. When writing a custom resource they should be called properties even though the two are aliased.
#
# @example
#
#   ### incorrect
#   attribute :something, String
#
#   action :create do
#   # some action code because we're in a custom resource
#   end
#
#   ### correct
#   property :something, String
#
#   action :create do
#   # some action code because we're in a custom resource
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/resource_with_attributes.rb#40
class RuboCop::Cop::Chef::Modernize::CustomResourceWithAttributes < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/resource_with_attributes.rb#46
  def attribute?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/resource_with_attributes.rb#54
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/resource_with_attributes.rb#50
  def resource_actions?(param0); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/resource_with_attributes.rb#43
RuboCop::Cop::Chef::Modernize::CustomResourceWithAttributes::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/resource_with_attributes.rb#44
RuboCop::Cop::Chef::Modernize::CustomResourceWithAttributes::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Use the `data_bag_item` helper instead of `Chef::DataBagItem.load` or `Chef::EncryptedDataBagItem.load`.
#
# @example
#
#   ### incorrect
#   plain_text_data = Chef::DataBagItem.load('foo', 'bar')
#   encrypted_data = Chef::EncryptedDataBagItem.load('foo2', 'bar2')
#
#   ### correct
#   plain_text_data = data_bag_item('foo', 'bar')
#   encrypted_data = data_bag_item('foo2', 'bar2')
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/databag_helpers.rb#34
class RuboCop::Cop::Chef::Modernize::DatabagHelpers < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/databag_helpers.rb#40
  def data_bag_class_load?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/databag_helpers.rb#47
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/databag_helpers.rb#37
RuboCop::Cop::Chef::Modernize::DatabagHelpers::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/databag_helpers.rb#38
RuboCop::Cop::Chef::Modernize::DatabagHelpers::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# In Chef Infra Client 12.9 and later `action_class` can be used instead of `declare_action_class`.
#
# @example
#
#   ### incorrect
#   declare_action_class do
#   foo
#   end
#
#   ### correct
#   action_class do
#   foo
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/declare_action_class.rb#36
class RuboCop::Cop::Chef::Modernize::DeclareActionClass < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::TargetChefVersion
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/declare_action_class.rb#45
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/declare_action_class.rb#42
RuboCop::Cop::Chef::Modernize::DeclareActionClass::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/declare_action_class.rb#43
RuboCop::Cop::Chef::Modernize::DeclareActionClass::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The default actions can now be specified using the `default_action` helper instead of using the @action variable in the resource provider initialize method. In general we recommend against writing HWRPs, but if HWRPs are necessary you should utilize as much of the resource DSL as possible.
#
#  ### correct
#  default_action :create
#
# @example
#
#   ### incorrect
#   def initialize(*args)
#   super
#   @action = :create
#   end
#
#   ### incorrect
#   def initialize(*args)
#   super
#   @default_action = :create
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/default_action_initializer.rb#41
class RuboCop::Cop::Chef::Modernize::DefaultActionFromInitialize < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/default_action_initializer.rb#47
  def action_variable_assignment?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/default_action_initializer.rb#53
  def default_action_method?(param0); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/default_action_initializer.rb#51
  def initialize_method(param0); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/default_action_initializer.rb#55
  def on_ivasgn(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/default_action_initializer.rb#45
RuboCop::Cop::Chef::Modernize::DefaultActionFromInitialize::MSG = T.let(T.unsafe(nil), String)

# ChefSpec 7.1 and later auto generate ChefSpec matchers. Matchers in cookbooks can now be removed.
#
# @example
#
#   ### incorrect
#   if defined?(ChefSpec)
#   def create_yum_repository(resource_name)
#   ChefSpec::Matchers::ResourceMatcher.new(:yum_repository, :create, resource_name)
#   end
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/defines_chefspec_matchers.rb#33
class RuboCop::Cop::Chef::Modernize::DefinesChefSpecMatchers < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/defines_chefspec_matchers.rb#39
  def chefspec_matcher?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/defines_chefspec_matchers.rb#43
  def on_if(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/defines_chefspec_matchers.rb#37
RuboCop::Cop::Chef::Modernize::DefinesChefSpecMatchers::MSG = T.let(T.unsafe(nil), String)

# In 2016 with Chef Infra Client 12.5 Custom Resources were introduced as a way of writing reusable resource code that could be shipped in cookbooks. Custom Resources offer many advantages of legacy Definitions including unit testing with ChefSpec, input validation, actions, common properties like not_if/only_if, and resource reporting.
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/definitions.rb#24
class RuboCop::Cop::Chef::Modernize::Definitions < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers

  # source://cookstyle//lib/rubocop/cop/chef/modernize/definitions.rb#29
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/definitions.rb#27
RuboCop::Cop::Chef::Modernize::Definitions::MSG = T.let(T.unsafe(nil), String)

# Don't depend on the chef-vault cookbook made obsolete by Chef Infra Client 16.0. The chef-vault gem and helpers are now included in Chef Infra Client itself.
#
# @example
#
#   ### incorrect
#   depends 'chef-vault'
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/depends_chef_vault_cookbook.rb#29
class RuboCop::Cop::Chef::Modernize::DependsOnChefVaultCookbook < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/modernize/depends_chef_vault_cookbook.rb#39
  def legacy_depends?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/depends_chef_vault_cookbook.rb#43
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/depends_chef_vault_cookbook.rb#36
RuboCop::Cop::Chef::Modernize::DependsOnChefVaultCookbook::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/depends_chef_vault_cookbook.rb#37
RuboCop::Cop::Chef::Modernize::DependsOnChefVaultCookbook::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Don't depend on the chocolatey_source or chocolatey_config cookbooks made obsolete by Chef Infra Client 14.3. The chocolatey_source and chocolatey_config resources are now included in Chef Infra Client itself.
#
# @example
#
#   ### incorrect
#   depends 'chocolatey_source'
#   depends 'chocolatey_config'
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/depends_chocolatey_cookbooks.rb#30
class RuboCop::Cop::Chef::Modernize::DependsOnChocolateyCookbooks < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/modernize/depends_chocolatey_cookbooks.rb#40
  def legacy_depends?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/depends_chocolatey_cookbooks.rb#44
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/depends_chocolatey_cookbooks.rb#37
RuboCop::Cop::Chef::Modernize::DependsOnChocolateyCookbooks::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/depends_chocolatey_cookbooks.rb#38
RuboCop::Cop::Chef::Modernize::DependsOnChocolateyCookbooks::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Don't depend on the kernel_module cookbook made obsolete by Chef Infra Client 14.3. The kernel_module resource is now included in Chef Infra Client itself.
#
# @example
#
#   ### incorrect
#   depends 'kernel_module'
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/depends_kernel_module_cookbook.rb#29
class RuboCop::Cop::Chef::Modernize::DependsOnKernelModuleCookbook < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/modernize/depends_kernel_module_cookbook.rb#39
  def legacy_depends?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/depends_kernel_module_cookbook.rb#43
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/depends_kernel_module_cookbook.rb#36
RuboCop::Cop::Chef::Modernize::DependsOnKernelModuleCookbook::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/depends_kernel_module_cookbook.rb#37
RuboCop::Cop::Chef::Modernize::DependsOnKernelModuleCookbook::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Don't depend on the locale cookbook made obsolete by Chef Infra Client 14.5. The locale resource is now included in Chef Infra Client itself.
#
# @example
#
#   ### incorrect
#   depends 'locale'
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/depends_locale_cookbook.rb#29
class RuboCop::Cop::Chef::Modernize::DependsOnLocaleCookbook < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/modernize/depends_locale_cookbook.rb#39
  def legacy_depends?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/depends_locale_cookbook.rb#43
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/depends_locale_cookbook.rb#36
RuboCop::Cop::Chef::Modernize::DependsOnLocaleCookbook::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/depends_locale_cookbook.rb#37
RuboCop::Cop::Chef::Modernize::DependsOnLocaleCookbook::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Don't depend on the `openssl` cookbook which was made obsolete by Chef Infra Client 14.4. All `openssl_*` resources are now included directly in Chef Infra Client.
#
# @example
#
#   ### incorrect
#   depends 'openssl'
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/depends_openssl_cookbook.rb#29
class RuboCop::Cop::Chef::Modernize::DependsOnOpensslCookbook < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/modernize/depends_openssl_cookbook.rb#39
  def legacy_depends?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/depends_openssl_cookbook.rb#43
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/depends_openssl_cookbook.rb#36
RuboCop::Cop::Chef::Modernize::DependsOnOpensslCookbook::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/depends_openssl_cookbook.rb#37
RuboCop::Cop::Chef::Modernize::DependsOnOpensslCookbook::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Don't depend on the timezone_lwrp cookbook made obsolete by Chef Infra Client 14.6. The timezone resource is now included in Chef Infra Client itself.
#
# @example
#
#   ### incorrect
#   depends 'timezone_lwrp'
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/depends_timezone_lwrp_cookbook.rb#29
class RuboCop::Cop::Chef::Modernize::DependsOnTimezoneLwrpCookbook < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/modernize/depends_timezone_lwrp_cookbook.rb#39
  def legacy_depends?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/depends_timezone_lwrp_cookbook.rb#43
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/depends_timezone_lwrp_cookbook.rb#36
RuboCop::Cop::Chef::Modernize::DependsOnTimezoneLwrpCookbook::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/depends_timezone_lwrp_cookbook.rb#37
RuboCop::Cop::Chef::Modernize::DependsOnTimezoneLwrpCookbook::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Don't depend on the windows_firewall cookbook made obsolete by Chef Infra Client 14.7. The windows_firewall resource is now included in Chef Infra Client itself.
#
# @example
#
#   ### incorrect
#   depends 'windows_firewall'
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/depends_windows_firewall_cookbook.rb#29
class RuboCop::Cop::Chef::Modernize::DependsOnWindowsFirewallCookbook < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/modernize/depends_windows_firewall_cookbook.rb#39
  def legacy_depends?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/depends_windows_firewall_cookbook.rb#43
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/depends_windows_firewall_cookbook.rb#36
RuboCop::Cop::Chef::Modernize::DependsOnWindowsFirewallCookbook::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/depends_windows_firewall_cookbook.rb#37
RuboCop::Cop::Chef::Modernize::DependsOnWindowsFirewallCookbook::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Don't depend on the zypper cookbook as the zypper_repository resource is built into Chef Infra Client 13.3+
#
# @example
#
#   ### incorrect
#   depends 'zypper'
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/depends_zypper_cookbook.rb#29
class RuboCop::Cop::Chef::Modernize::DependsOnZypperCookbook < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/modernize/depends_zypper_cookbook.rb#43
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/depends_zypper_cookbook.rb#39
  def zypper_depends?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/depends_zypper_cookbook.rb#36
RuboCop::Cop::Chef::Modernize::DependsOnZypperCookbook::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/depends_zypper_cookbook.rb#37
RuboCop::Cop::Chef::Modernize::DependsOnZypperCookbook::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Chef Infra Client 12.4+ includes the Chef::DSL::Recipe in the resource and provider classed by default so there is no need to include this DSL in your resources or providers.
#
# @example
#
#   ### incorrect
#   include Chef::DSL::Recipe
#   include Chef::DSL::IncludeRecipe
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/dsl_include_in_resource.rb#30
class RuboCop::Cop::Chef::Modernize::DslIncludeInResource < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/dsl_include_in_resource.rb#37
  def dsl_include?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/dsl_include_in_resource.rb#44
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/dsl_include_in_resource.rb#34
RuboCop::Cop::Chef::Modernize::DslIncludeInResource::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/dsl_include_in_resource.rb#35
RuboCop::Cop::Chef::Modernize::DslIncludeInResource::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# There is no need for an empty initialize method in a resource
#
# @example
#
#   ### incorrect
#   def initialize(*args)
#   super
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/empty_resource_initialize.rb#31
class RuboCop::Cop::Chef::Modernize::EmptyResourceInitializeMethod < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/empty_resource_initialize.rb#37
  def empty_initialize?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/empty_resource_initialize.rb#41
  def on_def(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/empty_resource_initialize.rb#35
RuboCop::Cop::Chef::Modernize::EmptyResourceInitializeMethod::MSG = T.let(T.unsafe(nil), String)

# Instead of using the execute resource to run the `apt-get update` use Chef Infra Client's built-n apt_update resource which is available in Chef Infra Client 12.7 and later.
#
# @example
#
#   ### incorrect
#   execute 'apt-get update'
#
#   execute 'Apt all the apt cache' do
#   command 'apt-get update'
#   end
#
#   execute 'some execute resource' do
#   notifies :run, 'execute[apt-get update]', :immediately
#   end
#
#   ### correct
#   apt_update
#
#   apt_update 'update apt cache'
#
#   execute 'some execute resource' do
#   notifies :update, 'apt_update[update apt cache]', :immediately
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/execute_apt_update.rb#46
class RuboCop::Cop::Chef::Modernize::ExecuteAptUpdate < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/execute_apt_update.rb#52
  def execute_apt_update?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/execute_apt_update.rb#60
  def execute_command?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/execute_apt_update.rb#56
  def notification_property?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/execute_apt_update.rb#64
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/execute_apt_update.rb#49
RuboCop::Cop::Chef::Modernize::ExecuteAptUpdate::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/execute_apt_update.rb#50
RuboCop::Cop::Chef::Modernize::ExecuteAptUpdate::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Chef Infra Client 14.0 and later includes :create, :delete, and :configure actions with the full idempotency of the windows_service resource. See the windows_service documentation at https://docs.chef.io/resources/windows_service for additional details on creating services with the windows_service resource.
#
# @example
#
#   ### incorrect
#   execute "Delete chef-client service" do
#   command "sc.exe delete chef-client"
#   action :run
#   end
#
#   ### correct
#   windows_service 'chef-client' do
#   action :delete
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/execute_sc_exe.rb#37
class RuboCop::Cop::Chef::Modernize::ExecuteScExe < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::TargetChefVersion

  # block execute resources
  #
  # source://cookstyle//lib/rubocop/cop/chef/modernize/execute_sc_exe.rb#56
  def on_block(node); end

  # non block execute resources
  #
  # source://cookstyle//lib/rubocop/cop/chef/modernize/execute_sc_exe.rb#47
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/execute_sc_exe.rb#43
RuboCop::Cop::Chef::Modernize::ExecuteScExe::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/execute_sc_exe.rb#44
RuboCop::Cop::Chef::Modernize::ExecuteScExe::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Chef Infra Client 15.5 and later include a chef_sleep resource that should be used to sleep between executing resources if necessary instead of using the bash or execute resources to run the sleep command.
#
# @example
#
#   ### incorrect
#   execute "sleep 60" do
#   command "sleep 60"
#   action :run
#   end
#
#   bash 'sleep' do
#   user 'root'
#   cwd '/tmp'
#   code 'sleep 60'
#   end
#
#   ### correct
#   chef_sleep '60'
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/execute_sleep.rb#41
class RuboCop::Cop::Chef::Modernize::ExecuteSleep < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::TargetChefVersion

  # block execute resources
  #
  # source://cookstyle//lib/rubocop/cop/chef/modernize/execute_sleep.rb#59
  def on_block(node); end

  # non block execute resources
  #
  # source://cookstyle//lib/rubocop/cop/chef/modernize/execute_sleep.rb#51
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/execute_sleep.rb#47
RuboCop::Cop::Chef::Modernize::ExecuteSleep::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/execute_sleep.rb#48
RuboCop::Cop::Chef::Modernize::ExecuteSleep::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Chef Infra Client 14.0 and later includes a sysctl resource that should be used to idempotently load sysctl values instead of templating files and using execute to load them.
#
# @example
#
#   ### incorrect
#   file '/etc/sysctl.d/ipv4.conf' do
#   notifies :run, 'execute[sysctl -p /etc/sysctl.d/ipv4.conf]', :immediately
#   content '9000 65500'
#   end
#
#   execute 'sysctl -p /etc/sysctl.d/ipv4.conf' do
#   action :nothing
#   end
#
#   ### correct
#   sysctl 'net.ipv4.ip_local_port_range' do
#   value '9000 65500'
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/execute_sysctl.rb#41
class RuboCop::Cop::Chef::Modernize::ExecuteSysctl < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::TargetChefVersion

  # block execute resources
  #
  # source://cookstyle//lib/rubocop/cop/chef/modernize/execute_sysctl.rb#59
  def on_block(node); end

  # non block execute resources
  #
  # source://cookstyle//lib/rubocop/cop/chef/modernize/execute_sysctl.rb#51
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/execute_sysctl.rb#47
RuboCop::Cop::Chef::Modernize::ExecuteSysctl::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/execute_sysctl.rb#48
RuboCop::Cop::Chef::Modernize::ExecuteSysctl::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Instead of using the execute or powershell_script resources to run the `tzutil` command, use Chef Infra Client's built-in timezone resource which is available in Chef Infra Client 14.6 and later.
#
# @example
#
#   ### incorrect
#   execute 'set tz' do
#   command 'tzutil.exe /s UTC'
#   end
#
#   execute 'tzutil /s UTC'
#
#   powershell_script 'set windows timezone' do
#   code "tzutil.exe /s UTC"
#   not_if { shell_out('tzutil.exe /g').stdout.include?('UTC') }
#   end
#
#   ### correct
#   timezone 'UTC'
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/execute_tzutil.rb#41
class RuboCop::Cop::Chef::Modernize::ExecuteTzUtil < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/modernize/execute_tzutil.rb#50
  def execute_resource?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/execute_tzutil.rb#61
  def on_block(node); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/execute_tzutil.rb#54
  def on_send(node); end

  private

  # @return [Boolean]
  #
  # source://cookstyle//lib/rubocop/cop/chef/modernize/execute_tzutil.rb#75
  def calls_tzutil?(ast_obj); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/execute_tzutil.rb#47
RuboCop::Cop::Chef::Modernize::ExecuteTzUtil::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/execute_tzutil.rb#48
RuboCop::Cop::Chef::Modernize::ExecuteTzUtil::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Remove legacy code comments that disable Foodcritic rules. These comments are no longer necessary if you've migrated from Foodcritic to Cookstyle for cookbook linting.
#
# @example
#
#   ### incorrect
#   # ~FC013
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/foodcritic_comments.rb#29
class RuboCop::Cop::Chef::Modernize::FoodcriticComments < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/foodcritic_comments.rb#34
  def on_new_investigation; end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/foodcritic_comments.rb#32
RuboCop::Cop::Chef::Modernize::FoodcriticComments::MSG = T.let(T.unsafe(nil), String)

# if defined?(default_action) is no longer necessary in Chef Resources as default_action shipped in Chef 10.8.
#
# @example
#
#   ### incorrect
#   default_action :foo if defined?(default_action)
#
#   ### correct
#   default_action :foo
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/if_provides_default_action.rb#32
class RuboCop::Cop::Chef::Modernize::IfProvidesDefaultAction < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # @return [Boolean]
  #
  # source://cookstyle//lib/rubocop/cop/chef/modernize/if_provides_default_action.rb#37
  def on_defined?(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/if_provides_default_action.rb#35
RuboCop::Cop::Chef::Modernize::IfProvidesDefaultAction::MSG = T.let(T.unsafe(nil), String)

# For many users the apt::default cookbook is used only to update apt's package cache. Chef Infra Client 12.7 and later include an apt_update resource which should be used to perform this instead. Keep in mind that some users will want to stick with the apt::default recipe as it also installs packages necessary for using https repositories on Debian systems and manages some configuration files.
#
# @example
#
#   ### incorrect
#   include_recipe 'apt::default'
#   include_recipe 'apt'
#
#   ### correct
#   apt_update
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/apt_default_recipe.rb#33
class RuboCop::Cop::Chef::Modernize::IncludingAptDefaultRecipe < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/modernize/apt_default_recipe.rb#41
  def apt_recipe_usage?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/apt_default_recipe.rb#45
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/apt_default_recipe.rb#38
RuboCop::Cop::Chef::Modernize::IncludingAptDefaultRecipe::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/apt_default_recipe.rb#39
RuboCop::Cop::Chef::Modernize::IncludingAptDefaultRecipe::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# There is no need to include Chef::Mixin::ShellOut or Chef::Mixin::PowershellOut in resources or providers as this is already done by Chef Infra Client 12.4+.
#
# @example
#
#   ### incorrect
#   require 'chef/mixin/shell_out'
#   include Chef::Mixin::ShellOut
#   require 'chef/mixin/powershell_out'
#   include Chef::Mixin::PowershellOut
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/includes_mixin_shellout.rb#32
class RuboCop::Cop::Chef::Modernize::IncludingMixinShelloutInResources < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/includes_mixin_shellout.rb#59
  def check_for_offenses(node); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/includes_mixin_shellout.rb#47
  def hwrp_classes?(param0); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/includes_mixin_shellout.rb#39
  def include_shellout?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/includes_mixin_shellout.rb#70
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/includes_mixin_shellout.rb#43
  def require_shellout?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/includes_mixin_shellout.rb#36
RuboCop::Cop::Chef::Modernize::IncludingMixinShelloutInResources::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/includes_mixin_shellout.rb#37
RuboCop::Cop::Chef::Modernize::IncludingMixinShelloutInResources::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The Ohai default recipe previously allowed a user to ship custom Ohai plugins to a system by including them in a directory in the Ohai cookbook. This functionality was replaced with the ohai_plugin resource, which should be used instead as it doesn't require forking the ohai cookbook.
#
# @example
#
#   ### incorrect
#   include_recipe 'ohai::default'
#   include_recipe 'ohai'
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/ohai_default_recipe.rb#30
class RuboCop::Cop::Chef::Modernize::IncludingOhaiDefaultRecipe < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/modernize/ohai_default_recipe.rb#34
  def ohai_recipe_usage?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/ohai_default_recipe.rb#38
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/ohai_default_recipe.rb#31
RuboCop::Cop::Chef::Modernize::IncludingOhaiDefaultRecipe::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/ohai_default_recipe.rb#32
RuboCop::Cop::Chef::Modernize::IncludingOhaiDefaultRecipe::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Don't include the windows default recipe that is either full of gem install that are part of the Chef Infra Client, or empty (depends on version).
#
# @example
#
#   ### incorrect
#   include_recipe 'windows::default'
#   include_recipe 'windows'
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/windows_default_recipe.rb#30
class RuboCop::Cop::Chef::Modernize::IncludingWindowsDefaultRecipe < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/windows_default_recipe.rb#41
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/windows_default_recipe.rb#37
  def windows_recipe_usage?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/windows_default_recipe.rb#34
RuboCop::Cop::Chef::Modernize::IncludingWindowsDefaultRecipe::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/windows_default_recipe.rb#35
RuboCop::Cop::Chef::Modernize::IncludingWindowsDefaultRecipe::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# There have been many different valid community site / Supermarket URLs to use in a cookbook's Berksfile. These old URLs continue to function via redirects, but should be updated to point to the latest Supermarket URL.
#
# @example
#
#   ### incorrect
#   source 'http://community.opscode.com/api/v3'
#   source 'https://supermarket.getchef.com'
#   source 'https://api.berkshelf.com'
#   site :opscode
#
#   ### correct
#   source 'https://supermarket.chef.io'
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/berksfile_source.rb#35
class RuboCop::Cop::Chef::Modernize::LegacyBerksfileSource < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/berksfile_source.rb#41
  def berksfile_site?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/berksfile_source.rb#45
  def berksfile_source?(param0 = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://cookstyle//lib/rubocop/cop/chef/modernize/berksfile_source.rb#49
  def old_berkshelf_url?(url); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/berksfile_source.rb#53
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/berksfile_source.rb#38
RuboCop::Cop::Chef::Modernize::LegacyBerksfileSource::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/berksfile_source.rb#39
RuboCop::Cop::Chef::Modernize::LegacyBerksfileSource::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Use the archive_file resource built into Chef Infra Client 15+ instead of the libarchive_file resource from the libarchive cookbook.
#
# @example
#
#   ### incorrect
#   depends 'libarchive'
#
#   libarchive_file "C:\file.zip" do
#   path 'C:\expand_here'
#   end
#
#   ### correct
#   archive_file "C:\file.zip" do
#   path 'C:\expand_here'
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/libarchive_file.rb#38
class RuboCop::Cop::Chef::Modernize::LibarchiveFileResource < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::TargetChefVersion
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/libarchive_file.rb#47
  def notification_property?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/libarchive_file.rb#51
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/libarchive_file.rb#44
RuboCop::Cop::Chef::Modernize::LibarchiveFileResource::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/libarchive_file.rb#45
RuboCop::Cop::Chef::Modernize::LibarchiveFileResource::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The mac_os_x_userdefaults resource was renamed to macos_userdefaults when it was added to Chef Infra Client 14.0. The new resource name should be used.
#
# @example
#
#   ### incorrect
#   mac_os_x_userdefaults 'full keyboard access to all controls' do
#   domain 'AppleKeyboardUIMode'
#   global true
#   value '2'
#   end
#
#   ### correct
#   macos_userdefaults 'full keyboard access to all controls' do
#   domain 'AppleKeyboardUIMode'
#   global true
#   value '2'
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/macos_user_defaults.rb#40
class RuboCop::Cop::Chef::Modernize::MacOsXUserdefaults < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::TargetChefVersion
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/macos_user_defaults.rb#49
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/macos_user_defaults.rb#46
RuboCop::Cop::Chef::Modernize::MacOsXUserdefaults::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/macos_user_defaults.rb#47
RuboCop::Cop::Chef::Modernize::MacOsXUserdefaults::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Use Chef InSpec for testing instead of the Minitest Handler cookbook pattern.
#
# @example
#
#   ### incorrect
#   depends 'minitest-handler'
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/minitest_handler_usage.rb#29
class RuboCop::Cop::Chef::Modernize::MinitestHandlerUsage < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/minitest_handler_usage.rb#36
  def minitest_depends?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/minitest_handler_usage.rb#40
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/minitest_handler_usage.rb#33
RuboCop::Cop::Chef::Modernize::MinitestHandlerUsage::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/minitest_handler_usage.rb#34
RuboCop::Cop::Chef::Modernize::MinitestHandlerUsage::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Use node['init_package'] to check for systemd instead of reading the contents of '/proc/1/comm'
#
# @example
#
#   ### incorrect
#   ::File.open('/proc/1/comm').gets.chomp == 'systemd'
#   ::File.open('/proc/1/comm').chomp == 'systemd'
#   File.open('/proc/1/comm').gets.chomp == 'systemd'
#   File.open('/proc/1/comm').chomp == 'systemd'
#   IO.read('/proc/1/comm').chomp == 'systemd'
#   IO.read('/proc/1/comm').gets.chomp == 'systemd'
#   ::IO.read('/proc/1/comm').chomp == 'systemd'
#   ::IO.read('/proc/1/comm').gets.chomp == 'systemd'
#   File.exist?('/proc/1/comm') && File.open('/proc/1/comm').chomp == 'systemd'
#   only_if 'test -f /bin/systemctl && /bin/systemctl'
#
#   ### correct
#   node['init_package'] == 'systemd'
#   only_if { node['init_package'] == 'systemd' }
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/node_init_package.rb#42
class RuboCop::Cop::Chef::Modernize::NodeInitPackage < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/node_init_package.rb#59
  def compare_init_system?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/node_init_package.rb#48
  def file_reads_proc_1_comm?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/node_init_package.rb#65
  def file_systemd_conditional?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/node_init_package.rb#69
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/node_init_package.rb#52
  def proc_1_comm_exists?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/node_init_package.rb#45
RuboCop::Cop::Chef::Modernize::NodeInitPackage::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/node_init_package.rb#46
RuboCop::Cop::Chef::Modernize::NodeInitPackage::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Use `node.role?('foo')` to check if a node includes a role instead of `node['roles'].include?('foo')`.
#
# @example
#
#   ### incorrect
#   node['roles'].include?('foo')
#
#   ### correct
#   node.role?('foo')
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/node_roles_include.rb#32
class RuboCop::Cop::Chef::Modernize::NodeRolesInclude < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/node_roles_include.rb#38
  def node_role_include?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/node_roles_include.rb#46
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/node_roles_include.rb#35
RuboCop::Cop::Chef::Modernize::NodeRolesInclude::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/node_roles_include.rb#36
RuboCop::Cop::Chef::Modernize::NodeRolesInclude::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The openssl_rsa_key resource was renamed to openssl_rsa_private_key in Chef Infra Client 14.0. The new resource name should be used.
#
# @example
#
#   ### incorrect
#   openssl_rsa_key '/etc/httpd/ssl/server.key' do
#   key_length 2048
#   end
#
#   ### correct
#   openssl_rsa_private_key '/etc/httpd/ssl/server.key' do
#   key_length 2048
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/openssl_rsa_key_resource.rb#36
class RuboCop::Cop::Chef::Modernize::OpensslRsaKeyResource < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::TargetChefVersion
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/openssl_rsa_key_resource.rb#45
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/openssl_rsa_key_resource.rb#42
RuboCop::Cop::Chef::Modernize::OpensslRsaKeyResource::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/openssl_rsa_key_resource.rb#43
RuboCop::Cop::Chef::Modernize::OpensslRsaKeyResource::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The openssl_x509 resource was renamed to openssl_x509_certificate in Chef Infra Client 14.4. The new resource name should be used.
#
# @example
#
#   ### incorrect
#   openssl_x509 '/etc/httpd/ssl/mycert.pem' do
#   common_name 'www.f00bar.com'
#   org 'Foo Bar'
#   org_unit 'Lab'
#   country 'US'
#   end
#
#   ### correct
#   openssl_x509_certificate '/etc/httpd/ssl/mycert.pem' do
#   common_name 'www.f00bar.com'
#   org 'Foo Bar'
#   org_unit 'Lab'
#   country 'US'
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/openssl_x509_resource.rb#42
class RuboCop::Cop::Chef::Modernize::OpensslX509Resource < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::TargetChefVersion
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/openssl_x509_resource.rb#51
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/openssl_x509_resource.rb#48
RuboCop::Cop::Chef::Modernize::OpensslX509Resource::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/openssl_x509_resource.rb#49
RuboCop::Cop::Chef::Modernize::OpensslX509Resource::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The osx_config_profile resource was renamed to osx_profile. The new resource name should be used.
#
# @example
#
#   ### incorrect
#   osx_config_profile 'Install screensaver profile' do
#   profile 'screensaver/com.company.screensaver.mobileconfig'
#   end
#
#   ### correct
#   osx_profile 'Install screensaver profile' do
#   profile 'screensaver/com.company.screensaver.mobileconfig'
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/osx_config_profile_resource.rb#36
class RuboCop::Cop::Chef::Modernize::OsxConfigProfileResource < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/osx_config_profile_resource.rb#42
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/osx_config_profile_resource.rb#39
RuboCop::Cop::Chef::Modernize::OsxConfigProfileResource::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/osx_config_profile_resource.rb#40
RuboCop::Cop::Chef::Modernize::OsxConfigProfileResource::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# PowerShell is already set as the default guard interpreter for `powershell_script` and `batch` resources in Chef Infra Client 13 and later and does not need to be specified.
#
# @example
#
#   ### incorrect
#   powershell_script 'Create Directory' do
#   code "New-Item -ItemType Directory -Force -Path C:\mydir"
#   guard_interpreter :powershell_script
#   end
#
#   batch 'Create Directory' do
#   code "mkdir C:\mydir"
#   guard_interpreter :powershell_script
#   end
#
#   ### correct
#   powershell_script 'Create Directory' do
#   code "New-Item -ItemType Directory -Force -Path C:\mydir"
#   end
#
#   batch 'Create Directory' do
#   code "mkdir C:\mydir"
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/powershell_guard_interpreter.rb#46
class RuboCop::Cop::Chef::Modernize::PowerShellGuardInterpreter < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::TargetChefVersion
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/powershell_guard_interpreter.rb#56
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/powershell_guard_interpreter.rb#54
RuboCop::Cop::Chef::Modernize::PowerShellGuardInterpreter::MSG = T.let(T.unsafe(nil), String)

# Use the powershell_package resource built into Chef Infra Client instead of the powershell_script resource to run Install-Package
#
#  ### correct
#  powershell_package 'docker'
#
# @example
#
#   ### incorrect
#   powershell_script 'Expand website' do
#   code 'Install-Package -Name docker'
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/powershell_install_package.rb#34
class RuboCop::Cop::Chef::Modernize::PowershellInstallPackage < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/modernize/powershell_install_package.rb#42
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/powershell_install_package.rb#40
RuboCop::Cop::Chef::Modernize::PowershellInstallPackage::MSG = T.let(T.unsafe(nil), String)

# Use the windows_feature resource built into Chef Infra Client 14+ instead of the powershell_script resource to run Install-WindowsFeature or Add-WindowsFeature
#
#  ### correct
#  windows_feature 'Net-framework-Core' do
#    action :install
#    install_method :windows_feature_powershell
#  end
#
# @example
#
#   ### incorrect
#   powershell_script 'Install Feature' do
#   code 'Install-WindowsFeature -Name "Net-framework-Core"'
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/powershell_install_windowsfeature.rb#37
class RuboCop::Cop::Chef::Modernize::PowershellInstallWindowsFeature < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/modernize/powershell_install_windowsfeature.rb#45
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/powershell_install_windowsfeature.rb#43
RuboCop::Cop::Chef::Modernize::PowershellInstallWindowsFeature::MSG = T.let(T.unsafe(nil), String)

# Use the archive_file resource built into Chef Infra Client 15+ instead of using the powershell_script resource to run Expand-Archive
#
# @example
#
#   ### incorrect
#   powershell_script 'Expand website' do
#   code 'Expand-Archive "C:\\file.zip" -DestinationPath "C:\\inetpub\\wwwroot\\" -Force'
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/powershell_expand_archive.rb#31
class RuboCop::Cop::Chef::Modernize::PowershellScriptExpandArchive < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/modernize/powershell_expand_archive.rb#39
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/powershell_expand_archive.rb#37
RuboCop::Cop::Chef::Modernize::PowershellScriptExpandArchive::MSG = T.let(T.unsafe(nil), String)

# When using properties in a custom resource you should use name_property not the legacy name_attribute from the days of attributes
#
# @example
#
#   ### incorrect
#   property :bob, String, name_attribute: true
#
#   ### correct
#   property :bob, String, name_property: true
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/property_with_name_attribute.rb#32
class RuboCop::Cop::Chef::Modernize::PropertyWithNameAttribute < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/property_with_name_attribute.rb#45
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/property_with_name_attribute.rb#41
  def property_with_name_attribute?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/property_with_name_attribute.rb#35
RuboCop::Cop::Chef::Modernize::PropertyWithNameAttribute::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/property_with_name_attribute.rb#36
RuboCop::Cop::Chef::Modernize::PropertyWithNameAttribute::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Provides should be set using the `provides` resource DSL method instead of instead of setting @provides in the initialize method.
#
# @example
#
#   ### incorrect
#   def initialize(*args)
#   super
#   @provides = :foo
#   end
#
#   ### correct
#   provides :foo
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/provides_initializer.rb#35
class RuboCop::Cop::Chef::Modernize::ProvidesFromInitialize < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/provides_initializer.rb#63
  def initialize_method(param0); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/provides_initializer.rb#45
  def on_ivasgn(node); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/provides_initializer.rb#41
  def provides_assignment?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/provides_initializer.rb#61
  def provides_method?(param0); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/provides_initializer.rb#39
RuboCop::Cop::Chef::Modernize::ProvidesFromInitialize::MSG = T.let(T.unsafe(nil), String)

# The hostname, build_essential, chef_gem, and ohai_hint resources include 'compile_time' properties, which should be used to force the resources to run at compile time by setting `compile_time true`.
#
# @example
#
#   ### incorrect
#   build_essential 'install build tools' do
#   action :nothing
#   end.run_action(:install)
#
#   ### correct
#   build_essential 'install build tools' do
#   compile_time true
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/compile_time_resources.rb#36
class RuboCop::Cop::Chef::Modernize::ResourceForcingCompileTime < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/modernize/compile_time_resources.rb#40
  def compile_time_resource?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/compile_time_resources.rb#44
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/compile_time_resources.rb#37
RuboCop::Cop::Chef::Modernize::ResourceForcingCompileTime::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/compile_time_resources.rb#38
RuboCop::Cop::Chef::Modernize::ResourceForcingCompileTime::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The resource name can now be specified using the `resource_name` helper instead of using the @resource_name variable in the resource provider initialize method. In general we recommend against writing HWRPs, but if HWRPs are necessary you should utilize as much of the resource DSL as possible.
#
#  ### correct
#  resource_name :create
#
# @example
#
#   ### incorrect
#   def initialize(*args)
#   super
#   @resource_name = :foo
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/resource_name_initializer.rb#35
class RuboCop::Cop::Chef::Modernize::ResourceNameFromInitialize < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/resource_name_initializer.rb#58
  def initialize_method(param0); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/resource_name_initializer.rb#41
  def on_def(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/resource_name_initializer.rb#39
RuboCop::Cop::Chef::Modernize::ResourceNameFromInitialize::MSG = T.let(T.unsafe(nil), String)

# There is no need to check if the chef_gem resource supports compile_time as Chef Infra Client 12.1 and later support the compile_time property.
#
# @example
#
#   ### incorrect
#   chef_gem 'ultradns-sdk' do
#   compile_time true if Chef::Resource::ChefGem.method_defined?(:compile_time)
#   action :nothing
#   end
#
#   chef_gem 'ultradns-sdk' do
#   compile_time true if Chef::Resource::ChefGem.instance_methods(false).include?(:compile_time)
#   action :nothing
#   end
#
#   chef_gem 'ultradns-sdk' do
#   compile_time true if respond_to?(:compile_time)
#   action :nothing
#   end
#
#   ### correct
#   chef_gem 'ultradns-sdk' do
#   compile_time true
#   action :nothing
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/respond_to_compile_time.rb#48
class RuboCop::Cop::Chef::Modernize::RespondToCompileTime < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::TargetChefVersion
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/respond_to_compile_time.rb#57
  def compile_time_method_defined?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/respond_to_compile_time.rb#81
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/respond_to_compile_time.rb#55
RuboCop::Cop::Chef::Modernize::RespondToCompileTime::MSG = T.let(T.unsafe(nil), String)

# It is not longer necessary respond_to?(:foo) or defined?(foo) in metadata. This was used to support new metadata methods in Chef 11 and early versions of Chef 12.
#
# @example
#
#   ### incorrect
#   chef_version '>= 13' if respond_to?(:chef_version)
#   chef_version '>= 13' if defined?(chef_version)
#   chef_version '>= 13' unless defined?(Ridley::Chef::Cookbook::Metadata)
#   if defined(chef_version)
#   chef_version '>= 13'
#   end
#
#   ### correct
#   chef_version '>= 13'
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/respond_to_metadata.rb#37
class RuboCop::Cop::Chef::Modernize::RespondToInMetadata < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/modernize/respond_to_metadata.rb#70
  def if_respond_to?(param0 = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://cookstyle//lib/rubocop/cop/chef/modernize/respond_to_metadata.rb#59
  def on_defined?(node); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/respond_to_metadata.rb#45
  def on_if(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/respond_to_metadata.rb#43
RuboCop::Cop::Chef::Modernize::RespondToInMetadata::MSG = T.let(T.unsafe(nil), String)

# In Chef Infra Client 12+ is is no longer necessary to gate the use of the provides methods in resources with `if respond_to?(:provides)` or `if defined? provides`.
#
# @example
#
#   ### incorrect
#   provides :foo if respond_to?(:provides)
#
#   provides :foo if defined? provides
#
#   ### correct
#   provides :foo
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/respond_to_provides.rb#34
class RuboCop::Cop::Chef::Modernize::RespondToProvides < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/respond_to_provides.rb#47
  def if_respond_to_provides?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/respond_to_provides.rb#39
  def on_if(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/respond_to_provides.rb#37
RuboCop::Cop::Chef::Modernize::RespondToProvides::MSG = T.let(T.unsafe(nil), String)

# Chef Infra Client 12.5 introduced the resource_name method for resources. Many cookbooks used respond_to?(:resource_name) to provide backwards compatibility with older chef-client releases. This backwards compatibility is no longer necessary.
#
# @example
#
#   ### incorrect
#   resource_name :foo if respond_to?(:resource_name)
#
#   ### correct
#   resource_name :foo
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/respond_to_resource_name.rb#32
class RuboCop::Cop::Chef::Modernize::RespondToResourceName < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/respond_to_resource_name.rb#45
  def if_respond_to_resource_name?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/respond_to_resource_name.rb#37
  def on_if(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/respond_to_resource_name.rb#35
RuboCop::Cop::Chef::Modernize::RespondToResourceName::MSG = T.let(T.unsafe(nil), String)

# set_or_return within a method should not be used to define property in a resource. Instead use the property method which properly validates and defines properties in a way that works with reporting and documentation functionality in Chef Infra Client
#
# @example
#
#   ### incorrect
#   def severity(arg = nil)
#   set_or_return(
#   :severity, arg,
#   :kind_of => String,
#   :default => nil
#   )
#   end
#
#   ### correct
#   property :severity, String
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/resource_set_or_return.rb#38
class RuboCop::Cop::Chef::Modernize::SetOrReturnInResources < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/modernize/resource_set_or_return.rb#42
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/resource_set_or_return.rb#39
RuboCop::Cop::Chef::Modernize::SetOrReturnInResources::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/resource_set_or_return.rb#40
RuboCop::Cop::Chef::Modernize::SetOrReturnInResources::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Use the archive_file resource built into Chef Infra Client 15+ instead of the seven_zip_archive
#
# @example
#
#   ### incorrect
#   seven_zip_archive "C:\file.zip" do
#   path 'C:\expand_here'
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/seven_zip_archive.rb#31
class RuboCop::Cop::Chef::Modernize::SevenZipArchiveResource < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/modernize/seven_zip_archive.rb#39
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/seven_zip_archive.rb#36
RuboCop::Cop::Chef::Modernize::SevenZipArchiveResource::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/seven_zip_archive.rb#37
RuboCop::Cop::Chef::Modernize::SevenZipArchiveResource::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Use the built-in `shell_out` helper available in Chef Infra Client 12.11+ instead of calling `Mixlib::ShellOut.new('foo').run_command`.
#
# @example
#
#   ### incorrect
#   Mixlib::ShellOut.new('foo').run_command
#
#   ### correct
#   shell_out('foo')
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/shell_out_helper.rb#32
class RuboCop::Cop::Chef::Modernize::ShellOutHelper < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/modernize/shell_out_helper.rb#41
  def mixlib_shellout_run_cmd?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/shell_out_helper.rb#49
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/shell_out_helper.rb#38
RuboCop::Cop::Chef::Modernize::ShellOutHelper::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/shell_out_helper.rb#39
RuboCop::Cop::Chef::Modernize::ShellOutHelper::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Use the Chocolatey resources built into Chef Infra Client instead of shelling out to the choco command
#
#  powershell_script 'add artifactory choco source' do
#    code "choco source add -n=artifactory -s='https://mycorp.jfrog.io/mycorp/api/nuget/chocolatey-remote' -u foo -p bar"x
#    not_if 'choco source list | findstr artifactory'
#  end
#
# @example
#
#   ### incorrect
#   execute 'install package foo' do
#   command "choco install --source=artifactory \"foo\" -y --no-progress --ignore-package-exit-codes"
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/shellouts_to_chocolatey.rb#36
class RuboCop::Cop::Chef::Modernize::ShellOutToChocolatey < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers

  # source://cookstyle//lib/rubocop/cop/chef/modernize/shellouts_to_chocolatey.rb#41
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/shellouts_to_chocolatey.rb#39
RuboCop::Cop::Chef::Modernize::ShellOutToChocolatey::MSG = T.let(T.unsafe(nil), String)

# The apt_repository resource allows setting up PPAs without using the full URL to ppa.launchpad.net, which should be used to simplify the resource code in your cookbooks.
#
# @example
#
#   ### incorrect
#   apt_repository 'atom-ppa' do
#   uri 'http://ppa.launchpad.net/webupd8team/atom/ubuntu'
#   components ['main']
#   keyserver 'keyserver.ubuntu.com'
#   key 'C2518248EEA14886'
#   end
#
#   ### correct
#   apt_repository 'atom-ppa' do
#   uri 'ppa:webupd8team/atom'
#   components ['main']
#   keyserver 'keyserver.ubuntu.com'
#   key 'C2518248EEA14886'
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/simplify_apt_ppa_setup.rb#42
class RuboCop::Cop::Chef::Modernize::SimplifyAptPpaSetup < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/simplify_apt_ppa_setup.rb#49
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/simplify_apt_ppa_setup.rb#47
RuboCop::Cop::Chef::Modernize::SimplifyAptPpaSetup::MSG = T.let(T.unsafe(nil), String)

# The sysctl_param resource was renamed to sysctl when it was added to Chef Infra Client 14.0. The new resource name should be used.
#
# @example
#
#   ### incorrect
#   sysctl_param 'fs.aio-max-nr' do
#   value '1048576'
#   end
#
#   ### correct
#   sysctl 'fs.aio-max-nr' do
#   value '1048576'
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/sysctl_param_resource.rb#36
class RuboCop::Cop::Chef::Modernize::SysctlParamResource < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::TargetChefVersion
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/sysctl_param_resource.rb#46
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/sysctl_param_resource.rb#43
RuboCop::Cop::Chef::Modernize::SysctlParamResource::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/sysctl_param_resource.rb#44
RuboCop::Cop::Chef::Modernize::SysctlParamResource::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Don't depend on cookbooks made obsolete by Chef Infra Client 14.0+ These community cookbooks contain resources that are now included in Chef Infra Client itself.
#
# @example
#
#   ### incorrect
#   depends 'build-essential'
#   depends 'chef_handler'
#   depends 'chef_hostname'
#   depends 'dmg'
#   depends 'mac_os_x'
#   depends 'swap'
#   depends 'sysctl'
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/chef_14_resources.rb#35
class RuboCop::Cop::Chef::Modernize::UnnecessaryDependsChef14 < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/modernize/chef_14_resources.rb#45
  def legacy_depends?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/chef_14_resources.rb#49
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/chef_14_resources.rb#42
RuboCop::Cop::Chef::Modernize::UnnecessaryDependsChef14::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/chef_14_resources.rb#43
RuboCop::Cop::Chef::Modernize::UnnecessaryDependsChef14::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Don't depend on cookbooks made obsolete by Chef Infra Client 15.0+. These community cookbooks contain resources that are now included in Chef Infra Client itself.
#
# @example
#
#   ### incorrect
#   depends 'libarchive'
#   depends 'windows_dns'
#   depends 'windows_uac'
#   depends 'windows_dfs'
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/chef_15_resources.rb#32
class RuboCop::Cop::Chef::Modernize::UnnecessaryDependsChef15 < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/modernize/chef_15_resources.rb#42
  def legacy_depends?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/chef_15_resources.rb#46
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/chef_15_resources.rb#39
RuboCop::Cop::Chef::Modernize::UnnecessaryDependsChef15::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/chef_15_resources.rb#40
RuboCop::Cop::Chef::Modernize::UnnecessaryDependsChef15::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Chef Infra Client 12.4+ includes mixlib/shellout automatically in resources and providers.
#
# @example
#
#   ### incorrect
#   require 'mixlib/shellout'
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/unnecessary_mixlib_shellout_require.rb#29
class RuboCop::Cop::Chef::Modernize::UnnecessaryMixlibShelloutRequire < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/unnecessary_mixlib_shellout_require.rb#40
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/unnecessary_mixlib_shellout_require.rb#36
  def require_mixlibshellout?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/unnecessary_mixlib_shellout_require.rb#33
RuboCop::Cop::Chef::Modernize::UnnecessaryMixlibShelloutRequire::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/unnecessary_mixlib_shellout_require.rb#34
RuboCop::Cop::Chef::Modernize::UnnecessaryMixlibShelloutRequire::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Use the build_essential resource from the build-essential cookbook 5.0+ or Chef Infra Client 14+ instead of using the build-essential::default recipe.
#
# @example
#
#   ### incorrect
#   depends 'build-essential'
#   include_recipe 'build-essential::default'
#   include_recipe 'build-essential'
#
#   ### correct
#   build_essential 'install compilation tools'
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/build_essential.rb#34
class RuboCop::Cop::Chef::Modernize::UseBuildEssentialResource < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/build_essential.rb#40
  def build_essential_recipe_usage?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/build_essential.rb#44
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/build_essential.rb#37
RuboCop::Cop::Chef::Modernize::UseBuildEssentialResource::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/build_essential.rb#38
RuboCop::Cop::Chef::Modernize::UseBuildEssentialResource::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Chef Infra Client 15.5 and later include cloud helpers to make detecting instances that run on public and private clouds easier.
#
# @example
#
#   ### incorrect
#   node['cloud']['provider'] == 'alibaba'
#   node['cloud']['provider'] == 'ec2'
#   node['cloud']['provider'] == 'gce'
#   node['cloud']['provider'] == 'rackspace'
#   node['cloud']['provider'] == 'eucalyptus'
#   node['cloud']['provider'] == 'linode'
#   node['cloud']['provider'] == 'openstack'
#   node['cloud']['provider'] == 'azure'
#   node['cloud']['provider'] == 'digital_ocean'
#   node['cloud']['provider'] == 'softlayer'
#
#   ### correct
#   alibaba?
#   ec2?
#   gce?
#   rackspace?
#   eucalyptus?
#   linode?
#   openstack?
#   azure?
#   digital_ocean?
#   softlayer?
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/use_chef_language_cloud_helpers.rb#50
class RuboCop::Cop::Chef::Modernize::UseChefLanguageCloudHelpers < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/modernize/use_chef_language_cloud_helpers.rb#70
  def node_cloud?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/use_chef_language_cloud_helpers.rb#76
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/use_chef_language_cloud_helpers.rb#60
  def provider_comparison?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/use_chef_language_cloud_helpers.rb#56
RuboCop::Cop::Chef::Modernize::UseChefLanguageCloudHelpers::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/use_chef_language_cloud_helpers.rb#57
RuboCop::Cop::Chef::Modernize::UseChefLanguageCloudHelpers::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://cookstyle//lib/rubocop/cop/chef/modernize/use_chef_language_cloud_helpers.rb#58
RuboCop::Cop::Chef::Modernize::UseChefLanguageCloudHelpers::VALID_CLOUDS = T.let(T.unsafe(nil), Array)

# Chef Infra Client 15.5 and later include a large number of new helpers in the Chef Infra Language to simplify checking the system configuration in recipes and resources. These should be used when possible over more complex attributes or ENV var comparisons.
#
# @example
#
#   ### incorrect
#   ENV['CI']
#   ENV['TEST_KITCHEN']
#
#   ### correct
#   ci?
#   kitchen?
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/use_chef_language_env_helpers.rb#34
class RuboCop::Cop::Chef::Modernize::UseChefLanguageEnvHelpers < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/modernize/use_chef_language_env_helpers.rb#42
  def env?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/use_chef_language_env_helpers.rb#48
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/use_chef_language_env_helpers.rb#40
RuboCop::Cop::Chef::Modernize::UseChefLanguageEnvHelpers::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Chef Infra Client 15.5 and later include a `systemd?` helper for checking if a Linux system uses systemd.
#
# @example
#
#   ### incorrect
#   node['init_package'] == 'systemd'
#
#   ### correct
#   systemd?
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/use_chef_language_systemd_helper.rb#32
class RuboCop::Cop::Chef::Modernize::UseChefLanguageSystemdHelper < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/modernize/use_chef_language_systemd_helper.rb#41
  def node_init_package?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/use_chef_language_systemd_helper.rb#49
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/use_chef_language_systemd_helper.rb#38
RuboCop::Cop::Chef::Modernize::UseChefLanguageSystemdHelper::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/use_chef_language_systemd_helper.rb#39
RuboCop::Cop::Chef::Modernize::UseChefLanguageSystemdHelper::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Pass an array of packages to package resources instead of iterating over an array of packages when using multi-package capable package subsystem such as apt, yum, chocolatey, dnf, or zypper. Multi-package installs are faster and simplify logs.
#
# @example
#
#   ### incorrect
#   %w(bmon htop vim curl).each do |pkg|
#   package pkg do
#   action :install
#   end
#   end
#
#   ### correct
#   package %w(bmon htop vim curl)
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/use_multipackage_installs.rb#36
class RuboCop::Cop::Chef::Modernize::UseMultipackageInstalls < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # see if all platforms in the when condition are multi-package compliant
  #
  # @return [Boolean]
  #
  # source://cookstyle//lib/rubocop/cop/chef/modernize/use_multipackage_installs.rb#79
  def multipackage_platforms?(condition_obj); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/use_multipackage_installs.rb#98
  def on_if(node); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/use_multipackage_installs.rb#86
  def on_when(node); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/use_multipackage_installs.rb#63
  def package_array_install(param0); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/use_multipackage_installs.rb#46
  def platform_helper?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/use_multipackage_installs.rb#42
  def platform_or_platform_family?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/use_multipackage_installs.rb#39
RuboCop::Cop::Chef::Modernize::UseMultipackageInstalls::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/use_multipackage_installs.rb#40
RuboCop::Cop::Chef::Modernize::UseMultipackageInstalls::MULTIPACKAGE_PLATS = T.let(T.unsafe(nil), Array)

# Instead of using require with a File.expand_path and __FILE__ use the simpler require_relative method.
#
# @example
#
#   ### incorrect
#   require File.expand_path('../../libraries/helpers', __FILE__)
#
#   ### correct
#   require_relative '../libraries/helpers'
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/use_require_relative.rb#32
class RuboCop::Cop::Chef::Modernize::UseRequireRelative < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/use_require_relative.rb#46
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/use_require_relative.rb#38
  def require_with_expand_path?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/use_require_relative.rb#35
RuboCop::Cop::Chef::Modernize::UseRequireRelative::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/use_require_relative.rb#36
RuboCop::Cop::Chef::Modernize::UseRequireRelative::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The zypper_repo resource was renamed zypper_repository when it was added to Chef Infra Client 13.3.
#
# @example
#
#   ### incorrect
#   zypper_repo 'apache' do
#   baseurl 'http://download.opensuse.org/repositories/Apache'
#   path '/openSUSE_Leap_42.2'
#   type 'rpm-md'
#   priority '100'
#   end
#
#   ### correct
#   zypper_repository 'apache' do
#   baseurl 'http://download.opensuse.org/repositories/Apache'
#   path '/openSUSE_Leap_42.2'
#   type 'rpm-md'
#   priority '100'
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/zypper_repo.rb#42
class RuboCop::Cop::Chef::Modernize::UsesZypperRepo < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::TargetChefVersion
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/zypper_repo.rb#51
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/zypper_repo.rb#48
RuboCop::Cop::Chef::Modernize::UsesZypperRepo::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/zypper_repo.rb#49
RuboCop::Cop::Chef::Modernize::UsesZypperRepo::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# whyrun_supported? no longer needs to be set to true as that is the default in Chef Infra Client 13+
#
# @example
#
#   ### incorrect
#   def whyrun_supported?
#   true
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/whyrun_supported_true.rb#31
class RuboCop::Cop::Chef::Modernize::WhyRunSupportedTrue < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::TargetChefVersion
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/modernize/whyrun_supported_true.rb#47
  def on_def(node); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/whyrun_supported_true.rb#41
  def whyrun_true?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/whyrun_supported_true.rb#38
RuboCop::Cop::Chef::Modernize::WhyRunSupportedTrue::MSG = T.let(T.unsafe(nil), String)

# Chef Infra Client 15.0 and later includes a windows_uac resource that should be used to set Windows UAC values instead of setting registry keys directly.
#
# @example
#
#   ### incorrect
#   registry_key 'HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System' do
#   values [{ name: 'EnableLUA', type: :dword, data: 0 },
#   { name: 'PromptOnSecureDesktop', type: :dword, data: 0 },
#   { name: 'ConsentPromptBehaviorAdmin', type: :dword, data: 0 },
#   ]
#   action :create
#   end
#
#   ### correct
#   windows_uac 'Set Windows UAC settings' do
#   enable_uac false
#   prompt_on_secure_desktop true
#   consent_behavior_admins :no_prompt
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/windows_registry_uac.rb#42
class RuboCop::Cop::Chef::Modernize::WindowsRegistryUAC < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::TargetChefVersion

  # make sure the registry_key resource is running against the correct key
  # check the block name and the key property (registry_key's name property)
  #
  # @return [Boolean]
  #
  # source://cookstyle//lib/rubocop/cop/chef/modernize/windows_registry_uac.rb#79
  def correct_key?(node); end

  # block registry_key resources
  #
  # source://cookstyle//lib/rubocop/cop/chef/modernize/windows_registry_uac.rb#53
  def on_block(node); end

  # make sure the values passed are all the ones in the uac resource
  # this key has other values we don't support in the windows_uac resource
  #
  # @return [Boolean]
  #
  # source://cookstyle//lib/rubocop/cop/chef/modernize/windows_registry_uac.rb#62
  def uac_supported_values?(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/windows_registry_uac.rb#48
RuboCop::Cop::Chef::Modernize::WindowsRegistryUAC::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/windows_registry_uac.rb#49
RuboCop::Cop::Chef::Modernize::WindowsRegistryUAC::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://cookstyle//lib/rubocop/cop/chef/modernize/windows_registry_uac.rb#50
RuboCop::Cop::Chef::Modernize::WindowsRegistryUAC::VALID_VALUES = T.let(T.unsafe(nil), Array)

# The sc_windows resource from the sc cookbook allowed for the creation of windows services on legacy Chef Infra Client releases. Chef Infra Client 14.0 and later includes :create, :delete, and :configure actions without the need for additional cookbook dependencies. See the windows_service documentation at https://docs.chef.io/resources/windows_service for additional details on creating services with the windows_service resource.
#
# @example
#
#   ### incorrect
#   sc_windows 'chef-client' do
#   path "C:\\opscode\\chef\\bin"
#   action :create
#   end
#
#   ### correct
#   windows_service 'chef-client' do
#   action :create
#   binary_path_name "C:\\opscode\\chef\\bin"
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/sc_windows_resource.rb#38
class RuboCop::Cop::Chef::Modernize::WindowsScResource < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/modernize/sc_windows_resource.rb#46
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/sc_windows_resource.rb#43
RuboCop::Cop::Chef::Modernize::WindowsScResource::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/sc_windows_resource.rb#44
RuboCop::Cop::Chef::Modernize::WindowsScResource::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Use the archive_file resource built into Chef Infra Client 15+ instead of the windows_zipfile from the Windows cookbook
#
# @example
#
#   ### incorrect
#   windows_zipfile 'C:\\files\\' do
#   source 'C:\\Temp\\file.zip'
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/windows_zipfile.rb#31
class RuboCop::Cop::Chef::Modernize::WindowsZipfileUsage < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/modernize/windows_zipfile.rb#39
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/windows_zipfile.rb#36
RuboCop::Cop::Chef::Modernize::WindowsZipfileUsage::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/windows_zipfile.rb#37
RuboCop::Cop::Chef::Modernize::WindowsZipfileUsage::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Use the archive_file resource built into Chef Infra Client 15+ instead of the zipfile resource from the zipfile cookbook.
#
# @example
#
#   ### incorrect
#   zipfile "C:\file.zip" do
#   path 'C:\expand_here'
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/modernize/zipfile_resource.rb#31
class RuboCop::Cop::Chef::Modernize::ZipfileResource < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/modernize/zipfile_resource.rb#40
  def depends_zipfile?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/zipfile_resource.rb#50
  def on_block(node); end

  # source://cookstyle//lib/rubocop/cop/chef/modernize/zipfile_resource.rb#44
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/modernize/zipfile_resource.rb#37
RuboCop::Cop::Chef::Modernize::ZipfileResource::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/modernize/zipfile_resource.rb#38
RuboCop::Cop::Chef::Modernize::ZipfileResource::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://cookstyle//lib/rubocop/cop/chef/redundant/apt_repository_distribution_default.rb#21
module RuboCop::Cop::Chef::RedundantCode; end

# There is no need to pass `distribution node['lsb']['codename']` to an apt_repository resource as this is done automatically by the apt_repository resource.
#
# @example
#
#   ### incorrect
#   apt_repository 'my repo' do
#   uri 'http://packages.example.com/debian'
#   components %w(stable main)
#   deb_src false
#   distribution node['lsb']['codename']
#   end
#
#   ### correct
#   apt_repository 'my repo' do
#   uri 'http://packages.example.com/debian'
#   components %w(stable main)
#   deb_src false
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/redundant/apt_repository_distribution_default.rb#41
class RuboCop::Cop::Chef::RedundantCode::AptRepositoryDistributionDefault < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/redundant/apt_repository_distribution_default.rb#48
  def default_dist?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/redundant/apt_repository_distribution_default.rb#52
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/redundant/apt_repository_distribution_default.rb#46
RuboCop::Cop::Chef::RedundantCode::AptRepositoryDistributionDefault::MSG = T.let(T.unsafe(nil), String)

# There is no need to notify an apt-get update when an apt_repository is created as this is done automatically by the apt_repository resource.
#
# @example
#
#   ### incorrect
#   apt_repository 'my repo' do
#   uri 'http://packages.example.com/debian'
#   components %w(stable main)
#   deb_src false
#   notifies :run, 'execute[apt-get update]', :immediately
#   end
#
#   ### correct
#   apt_repository 'my repo' do
#   uri 'http://packages.example.com/debian'
#   components %w(stable main)
#   deb_src false
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/redundant/apt_repository_notifies_apt_update.rb#41
class RuboCop::Cop::Chef::RedundantCode::AptRepositoryNotifiesAptUpdate < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/redundant/apt_repository_notifies_apt_update.rb#48
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/redundant/apt_repository_notifies_apt_update.rb#46
RuboCop::Cop::Chef::RedundantCode::AptRepositoryNotifiesAptUpdate::MSG = T.let(T.unsafe(nil), String)

# The attribute metadata.rb method is not used and is unnecessary in cookbooks.
#
# @example
#
#   ### incorrect in metadata.rb:
#
#   attribute 'zookeeper_bridge/server',
#   display_name: 'zookeeper server',
#   description: 'Zookeeper server address.',
#   type: 'string',
#   required: 'optional',
#   default: '"127.0.0.1:2181"'
#
# source://cookstyle//lib/rubocop/cop/chef/redundant/attribute_metadata.rb#35
class RuboCop::Cop::Chef::RedundantCode::AttributeMetadata < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  include ::RuboCop::Chef::AutocorrectHelpers
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/redundant/attribute_metadata.rb#43
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/redundant/attribute_metadata.rb#40
RuboCop::Cop::Chef::RedundantCode::AttributeMetadata::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/redundant/attribute_metadata.rb#41
RuboCop::Cop::Chef::RedundantCode::AttributeMetadata::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The conflicts metadata.rb method is not used and is unnecessary in cookbooks.
#
# @example
#
#   ### incorrect in metadata.rb:
#
#   conflicts "another_cookbook"
#
# source://cookstyle//lib/rubocop/cop/chef/redundant/conflicts_metadata.rb#30
class RuboCop::Cop::Chef::RedundantCode::ConflictsMetadata < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/redundant/conflicts_metadata.rb#37
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/redundant/conflicts_metadata.rb#34
RuboCop::Cop::Chef::RedundantCode::ConflictsMetadata::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/redundant/conflicts_metadata.rb#35
RuboCop::Cop::Chef::RedundantCode::ConflictsMetadata::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# It is not necessary to set `actions` or `allowed_actions` in custom resources as Chef Infra Client determines these automatically from the set of all actions defined in the resource.
#
# @example
#
#   ### incorrect
#   allowed_actions [:create, :remove]
#
#   # also bad
#   actions [:create, :remove]
#
# source://cookstyle//lib/rubocop/cop/chef/redundant/custom_resource_with_allowed_actions.rb#32
class RuboCop::Cop::Chef::RedundantCode::CustomResourceWithAllowedActions < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/redundant/custom_resource_with_allowed_actions.rb#45
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/redundant/custom_resource_with_allowed_actions.rb#39
  def poise_require(param0); end

  # source://cookstyle//lib/rubocop/cop/chef/redundant/custom_resource_with_allowed_actions.rb#41
  def resource_actions?(param0); end
end

# source://cookstyle//lib/rubocop/cop/chef/redundant/custom_resource_with_allowed_actions.rb#36
RuboCop::Cop::Chef::RedundantCode::CustomResourceWithAllowedActions::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/redundant/custom_resource_with_allowed_actions.rb#37
RuboCop::Cop::Chef::RedundantCode::CustomResourceWithAllowedActions::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# If a resource includes the `compile_time` property there's no need to also use `.run_action(:some_action)` on the resource block
#
# @example
#
#   ### incorrect
#   chef_gem 'deep_merge' do
#   action :nothing
#   compile_time true
#   end.run_action(:install)
#
#   ### correct
#   chef_gem 'deep_merge' do
#   action :install
#   compile_time true
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/redundant/double_compile_time.rb#38
class RuboCop::Cop::Chef::RedundantCode::DoubleCompileTime < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/redundant/double_compile_time.rb#44
  def compile_time_and_run_action?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/redundant/double_compile_time.rb#57
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/redundant/double_compile_time.rb#41
RuboCop::Cop::Chef::RedundantCode::DoubleCompileTime::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/redundant/double_compile_time.rb#42
RuboCop::Cop::Chef::RedundantCode::DoubleCompileTime::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The grouping metadata.rb method is not used and is unnecessary in cookbooks.
#
# @example
#
#   ### incorrect
#   grouping 'windows_log_rotate', title: 'Demonstration cookbook with code to switch loggers'
#
# source://cookstyle//lib/rubocop/cop/chef/redundant/grouping_metadata.rb#29
class RuboCop::Cop::Chef::RedundantCode::GroupingMetadata < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  include ::RuboCop::Chef::AutocorrectHelpers
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/redundant/grouping_metadata.rb#37
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/redundant/grouping_metadata.rb#34
RuboCop::Cop::Chef::RedundantCode::GroupingMetadata::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/redundant/grouping_metadata.rb#35
RuboCop::Cop::Chef::RedundantCode::GroupingMetadata::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The long_description metadata.rb method is not used and is unnecessary in cookbooks.
#
# @example
#
#   ### incorrect
#   long_description 'this is my cookbook and this description will never be seen'
#
# source://cookstyle//lib/rubocop/cop/chef/redundant/long_description_metadata.rb#29
class RuboCop::Cop::Chef::RedundantCode::LongDescriptionMetadata < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  include ::RuboCop::Chef::AutocorrectHelpers
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/redundant/long_description_metadata.rb#37
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/redundant/long_description_metadata.rb#34
RuboCop::Cop::Chef::RedundantCode::LongDescriptionMetadata::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/redundant/long_description_metadata.rb#35
RuboCop::Cop::Chef::RedundantCode::LongDescriptionMetadata::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# You can pass multiple values to the platform? and platform_family? helpers instead of calling the helpers multiple times.
#
# @example
#
#   ### incorrect
#   platform?('redhat') || platform?('ubuntu')
#   platform_family?('debian') || platform_family?('rhel')
#
#   ### correct
#   platform?('redhat', 'ubuntu')
#   platform_family?('debian', 'rhel')
#
# source://cookstyle//lib/rubocop/cop/chef/redundant/multiple_platform_checks.rb#34
class RuboCop::Cop::Chef::RedundantCode::MultiplePlatformChecks < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/redundant/multiple_platform_checks.rb#43
  def on_or(node); end

  # source://cookstyle//lib/rubocop/cop/chef/redundant/multiple_platform_checks.rb#39
  def or_platform_helpers?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/redundant/multiple_platform_checks.rb#37
RuboCop::Cop::Chef::RedundantCode::MultiplePlatformChecks::MSG = T.let(T.unsafe(nil), String)

# When using properties in a custom resource you shouldn't set a property to
# be both required and a name_property. Name properties are a way to optionally
# override the name given to the resource block in cookbook code. In your resource
# code you use the name_property and if the user doesn't pass in anything to that
# property its value will be populated with resource block's name. This
# allows users to provide more friendly resource names for logging that give
# additional context on the change being made.
#
# How about a nice example! Here we have a resource called ntp_config that has a
# name_property of config_file. All throughout the code of this resource we'd
# use new_resource.config_file when referencing the path to the config.
#
# We can use a friendly name for the block and specific a value to config_file
# ntp_config 'Configure the main config file' do
#   config_file '/etc/ntp/ntp.conf'
#   action :create
# end
#
# We can also just set the config path as the resource block and Chef will
# make sure to pass this in as new_resource.config_file as well.
# ntp_config '/etc/ntp/ntp.conf' do
#   action :create
# end
#
# The core tenant of the name property feature is that these properties are optional
# and making them required effectively turns off the functionality provided by name
# properties. If the goal is to always require the user to pass the config_file property
# then it should just be made a required property and not a name_property.
#
# @example
#
#   ### incorrect
#   property :config_file, String, required: true, name_property: true
#   attribute :config_file, String, required: true, name_attribute: true
#
#   ### correct
#   property :config_file, String, required: true
#
# source://cookstyle//lib/rubocop/cop/chef/redundant/name_property_and_required.rb#61
class RuboCop::Cop::Chef::RedundantCode::NamePropertyIsRequired < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/redundant/name_property_and_required.rb#68
  def name_property_and_required?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/redundant/name_property_and_required.rb#72
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/redundant/name_property_and_required.rb#62
RuboCop::Cop::Chef::RedundantCode::NamePropertyIsRequired::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/redundant/name_property_and_required.rb#63
RuboCop::Cop::Chef::RedundantCode::NamePropertyIsRequired::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Many Ohai node attributes are already strings and don't need to be cast to strings again
#
# @example
#
#   ### incorrect
#   node['platform'].to_s
#   node['platform_family'].to_s
#   node['platform_version'].to_s
#   node['fqdn'].to_s
#   node['hostname'].to_s
#   node['os'].to_s
#   node['name'].to_s
#
#   ### correct
#   node['platform']
#   node['platform_family']
#   node['platform_version']
#   node['fqdn']
#   node['hostname']
#   node['os']
#   node['name']
#
# source://cookstyle//lib/rubocop/cop/chef/redundant/ohai_attribute_to_string.rb#44
class RuboCop::Cop::Chef::RedundantCode::OhaiAttributeToString < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/redundant/ohai_attribute_to_string.rb#50
  def attribute_to_s?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/redundant/ohai_attribute_to_string.rb#54
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/redundant/ohai_attribute_to_string.rb#47
RuboCop::Cop::Chef::RedundantCode::OhaiAttributeToString::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/redundant/ohai_attribute_to_string.rb#48
RuboCop::Cop::Chef::RedundantCode::OhaiAttributeToString::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# When a property has a type of String it can accept any string. There is no need to also validate string inputs against a regex that accept all values.
#
# @example
#
#   ### incorrect
#   property :config_file, String, regex: /.*/
#   attribute :config_file, String, regex: /.*/
#
#   ### correct
#   property :config_file, String
#   attribute :config_file, String
#
# source://cookstyle//lib/rubocop/cop/chef/redundant/property_splat_regex.rb#34
class RuboCop::Cop::Chef::RedundantCode::PropertySplatRegex < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/redundant/property_splat_regex.rb#45
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/redundant/property_splat_regex.rb#41
  def property_with_regex_splat?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/redundant/property_splat_regex.rb#38
RuboCop::Cop::Chef::RedundantCode::PropertySplatRegex::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/redundant/property_splat_regex.rb#39
RuboCop::Cop::Chef::RedundantCode::PropertySplatRegex::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# When using properties in a custom resource you shouldn't set a property to
# required and then provide a default value. If a property is required the
# user will always pass in a value and the default will never be used. In Chef
# Infra Client 13+ this became an error.
#
# @example
#
#   ### incorrect
#   property :bob, String, required: true, default: 'foo'
#
#   ### correct
#   property :bob, String, required: true
#
# source://cookstyle//lib/rubocop/cop/chef/redundant/property_with_default_and_required.rb#35
class RuboCop::Cop::Chef::RedundantCode::PropertyWithRequiredAndDefault < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/redundant/property_with_default_and_required.rb#49
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/redundant/property_with_default_and_required.rb#45
  def required_and_default?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/redundant/property_with_default_and_required.rb#39
RuboCop::Cop::Chef::RedundantCode::PropertyWithRequiredAndDefault::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/redundant/property_with_default_and_required.rb#40
RuboCop::Cop::Chef::RedundantCode::PropertyWithRequiredAndDefault::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The provides metadata.rb method is not used and is unnecessary in cookbooks.
#
# @example
#
#   ### incorrect in metadata.rb:
#
#   provides "some_thing"
#
# source://cookstyle//lib/rubocop/cop/chef/redundant/provides_metadata.rb#30
class RuboCop::Cop::Chef::RedundantCode::ProvidesMetadata < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/redundant/provides_metadata.rb#37
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/redundant/provides_metadata.rb#34
RuboCop::Cop::Chef::RedundantCode::ProvidesMetadata::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/redundant/provides_metadata.rb#35
RuboCop::Cop::Chef::RedundantCode::ProvidesMetadata::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The recipe metadata.rb method is not used and is unnecessary in cookbooks. Recipes should be documented in the cookbook's README.md file instead.
#
# @example
#
#   ### incorrect
#   recipe 'openldap::default', 'Install and configure OpenLDAP'
#
# source://cookstyle//lib/rubocop/cop/chef/redundant/recipe_metadata.rb#30
class RuboCop::Cop::Chef::RedundantCode::RecipeMetadata < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  include ::RuboCop::Chef::AutocorrectHelpers
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/redundant/recipe_metadata.rb#38
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/redundant/recipe_metadata.rb#35
RuboCop::Cop::Chef::RedundantCode::RecipeMetadata::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/redundant/recipe_metadata.rb#36
RuboCop::Cop::Chef::RedundantCode::RecipeMetadata::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The replaces metadata.rb method is not used and is unnecessary in cookbooks. Replacements for existing cookbooks should be documented in the cookbook's README.md file instead.
#
# @example
#
#   ### incorrect in metadata.rb:
#
#   replaces "another_cookbook"
#
# source://cookstyle//lib/rubocop/cop/chef/redundant/replaces_metadata.rb#30
class RuboCop::Cop::Chef::RedundantCode::ReplacesMetadata < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/redundant/replaces_metadata.rb#37
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/redundant/replaces_metadata.rb#34
RuboCop::Cop::Chef::RedundantCode::ReplacesMetadata::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/redundant/replaces_metadata.rb#35
RuboCop::Cop::Chef::RedundantCode::ReplacesMetadata::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Chef Infra Client provides the :nothing action by default for every resource. There is no need to define a :nothing action in your resource code.
#
# @example
#
#   ### incorrect
#   action :nothing
#   # let's do nothing
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/redundant/resource_with_nothing_action.rb#31
class RuboCop::Cop::Chef::RedundantCode::ResourceWithNothingAction < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/redundant/resource_with_nothing_action.rb#37
  def nothing_action?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/redundant/resource_with_nothing_action.rb#41
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/redundant/resource_with_nothing_action.rb#35
RuboCop::Cop::Chef::RedundantCode::ResourceWithNothingAction::MSG = T.let(T.unsafe(nil), String)

# Every Chef Infra resource already includes a sensitive property with a default value of false.
#
# ### incorrect
# property :sensitive, [true, false], default: false
#
# source://cookstyle//lib/rubocop/cop/chef/redundant/sensitive_property_in_resource.rb#29
class RuboCop::Cop::Chef::RedundantCode::SensitivePropertyInResource < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/redundant/sensitive_property_in_resource.rb#39
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/redundant/sensitive_property_in_resource.rb#35
  def sensitive_property?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/redundant/sensitive_property_in_resource.rb#32
RuboCop::Cop::Chef::RedundantCode::SensitivePropertyInResource::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/redundant/sensitive_property_in_resource.rb#33
RuboCop::Cop::Chef::RedundantCode::SensitivePropertyInResource::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Properties have a nil value by default so there is no need to set the default value to nil.
#
# @example
#
#   ### incorrect
#   property :config_file, String, default: nil
#   property :config_file, [String, NilClass], default: nil
#
#   ### correct
#   property :config_file, String
#   property :config_file, [String, NilClass]
#
# source://cookstyle//lib/rubocop/cop/chef/redundant/string_property_with_nil_default.rb#34
class RuboCop::Cop::Chef::RedundantCode::StringPropertyWithNilDefault < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/redundant/string_property_with_nil_default.rb#52
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/redundant/string_property_with_nil_default.rb#48
  def string_and_nil_like?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/redundant/string_property_with_nil_default.rb#41
  def string_property_with_nil_default?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/redundant/string_property_with_nil_default.rb#38
RuboCop::Cop::Chef::RedundantCode::StringPropertyWithNilDefault::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/redundant/string_property_with_nil_default.rb#39
RuboCop::Cop::Chef::RedundantCode::StringPropertyWithNilDefault::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# The suggests metadata.rb method is not used and is unnecessary in cookbooks.
#
# @example
#
#   ### incorrect in metadata.rb:
#
#   suggests "another_cookbook"
#
# source://cookstyle//lib/rubocop/cop/chef/redundant/suggests_metadata.rb#30
class RuboCop::Cop::Chef::RedundantCode::SuggestsMetadata < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/redundant/suggests_metadata.rb#37
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/redundant/suggests_metadata.rb#34
RuboCop::Cop::Chef::RedundantCode::SuggestsMetadata::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/redundant/suggests_metadata.rb#35
RuboCop::Cop::Chef::RedundantCode::SuggestsMetadata::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# There is no need to set a property/attribute to desired_state: true as all properties/attributes have a desired_state of true by default.
#
# @example
#
#   ### incorrect
#   property :foo, String, desired_state: true
#   attribute :foo, String, desired_state: true
#
#   ### correct
#   property :foo, String
#   attribute :foo, String
#
# source://cookstyle//lib/rubocop/cop/chef/redundant/unnecessary_desired_state.rb#34
class RuboCop::Cop::Chef::RedundantCode::UnnecessaryDesiredState < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/redundant/unnecessary_desired_state.rb#45
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/redundant/unnecessary_desired_state.rb#41
  def property?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/redundant/unnecessary_desired_state.rb#38
RuboCop::Cop::Chef::RedundantCode::UnnecessaryDesiredState::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/redundant/unnecessary_desired_state.rb#39
RuboCop::Cop::Chef::RedundantCode::UnnecessaryDesiredState::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# There is no need to define a property or attribute named :name in a resource as Chef Infra defines this on all resources by default.
#
# @example
#
#   ### incorrect
#   property :name, String
#   property :name, String, name_property: true
#   attribute :name, kind_of: String
#   attribute :name, kind_of: String, name_attribute: true
#   attribute :name, name_attribute: true, kind_of: String
#
# source://cookstyle//lib/rubocop/cop/chef/redundant/unnecessary_name_property.rb#33
class RuboCop::Cop::Chef::RedundantCode::UnnecessaryNameProperty < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/redundant/unnecessary_name_property.rb#39
  def name_property?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/redundant/unnecessary_name_property.rb#47
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/redundant/unnecessary_name_property.rb#36
RuboCop::Cop::Chef::RedundantCode::UnnecessaryNameProperty::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/redundant/unnecessary_name_property.rb#37
RuboCop::Cop::Chef::RedundantCode::UnnecessaryNameProperty::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Use the `:create_if_missing` action instead of `not_if` with a `::File.exist(FOO)` check.
#
# @example
#
#   ### incorrect
#   cookbook_file '/logs/foo/error.log' do
#   source 'error.log'
#   owner 'root'
#   group 'root'
#   mode '0644'
#   not_if { ::File.exists?('/logs/foo/error.log') }
#   end
#
#   remote_file 'Download file' do
#   path '/foo/bar'
#   source 'https://foo.com/bar'
#   owner 'root'
#   group 'root'
#   mode '0644'
#   not_if { ::File.exist?('/foo/bar') }
#   end
#
#   ### correct
#   cookbook_file '/logs/foo/error.log' do
#   source 'error.log'
#   owner 'root'
#   group 'root'
#   mode '0644'
#   action :create_if_missing
#   end
#
#   remote_file 'Download file' do
#   path '/foo/bar'
#   source 'https://foo.com/bar'
#   owner 'root'
#   group 'root'
#   mode '0644'
#   action :create_if_missing
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/redundant/use_create_if_missing.rb#62
class RuboCop::Cop::Chef::RedundantCode::UseCreateIfMissing < ::RuboCop::Cop::Base
  include ::RuboCop::Chef::CookbookHelpers
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/redundant/use_create_if_missing.rb#76
  def create_action(param0); end

  # source://cookstyle//lib/rubocop/cop/chef/redundant/use_create_if_missing.rb#70
  def file_exist_value(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/redundant/use_create_if_missing.rb#74
  def has_action?(param0); end

  # source://cookstyle//lib/rubocop/cop/chef/redundant/use_create_if_missing.rb#80
  def on_block(node); end

  # source://cookstyle//lib/rubocop/cop/chef/redundant/use_create_if_missing.rb#78
  def path_property_node(param0); end
end

# source://cookstyle//lib/rubocop/cop/chef/redundant/use_create_if_missing.rb#67
RuboCop::Cop::Chef::RedundantCode::UseCreateIfMissing::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/redundant/use_create_if_missing.rb#68
RuboCop::Cop::Chef::RedundantCode::UseCreateIfMissing::RESOURCES = T.let(T.unsafe(nil), Array)

# source://cookstyle//lib/rubocop/cop/chefstyle/ruby/gemspec_license.rb#22
module RuboCop::Cop::Chef::Ruby; end

# source://cookstyle//lib/rubocop/cop/chefstyle/ruby/gemspec_license.rb#30
class RuboCop::Cop::Chef::Ruby::GemspecLicense < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp

  # source://cookstyle//lib/rubocop/cop/chefstyle/ruby/gemspec_license.rb#39
  def eval_method(param0); end

  # source://cookstyle//lib/rubocop/cop/chefstyle/ruby/gemspec_license.rb#35
  def license(param0); end

  # source://cookstyle//lib/rubocop/cop/chefstyle/ruby/gemspec_license.rb#43
  def on_new_investigation; end
end

# source://cookstyle//lib/rubocop/cop/chefstyle/ruby/gemspec_license.rb#33
RuboCop::Cop::Chef::Ruby::GemspecLicense::MSG = T.let(T.unsafe(nil), String)

# Rubygems does not need to be required in a Gemspec. It's already loaded out of the box in Ruby now.
#
# source://cookstyle//lib/rubocop/cop/chefstyle/ruby/gemspec_require_rubygems.rb#24
class RuboCop::Cop::Chef::Ruby::GemspecRequireRubygems < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chefstyle/ruby/gemspec_require_rubygems.rb#34
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chefstyle/ruby/gemspec_require_rubygems.rb#30
  def require_rubygems?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chefstyle/ruby/gemspec_require_rubygems.rb#28
RuboCop::Cop::Chef::Ruby::GemspecRequireRubygems::MSG = T.let(T.unsafe(nil), String)

# Use powershell_exec!/powershell_exec instead of powershell_out!/powershell_out. The new
# methods don't spawn 2 shells per shellout and instead use .NET bindings to call PS directly.
#
# source://cookstyle//lib/rubocop/cop/chefstyle/ruby/legacy_powershell_out_methods.rb#25
class RuboCop::Cop::Chef::Ruby::LegacyPowershellOutMethods < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chefstyle/ruby/legacy_powershell_out_methods.rb#29
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chefstyle/ruby/legacy_powershell_out_methods.rb#26
RuboCop::Cop::Chef::Ruby::LegacyPowershellOutMethods::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chefstyle/ruby/legacy_powershell_out_methods.rb#27
RuboCop::Cop::Chef::Ruby::LegacyPowershellOutMethods::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# net/https is deprecated and just includes net/http and openssl. We should include those directly instead.
#
# @example
#
#   # bad
#   require 'net/https'
#
#   # good
#   require 'net/http'
#   require 'openssl'
#
# source://cookstyle//lib/rubocop/cop/chefstyle/ruby/require_net_https.rb#34
class RuboCop::Cop::Chef::Ruby::RequireNetHttps < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chefstyle/ruby/require_net_https.rb#43
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chefstyle/ruby/require_net_https.rb#39
  def require_net_https?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chefstyle/ruby/require_net_https.rb#37
RuboCop::Cop::Chef::Ruby::RequireNetHttps::MSG = T.let(T.unsafe(nil), String)

# Rubygems is VERY slow to require gems even if they've already been loaded. To work around this
# wrap your require statement with an `if defined?()` check.
#
# source://cookstyle//lib/rubocop/cop/chefstyle/ruby/unless_defined_require.rb#26
class RuboCop::Cop::Chef::Ruby::UnlessDefinedRequire < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chefstyle/ruby/unless_defined_require.rb#108
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chefstyle/ruby/unless_defined_require.rb#104
  def require?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chefstyle/ruby/unless_defined_require.rb#29
RuboCop::Cop::Chef::Ruby::UnlessDefinedRequire::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chefstyle/ruby/unless_defined_require.rb#31
RuboCop::Cop::Chef::Ruby::UnlessDefinedRequire::REQUIRE_TO_CLASS = T.let(T.unsafe(nil), Hash)

# source://cookstyle//lib/rubocop/cop/chef/security/ssh_private_key.rb#21
module RuboCop::Cop::Chef::Security; end

# Do not include plain text SSH private keys in your cookbook code. This sensitive data should be fetched from secrets management systems so that secrets are not uploaded in plain text to the Chef Infra Server or committed to source control systems.
#
# @example
#
#   ### incorrect
#   file '/Users/bob_bobberson/.ssh/id_rsa' do
#   content '-----BEGIN RSA PRIVATE KEY-----\n...\n-----END RSA PRIVATE KEY-----'
#   mode '600'
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/security/ssh_private_key.rb#32
class RuboCop::Cop::Chef::Security::SshPrivateKey < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/security/ssh_private_key.rb#35
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/security/ssh_private_key.rb#33
RuboCop::Cop::Chef::Security::SshPrivateKey::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/sharing/default_maintainer_metadata.rb#21
module RuboCop::Cop::Chef::Sharing; end

# Metadata contains default maintainer information from the `chef generate cookbook` command. This should be updated to reflect that actual maintainer of the cookbook.
#
# @example
#
#   ### incorrect
#   maintainer 'YOUR_COMPANY_NAME'
#   maintainer_email 'YOUR_EMAIL'
#   maintainer 'The Authors'
#   maintainer_email 'you@example.com'
#   ### correct
#   maintainer 'Bob Bobberson'
#   maintainer_email 'bob@bobberson.com'
#
# source://cookstyle//lib/rubocop/cop/chef/sharing/default_maintainer_metadata.rb#35
class RuboCop::Cop::Chef::Sharing::DefaultMetadataMaintainer < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/sharing/default_maintainer_metadata.rb#39
  def default_metadata?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/sharing/default_maintainer_metadata.rb#41
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/sharing/default_maintainer_metadata.rb#36
RuboCop::Cop::Chef::Sharing::DefaultMetadataMaintainer::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/sharing/default_maintainer_metadata.rb#37
RuboCop::Cop::Chef::Sharing::DefaultMetadataMaintainer::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# metadata.rb should not include fields with an empty string. Either don't include the field or add a value.
#
# @example
#
#   ### incorrect
#   license ''
#
#   ### correct
#   license 'Apache-2.0'
#
# source://cookstyle//lib/rubocop/cop/chef/sharing/empty_metadata_field.rb#32
class RuboCop::Cop::Chef::Sharing::EmptyMetadataField < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/sharing/empty_metadata_field.rb#35
  def field?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/sharing/empty_metadata_field.rb#37
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/sharing/empty_metadata_field.rb#33
RuboCop::Cop::Chef::Sharing::EmptyMetadataField::MSG = T.let(T.unsafe(nil), String)

# Resource properties should include description fields to allow automated documentation. Requires Chef Infra Client 13.9 or later.
#
# @example
#
#   ### incorrect
#   property :foo, String
#
#   ### correct
#   property :foo, String, description: "Set the important thing to..."
#
# source://cookstyle//lib/rubocop/cop/chef/sharing/include_property_descriptions.rb#32
class RuboCop::Cop::Chef::Sharing::IncludePropertyDescriptions < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/sharing/include_property_descriptions.rb#44
  def description_hash?(param0); end

  # source://cookstyle//lib/rubocop/cop/chef/sharing/include_property_descriptions.rb#46
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/sharing/include_property_descriptions.rb#41
  def property?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/sharing/include_property_descriptions.rb#37
RuboCop::Cop::Chef::Sharing::IncludePropertyDescriptions::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/sharing/include_property_descriptions.rb#38
RuboCop::Cop::Chef::Sharing::IncludePropertyDescriptions::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Resources should include description fields to allow automated documentation. Requires Chef Infra Client 13.9 or later.
#
# @example
#
#   ### correct
#   resource_name :foo
#   description "The foo resource is used to do..."
#
# source://cookstyle//lib/rubocop/cop/chef/sharing/include_resource_descriptions.rb#30
class RuboCop::Cop::Chef::Sharing::IncludeResourceDescriptions < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/sharing/include_resource_descriptions.rb#38
  def on_new_investigation; end

  # source://cookstyle//lib/rubocop/cop/chef/sharing/include_resource_descriptions.rb#47
  def resource_description(param0); end
end

# source://cookstyle//lib/rubocop/cop/chef/sharing/include_resource_descriptions.rb#36
RuboCop::Cop::Chef::Sharing::IncludeResourceDescriptions::MSG = T.let(T.unsafe(nil), String)

# Resources should include examples field to allow automated documentation. Requires Chef Infra Client 13.9 or later.
#
# @example
#
#   ### correct
#   examples <<~DOC
#   **Specify a global domain value**
#
#   ```ruby
#   macos_userdefaults 'full keyboard access to all controls' do
#   key 'AppleKeyboardUIMode'
#   value '2'
#   end
#   ```
#   DOC
#
# source://cookstyle//lib/rubocop/cop/chef/sharing/include_resource_examples.rb#38
class RuboCop::Cop::Chef::Sharing::IncludeResourceExamples < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::TargetChefVersion

  # source://cookstyle//lib/rubocop/cop/chef/sharing/include_resource_examples.rb#46
  def on_new_investigation; end

  # source://cookstyle//lib/rubocop/cop/chef/sharing/include_resource_examples.rb#55
  def resource_examples(param0); end
end

# source://cookstyle//lib/rubocop/cop/chef/sharing/include_resource_examples.rb#44
RuboCop::Cop::Chef::Sharing::IncludeResourceExamples::MSG = T.let(T.unsafe(nil), String)

# Use secure Github and Gitlab URLs for source_url and issues_url
#
# @example
#
#   ### incorrect
#   source_url 'http://github.com/something/something'
#   source_url 'http://www.github.com/something/something'
#   source_url 'http://www.gitlab.com/something/something'
#   source_url 'http://gitlab.com/something/something'
#
#   ### correct
#   source_url 'http://github.com/something/something'
#   source_url 'http://gitlab.com/something/something'
#
# source://cookstyle//lib/rubocop/cop/chef/sharing/insecure_cookbook_url.rb#36
class RuboCop::Cop::Chef::Sharing::InsecureCookbookURL < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/sharing/insecure_cookbook_url.rb#42
  def insecure_cb_url?(param0 = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://cookstyle//lib/rubocop/cop/chef/sharing/insecure_cookbook_url.rb#46
  def insecure_url?(url); end

  # source://cookstyle//lib/rubocop/cop/chef/sharing/insecure_cookbook_url.rb#51
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/sharing/insecure_cookbook_url.rb#39
RuboCop::Cop::Chef::Sharing::InsecureCookbookURL::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/sharing/insecure_cookbook_url.rb#40
RuboCop::Cop::Chef::Sharing::InsecureCookbookURL::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://cookstyle//lib/rubocop/cop/chef/sharing/invalid_license_string.rb#41
class RuboCop::Cop::Chef::Sharing::InvalidLicenseString < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # private
  #
  # source://cookstyle//lib/rubocop/cop/chef/sharing/invalid_license_string.rb#530
  def autocorrect_license_string(bad_string); end

  # source://cookstyle//lib/rubocop/cop/chef/sharing/invalid_license_string.rb#516
  def license?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/sharing/invalid_license_string.rb#518
  def on_send(node); end

  # @return [Boolean]
  #
  # source://cookstyle//lib/rubocop/cop/chef/sharing/invalid_license_string.rb#534
  def valid_license?(license); end
end

# source://cookstyle//lib/rubocop/cop/chef/sharing/invalid_license_string.rb#495
RuboCop::Cop::Chef::Sharing::InvalidLicenseString::COMMON_TYPOS = T.let(T.unsafe(nil), Hash)

# source://cookstyle//lib/rubocop/cop/chef/sharing/invalid_license_string.rb#513
RuboCop::Cop::Chef::Sharing::InvalidLicenseString::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/sharing/invalid_license_string.rb#514
RuboCop::Cop::Chef::Sharing::InvalidLicenseString::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://cookstyle//lib/rubocop/cop/chef/sharing/invalid_license_string.rb#44
RuboCop::Cop::Chef::Sharing::InvalidLicenseString::VALID_LICENSE_STRING = T.let(T.unsafe(nil), Array)

# source://cookstyle//lib/rubocop/cop/chef/style/attribute_keys.rb#20
module RuboCop::Cop::Chef::Style; end

# Check which style of keys are used to access node attributes.
#
# There are two supported styles: "symbols" and "strings".
#
# @example when configuration is `EnforcedStyle: symbols`
#
#   ### incorrect
#   node['foo']
#   node["foo"]
#
#   ### correct
#   node[:foo]
# @example when configuration is `EnforcedStyle: strings`
#
#   ### incorrect
#   node[:foo]
#
#   ### correct
#   node['foo']
#   node["foo"]
#
# source://cookstyle//lib/rubocop/cop/chef/style/attribute_keys.rb#43
class RuboCop::Cop::Chef::Style::AttributeKeys < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::ConfigurableEnforcedStyle
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/style/attribute_keys.rb#50
  def node_attribute_access?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/style/attribute_keys.rb#54
  def node_level_attribute_access?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/style/attribute_keys.rb#71
  def on_node_attribute_access(node); end

  # source://cookstyle//lib/rubocop/cop/chef/style/attribute_keys.rb#58
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/style/attribute_keys.rb#47
RuboCop::Cop::Chef::Style::AttributeKeys::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/style/attribute_keys.rb#48
RuboCop::Cop::Chef::Style::AttributeKeys::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Checks for comments that mention "Chef" without context. Do you mean Chef Infra or Chef Software?
#
# @example
#
#   ### incorrect
#   Chef makes software
#   Chef configures your systems
#
#   ### correct
#   Chef Software makes software
#   Chef Infra configures your systems
#
# source://cookstyle//lib/rubocop/cop/chef/style/chef_whaaat.rb#34
class RuboCop::Cop::Chef::Style::ChefWhaaat < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/style/chef_whaaat.rb#37
  def on_new_investigation; end
end

# source://cookstyle//lib/rubocop/cop/chef/style/chef_whaaat.rb#35
RuboCop::Cop::Chef::Style::ChefWhaaat::MSG = T.let(T.unsafe(nil), String)

# Checks for incorrectly formatted headers
#
# @example
#
#   ### incorrect
#   Copyright 2013-2016 Chef Software, Inc.
#   Recipe default.rb
#   Attributes default.rb
#   License Apache2
#   Cookbook tomcat
#   Cookbook Name:: Tomcat
#   Attributes File:: default
#
#   ### correct
#   Copyright:: 2013-2016 Chef Software, Inc.
#   Recipe:: default.rb
#   Attributes:: default.rb
#   License:: Apache License, Version 2.0
#   Cookbook:: Tomcat
#
# source://cookstyle//lib/rubocop/cop/chef/style/comments_format.rb#42
class RuboCop::Cop::Chef::Style::CommentFormat < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/style/comments_format.rb#49
  def on_new_investigation; end
end

# source://cookstyle//lib/rubocop/cop/chef/style/comments_format.rb#47
RuboCop::Cop::Chef::Style::CommentFormat::CHEF_LIKE_COMMENT_REGEX = T.let(T.unsafe(nil), Regexp)

# source://cookstyle//lib/rubocop/cop/chef/style/comments_format.rb#45
RuboCop::Cop::Chef::Style::CommentFormat::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/style/comments_format.rb#46
RuboCop::Cop::Chef::Style::CommentFormat::VERBOSE_COMMENT_REGEX = T.let(T.unsafe(nil), Regexp)

# Replaces double spaces between sentences with a single space.
# Note: This is DISABLED by default.
#
# source://cookstyle//lib/rubocop/cop/chef/style/comment_sentence_spacing.rb#24
class RuboCop::Cop::Chef::Style::CommentSentenceSpacing < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/style/comment_sentence_spacing.rb#28
  def on_new_investigation; end
end

# source://cookstyle//lib/rubocop/cop/chef/style/comment_sentence_spacing.rb#26
RuboCop::Cop::Chef::Style::CommentSentenceSpacing::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/style/comments_copyright_format.rb#40
class RuboCop::Cop::Chef::Style::CopyrightCommentFormat < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/style/comments_copyright_format.rb#46
  def on_new_investigation; end

  private

  # source://cookstyle//lib/rubocop/cop/chef/style/comments_copyright_format.rb#61
  def copyright_date_range(comment); end

  # source://cookstyle//lib/rubocop/cop/chef/style/comments_copyright_format.rb#77
  def copyright_holder(comment); end

  # @return [Boolean]
  #
  # source://cookstyle//lib/rubocop/cop/chef/style/comments_copyright_format.rb#88
  def invalid_copyright_comment?(comment); end

  # Flush Opscode down the memory hole and Chef Inc is not a company
  #
  # source://cookstyle//lib/rubocop/cop/chef/style/comments_copyright_format.rb#84
  def marketing_sanitizer(name); end
end

# source://cookstyle//lib/rubocop/cop/chef/style/comments_copyright_format.rb#44
RuboCop::Cop::Chef::Style::CopyrightCommentFormat::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/style/comments_default_copyright.rb#34
class RuboCop::Cop::Chef::Style::DefaultCopyrightComments < ::RuboCop::Cop::Base
  # source://cookstyle//lib/rubocop/cop/chef/style/comments_default_copyright.rb#37
  def on_new_investigation; end
end

# source://cookstyle//lib/rubocop/cop/chef/style/comments_default_copyright.rb#35
RuboCop::Cop::Chef::Style::DefaultCopyrightComments::MSG = T.let(T.unsafe(nil), String)

# Use strings to represent file modes to avoid confusion between octal and base 10 integer formats.
#
# @example
#
#   ### incorrect
#   remote_directory '/etc/my.conf' do
#   content 'some content'
#   mode 0600
#   action :create
#   end
#
#   remote_directory 'handler' do
#   source 'handlers'
#   recursive true
#   files_mode 644
#   action :create
#   end
#
#   ### correct
#   remote_directory '/etc/my.conf' do
#   content 'some content'
#   mode '600'
#   action :create
#   end
#
#   remote_directory 'handler' do
#   source 'handlers'
#   recursive true
#   files_mode '644'
#   action :create
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/style/file_mode.rb#53
class RuboCop::Cop::Chef::Style::FileMode < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/style/file_mode.rb#63
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/style/file_mode.rb#59
  def resource_mode?(param0 = T.unsafe(nil)); end

  private

  # @return [Boolean]
  #
  # source://cookstyle//lib/rubocop/cop/chef/style/file_mode.rb#79
  def octal?(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/style/file_mode.rb#56
RuboCop::Cop::Chef::Style::FileMode::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/style/file_mode.rb#57
RuboCop::Cop::Chef::Style::FileMode::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Use :immediately instead of :immediate for resource notification timing.
#
# @example
#
#   ### incorrect
#
#   template '/etc/www/configures-apache.conf' do
#   notifies :restart, 'service[apache]', :immediate
#   end
#
#   ### correct
#
#   template '/etc/www/configures-apache.conf' do
#   notifies :restart, 'service[apache]', :immediately
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/style/immediate_notification_timing.rb#38
class RuboCop::Cop::Chef::Style::ImmediateNotificationTiming < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/style/immediate_notification_timing.rb#44
  def immediate_notify?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/style/immediate_notification_timing.rb#48
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/style/immediate_notification_timing.rb#41
RuboCop::Cop::Chef::Style::ImmediateNotificationTiming::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/style/immediate_notification_timing.rb#42
RuboCop::Cop::Chef::Style::ImmediateNotificationTiming::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# There is no need to wrap the recipe in parentheses when using the include_recipe helper.
#
# @example
#
#   ### incorrect
#   include_recipe('foo::bar')
#
#   ### correct
#   include_recipe 'foo::bar'
#
# source://cookstyle//lib/rubocop/cop/chef/style/include_recipe_with_parentheses.rb#32
class RuboCop::Cop::Chef::Style::IncludeRecipeWithParentheses < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/style/include_recipe_with_parentheses.rb#38
  def include_recipe?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/style/include_recipe_with_parentheses.rb#42
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/style/include_recipe_with_parentheses.rb#35
RuboCop::Cop::Chef::Style::IncludeRecipeWithParentheses::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/style/include_recipe_with_parentheses.rb#36
RuboCop::Cop::Chef::Style::IncludeRecipeWithParentheses::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Instead of using only_if conditionals with ! to negate the returned value, use not_if which is easier to read
#
# @example
#
#   ### incorrect
#   package 'legacy-sysv-deps' do
#   only_if { !systemd }
#   end
#
#   ### correct
#   package 'legacy-sysv-deps' do
#   not_if { systemd }
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/style/negating_only_if.rb#36
class RuboCop::Cop::Chef::Style::NegatingOnlyIf < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/style/negating_only_if.rb#41
  def negated_only_if?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/style/negating_only_if.rb#49
  def on_block(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/style/negating_only_if.rb#39
RuboCop::Cop::Chef::Style::NegatingOnlyIf::MSG = T.let(T.unsafe(nil), String)

# Don't loop over an array to set cookbook dependencies or supported platforms if you have fewer than three values to set. Setting multiple `supports` or `depends` values is simpler and easier to understand for new users.
#
# @example
#
#   ### incorrect
#
#   %w( debian ubuntu ).each do |os|
#   supports os
#   end
#
#   %w( apt yum ).each do |cb|
#   depends cb
#   end
#
#   ### correct
#
#   supports 'debian'
#   supports 'ubuntu'
#
#   depends 'apt'
#   depends 'yum'
#
# source://cookstyle//lib/rubocop/cop/chef/style/overly_complex_supports_depends_metadata.rb#44
class RuboCop::Cop::Chef::Style::OverlyComplexSupportsDependsMetadata < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/style/overly_complex_supports_depends_metadata.rb#57
  def on_block(node); end

  # source://cookstyle//lib/rubocop/cop/chef/style/overly_complex_supports_depends_metadata.rb#48
  def supports_depends_array?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/style/overly_complex_supports_depends_metadata.rb#46
RuboCop::Cop::Chef::Style::OverlyComplexSupportsDependsMetadata::MSG = T.let(T.unsafe(nil), String)

# When checking the major version number of a platform you can take the node['platform_version'] attribute and transform it to an integer to strip it down to just the major version number. This simple way of determining the major version number of a platform should be used instead of splitting the platform into multiple fields with '.' as the delimiter.
#
# @example
#
#   ### incorrect
#   node['platform_version'].split('.').first
#   node['platform_version'].split('.')[0]
#   node['platform_version'].split('.').first.to_i
#   node['platform_version'].split('.')[0].to_i
#
#   ### correct
#
#   # check to see if we're on RHEL 7 on a RHEL 7.6 node where node['platform_version] is 7.6.1810
#   if node['platform_version'].to_i == 7
#   # some code
#   end
#
# source://cookstyle//lib/rubocop/cop/chef/style/simplify_platform_major_version_check.rb#39
class RuboCop::Cop::Chef::Style::SimplifyPlatformMajorVersionCheck < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/style/simplify_platform_major_version_check.rb#49
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/style/simplify_platform_major_version_check.rb#45
  def platform_version_check?(param0 = T.unsafe(nil)); end

  private

  # if the parent is .to_i then we want to alert on that
  #
  # source://cookstyle//lib/rubocop/cop/chef/style/simplify_platform_major_version_check.rb#68
  def add_offense_to_i_if_present(node); end

  # see if the parent is a method and if it equals the passed in name
  #
  # @param node [Rubocop::AST:Node] The rubocop ast node to search
  # @param name [Symbol] The method name
  # @return [Boolean]
  #
  # source://cookstyle//lib/rubocop/cop/chef/style/simplify_platform_major_version_check.rb#80
  def parent_method_equals?(node, name); end
end

# source://cookstyle//lib/rubocop/cop/chef/style/simplify_platform_major_version_check.rb#42
RuboCop::Cop::Chef::Style::SimplifyPlatformMajorVersionCheck::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/style/simplify_platform_major_version_check.rb#43
RuboCop::Cop::Chef::Style::SimplifyPlatformMajorVersionCheck::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# When setting the allowed types for a resource to accept either true or false values it's much simpler to use true and false instead of TrueClass and FalseClass.
#
# @example
#
#   ### incorrect
#   property :foo, [TrueClass, FalseClass]
#
#   ### correct
#   property :foo, [true, false]
#
# source://cookstyle//lib/rubocop/cop/chef/style/true_false_resource_properties.rb#32
class RuboCop::Cop::Chef::Style::TrueClassFalseClassResourceProperties < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/style/true_false_resource_properties.rb#42
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/style/true_false_resource_properties.rb#38
  def trueclass_falseclass_property?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/style/true_false_resource_properties.rb#35
RuboCop::Cop::Chef::Style::TrueClassFalseClassResourceProperties::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/style/true_false_resource_properties.rb#36
RuboCop::Cop::Chef::Style::TrueClassFalseClassResourceProperties::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Use the platform_family?() helpers instead of node['os] == 'foo' for platform_families that match one-to-one with OS values. These helpers are easier to read and can accept multiple platform arguments, which greatly simplifies complex platform logic. All values of `os` from Ohai match one-to-one with `platform_family` values except for `linux`, which has no single equivalent `platform_family`.
#
# @example
#
#   ### incorrect
#   node['os'] == 'darwin'
#   node['os'] == 'windows'
#   node['os'].eql?('aix')
#   %w(netbsd openbsd freebsd).include?(node['os'])
#
#   ### correct
#   platform_family?('mac_os_x')
#   platform_family?('windows')
#   platform_family?('aix')
#   platform_family?('netbsd', 'openbsd', 'freebsd)
#
# source://cookstyle//lib/rubocop/cop/chef/style/unnecessary_os_check.rb#38
class RuboCop::Cop::Chef::Style::UnnecessaryOSCheck < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # given an ast array spit out a ruby array
  #
  # source://cookstyle//lib/rubocop/cop/chef/style/unnecessary_os_check.rb#94
  def array_from_ast(ast); end

  # source://cookstyle//lib/rubocop/cop/chef/style/unnecessary_os_check.rb#59
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/style/unnecessary_os_check.rb#51
  def os_eql?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/style/unnecessary_os_check.rb#47
  def os_equals?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/style/unnecessary_os_check.rb#55
  def os_include?(param0 = T.unsafe(nil)); end

  # return the passed value unless the value is darwin and then return mac_os_x
  #
  # source://cookstyle//lib/rubocop/cop/chef/style/unnecessary_os_check.rb#89
  def sanitized_platform(plat); end
end

# source://cookstyle//lib/rubocop/cop/chef/style/unnecessary_os_check.rb#41
RuboCop::Cop::Chef::Style::UnnecessaryOSCheck::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/style/unnecessary_os_check.rb#42
RuboCop::Cop::Chef::Style::UnnecessaryOSCheck::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# sorted list of all the os values that match 1:1 with a platform_family
#
# source://cookstyle//lib/rubocop/cop/chef/style/unnecessary_os_check.rb#45
RuboCop::Cop::Chef::Style::UnnecessaryOSCheck::UNNECESSARY_OS_VALUES = T.let(T.unsafe(nil), Array)

# Use the platform?() and platform_family?() helpers instead of a case statement that only includes a single when statement.
#
# @example
#
#   ### incorrect
#   case node['platform']
#   when 'ubuntu'
#   log "We're on Ubuntu"
#   apt_update
#   end
#
#   case node['platform_family']
#   when 'rhel'
#   include_recipe 'yum'
#   end
#
#   ### correct
#   if platform?('ubuntu')
#   log "We're on Ubuntu"
#   apt_update
#   end
#
#   include_recipe 'yum' if platform_family?('rhel')
#
# source://cookstyle//lib/rubocop/cop/chef/style/unnecessary_platform_case_statement.rb#46
class RuboCop::Cop::Chef::Style::UnnecessaryPlatformCaseStatement < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/style/unnecessary_platform_case_statement.rb#56
  def on_case(node); end

  # source://cookstyle//lib/rubocop/cop/chef/style/unnecessary_platform_case_statement.rb#52
  def platform_case?(param0 = T.unsafe(nil)); end

  private

  # determine if each branch of the case statement contains no code
  #
  # @private
  # @return [Boolean]
  #
  # source://cookstyle//lib/rubocop/cop/chef/style/unnecessary_platform_case_statement.rb#93
  def empty_case_statement?(node); end
end

# source://cookstyle//lib/rubocop/cop/chef/style/unnecessary_platform_case_statement.rb#50
RuboCop::Cop::Chef::Style::UnnecessaryPlatformCaseStatement::MSG = T.let(T.unsafe(nil), String)

# Use the platform?() and platform_family?() helpers instead of node['platform] == 'foo' and node['platform_family'] == 'bar'. These helpers are easier to read and can accept multiple platform arguments, which greatly simplifies complex platform logic.
#
# @example
#
#   ### incorrect
#   node['platform'] == 'ubuntu'
#   node['platform_family'] == 'debian'
#   node['platform'] != 'ubuntu'
#   node['platform_family'] != 'debian'
#   %w(rhel suse).include?(node['platform_family'])
#   node['platform'].eql?('ubuntu')
#
#   ### correct
#   platform?('ubuntu')
#   !platform?('ubuntu')
#   platform_family?('debian')
#   !platform_family?('debian')
#   platform_family?('rhel', 'suse')
#
# source://cookstyle//lib/rubocop/cop/chef/style/use_platform_helpers.rb#41
class RuboCop::Cop::Chef::Style::UsePlatformHelpers < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/chef/style/use_platform_helpers.rb#59
  def on_send(node); end

  # source://cookstyle//lib/rubocop/cop/chef/style/use_platform_helpers.rb#55
  def platform_eql?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/style/use_platform_helpers.rb#47
  def platform_equals?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/chef/style/use_platform_helpers.rb#51
  def platform_include?(param0 = T.unsafe(nil)); end
end

# source://cookstyle//lib/rubocop/cop/chef/style/use_platform_helpers.rb#44
RuboCop::Cop::Chef::Style::UsePlatformHelpers::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/chef/style/use_platform_helpers.rb#45
RuboCop::Cop::Chef::Style::UsePlatformHelpers::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://cookstyle//lib/rubocop/cop/inspec/deprecation/attribute_default.rb#20
module RuboCop::Cop::InSpec; end

# source://cookstyle//lib/rubocop/cop/inspec/deprecation/attribute_default.rb#21
module RuboCop::Cop::InSpec::Deprecations; end

# The Chef InSpec inputs `default` option has been replaced with the `value` option.
#
# @example
#
#   ### incorrect
#   login_defs_umask = input('login_defs_umask', default: '077', description: 'Default umask to set in login.defs')
#
#   ### correct
#   login_defs_umask = input('login_defs_umask', value: '077', description: 'Default umask to set in login.defs')
#
# source://cookstyle//lib/rubocop/cop/inspec/deprecation/attribute_default.rb#32
class RuboCop::Cop::InSpec::Deprecations::AttributeDefault < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/inspec/deprecation/attribute_default.rb#38
  def default?(param0 = T.unsafe(nil)); end

  # source://cookstyle//lib/rubocop/cop/inspec/deprecation/attribute_default.rb#42
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/inspec/deprecation/attribute_default.rb#35
RuboCop::Cop::InSpec::Deprecations::AttributeDefault::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/inspec/deprecation/attribute_default.rb#36
RuboCop::Cop::InSpec::Deprecations::AttributeDefault::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Chef InSpec attributes have been renamed to inputs. Use the `input` method not the deprecation `attribute` method to access these values.
#
# @example
#
#   ### incorrect
#   login_defs_umask = attribute('login_defs_umask', value: '077', description: 'Default umask to set in login.defs')
#
#   ### correct
#   login_defs_umask = input('login_defs_umask', value: '077', description: 'Default umask to set in login.defs')
#
# source://cookstyle//lib/rubocop/cop/inspec/deprecation/attribute_helper.rb#32
class RuboCop::Cop::InSpec::Deprecations::AttributeHelper < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://cookstyle//lib/rubocop/cop/inspec/deprecation/attribute_helper.rb#38
  def on_send(node); end
end

# source://cookstyle//lib/rubocop/cop/inspec/deprecation/attribute_helper.rb#35
RuboCop::Cop::InSpec::Deprecations::AttributeHelper::MSG = T.let(T.unsafe(nil), String)

# source://cookstyle//lib/rubocop/cop/inspec/deprecation/attribute_helper.rb#36
RuboCop::Cop::InSpec::Deprecations::AttributeHelper::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://cookstyle//lib/rubocop/monkey_patches/registry_cop.rb#4
class RuboCop::Cop::Registry
  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#51
  def initialize(cops = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#232
  def ==(other); end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#97
  def contains_cop_matching?(names); end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#179
  def cops; end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#224
  def cops_for_department(department); end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#93
  def department?(name); end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#147
  def department_missing?(badge, name); end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#72
  def departments; end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#193
  def disabled(config); end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#67
  def dismiss(cop); end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#247
  def each(&block); end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#189
  def enabled(config); end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#197
  def enabled?(cop, config); end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#213
  def enabled_pending_cop?(cop_cfg, config); end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#63
  def enlist(cop); end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#253
  def find_by_cop_name(cop_name); end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#260
  def find_cops_by_directive(directive); end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#265
  def freeze; end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#184
  def length; end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#220
  def names; end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#228
  def names_for_department(department); end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#49
  def options; end

  # we monkeypatch this warning to replace rubocop with cookstyle
  #
  # source://cookstyle//lib/rubocop/monkey_patches/registry_cop.rb#6
  def print_warning(name, path); end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#133
  def qualified_cop_name(name, path, warn: T.unsafe(nil)); end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#166
  def qualify_badge(badge); end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#243
  def select(&block); end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#236
  def sort!; end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#174
  def to_h; end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#159
  def unqualified_cop_names; end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#78
  def with_department(department); end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#84
  def without_department(department); end

  private

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#283
  def clear_enrollment_queue; end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#279
  def initialize_copy(reg); end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#312
  def registered?(badge); end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#299
  def resolve_badge(given_badge, real_badge, source_path, warn: T.unsafe(nil)); end

  # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#295
  def with(cops); end

  class << self
    # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#22
    def all; end

    # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#274
    def global; end

    # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#44
    def qualified_cop?(name); end

    # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#26
    def qualified_cop_name(name, origin, warn: T.unsafe(nil)); end

    # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#40
    def reset!; end

    # source://rubocop/1.75.5/lib/rubocop/cop/registry.rb#32
    def with_temporary_global(temp_global = T.unsafe(nil)); end
  end
end

# Common functionality for checking target chef version.
#
# source://cookstyle//lib/rubocop/cop/target_chef_version.rb#8
module RuboCop::Cop::TargetChefVersion
  # source://cookstyle//lib/rubocop/cop/target_chef_version.rb#13
  def minimum_target_chef_version(version); end

  # source://cookstyle//lib/rubocop/cop/target_chef_version.rb#9
  def required_minimum_chef_version; end

  # @return [Boolean]
  #
  # source://cookstyle//lib/rubocop/cop/target_chef_version.rb#17
  def support_target_chef_version?(version); end
end

# source://cookstyle//lib/rubocop/monkey_patches/team.rb#5
class RuboCop::Cop::Team
  # source://rubocop/1.75.5/lib/rubocop/cop/team.rb#61
  def initialize(cops, config = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://rubocop/1.75.5/lib/rubocop/cop/team.rb#72
  def autocorrect?; end

  # source://rubocop/1.75.5/lib/rubocop/cop/team.rb#57
  def cops; end

  # source://rubocop/1.75.5/lib/rubocop/cop/team.rb#76
  def debug?; end

  # source://rubocop/1.75.5/lib/rubocop/cop/team.rb#57
  def errors; end

  # source://rubocop/1.75.5/lib/rubocop/cop/team.rb#128
  def external_dependency_checksum; end

  # source://rubocop/1.75.5/lib/rubocop/cop/team.rb#120
  def forces; end

  # source://rubocop/1.75.5/lib/rubocop/cop/team.rb#82
  def inspect_file(processed_source); end

  # source://rubocop/1.75.5/lib/rubocop/cop/team.rb#91
  def investigate(processed_source, offset: T.unsafe(nil), original: T.unsafe(nil)); end

  # START COOKSTYLE MODIFICATION
  #
  # source://cookstyle//lib/rubocop/monkey_patches/team.rb#13
  def roundup_relevant_cops(processed_source); end

  # @return [Boolean]
  #
  # source://cookstyle//lib/rubocop/monkey_patches/team.rb#6
  def support_target_chef_version?(cop); end

  # source://rubocop/1.75.5/lib/rubocop/cop/team.rb#57
  def updated_source_file; end

  # source://rubocop/1.75.5/lib/rubocop/cop/team.rb#57
  def updated_source_file?; end

  # source://rubocop/1.75.5/lib/rubocop/cop/team.rb#57
  def warnings; end

  private

  # source://rubocop/1.75.5/lib/rubocop/cop/team.rb#139
  def autocorrect(processed_source, report, original:, offset:); end

  # source://rubocop/1.75.5/lib/rubocop/cop/team.rb#203
  def autocorrect_report(report, offset:, original:); end

  # source://rubocop/1.75.5/lib/rubocop/cop/team.rb#158
  def be_ready; end

  # source://rubocop/1.75.5/lib/rubocop/cop/team.rb#209
  def collate_corrections(report, offset:, original:); end

  # source://rubocop/1.75.5/lib/rubocop/cop/team.rb#225
  def each_corrector(report); end

  # source://rubocop/1.75.5/lib/rubocop/cop/team.rb#277
  def handle_error(error, location, cop); end

  # source://rubocop/1.75.5/lib/rubocop/cop/team.rb#269
  def handle_warning(error, location); end

  # source://rubocop/1.75.5/lib/rubocop/cop/team.rb#172
  def investigate_partial(cops, processed_source, offset:, original:); end

  # source://rubocop/1.75.5/lib/rubocop/cop/team.rb#252
  def process_errors(file, errors); end

  # source://rubocop/1.75.5/lib/rubocop/cop/team.rb#166
  def reset; end

  # source://rubocop/1.75.5/lib/rubocop/cop/team.rb#194
  def support_target_rails_version?(cop); end

  # source://rubocop/1.75.5/lib/rubocop/cop/team.rb#188
  def support_target_ruby_version?(cop); end

  # source://rubocop/1.75.5/lib/rubocop/cop/team.rb#240
  def suppress_clobbering; end

  # source://rubocop/1.75.5/lib/rubocop/cop/team.rb#246
  def validate_config; end

  class << self
    # source://rubocop/1.75.5/lib/rubocop/cop/team.rb#43
    def forces_for(cops); end

    # source://rubocop/1.75.5/lib/rubocop/cop/team.rb#28
    def mobilize(cop_classes, config, options = T.unsafe(nil)); end

    # source://rubocop/1.75.5/lib/rubocop/cop/team.rb#34
    def mobilize_cops(cop_classes, config, options = T.unsafe(nil)); end

    # source://rubocop/1.75.5/lib/rubocop/cop/team.rb#15
    def new(cop_or_classes, config, options = T.unsafe(nil)); end
  end
end

# we're monkey patching the config regex to allow for "cookstyle: disable whatever"
#
# source://cookstyle//lib/rubocop/monkey_patches/directive_comment.rb#5
class RuboCop::DirectiveComment
  # source://rubocop/1.75.5/lib/rubocop/directive_comment.rb#46
  def initialize(comment, cop_registry = T.unsafe(nil)); end

  # source://rubocop/1.75.5/lib/rubocop/directive_comment.rb#115
  def all_cops?; end

  # source://rubocop/1.75.5/lib/rubocop/directive_comment.rb#44
  def comment; end

  # source://rubocop/1.75.5/lib/rubocop/directive_comment.rb#120
  def cop_names; end

  # source://rubocop/1.75.5/lib/rubocop/directive_comment.rb#44
  def cop_registry; end

  # source://rubocop/1.75.5/lib/rubocop/directive_comment.rb#44
  def cops; end

  # source://rubocop/1.75.5/lib/rubocop/directive_comment.rb#131
  def department_names; end

  # source://rubocop/1.75.5/lib/rubocop/directive_comment.rb#145
  def directive_count; end

  # source://rubocop/1.75.5/lib/rubocop/directive_comment.rb#95
  def disabled?; end

  # source://rubocop/1.75.5/lib/rubocop/directive_comment.rb#110
  def disabled_all?; end

  # source://rubocop/1.75.5/lib/rubocop/directive_comment.rb#100
  def enabled?; end

  # source://rubocop/1.75.5/lib/rubocop/directive_comment.rb#105
  def enabled_all?; end

  # source://rubocop/1.75.5/lib/rubocop/directive_comment.rb#136
  def in_directive_department?(cop); end

  # source://rubocop/1.75.5/lib/rubocop/directive_comment.rb#150
  def line_number; end

  # source://rubocop/1.75.5/lib/rubocop/directive_comment.rb#59
  def malformed?; end

  # source://rubocop/1.75.5/lib/rubocop/directive_comment.rb#77
  def match?(cop_names); end

  # source://rubocop/1.75.5/lib/rubocop/directive_comment.rb#90
  def match_captures; end

  # source://rubocop/1.75.5/lib/rubocop/directive_comment.rb#67
  def missing_cop_name?; end

  # source://rubocop/1.75.5/lib/rubocop/directive_comment.rb#44
  def mode; end

  # source://rubocop/1.75.5/lib/rubocop/directive_comment.rb#141
  def overridden_by_department?(cop); end

  # source://rubocop/1.75.5/lib/rubocop/directive_comment.rb#81
  def range; end

  # source://rubocop/1.75.5/lib/rubocop/directive_comment.rb#125
  def raw_cop_names; end

  # source://rubocop/1.75.5/lib/rubocop/directive_comment.rb#72
  def single_line?; end

  # source://rubocop/1.75.5/lib/rubocop/directive_comment.rb#54
  def start_with_marker?; end

  private

  # source://rubocop/1.75.5/lib/rubocop/directive_comment.rb#167
  def all_cop_names; end

  # source://rubocop/1.75.5/lib/rubocop/directive_comment.rb#171
  def cop_names_for_department(department); end

  # source://rubocop/1.75.5/lib/rubocop/directive_comment.rb#163
  def department?(name); end

  # source://rubocop/1.75.5/lib/rubocop/directive_comment.rb#176
  def exclude_lint_department_cops(cops); end

  # source://rubocop/1.75.5/lib/rubocop/directive_comment.rb#156
  def parsed_cop_names; end

  class << self
    # source://rubocop/1.75.5/lib/rubocop/directive_comment.rb#40
    def before_comment(line); end
  end
end

# source://cookstyle//lib/rubocop/monkey_patches/directive_comment.rb#7
RuboCop::DirectiveComment::DIRECTIVE_COMMENT_REGEXP = T.let(T.unsafe(nil), Regexp)

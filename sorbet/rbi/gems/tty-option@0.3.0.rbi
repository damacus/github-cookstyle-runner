# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `tty-option` gem.
# Please instead update this file by running `bin/tapioca gem tty-option`.


# source://tty-option//lib/tty/option/const.rb#3
module TTY; end

# source://tty-option//lib/tty/option/const.rb#4
module TTY::Option
  include ::TTY::Option::Interface

  mixes_in_class_methods ::TTY::Option::DSL
  mixes_in_class_methods ::TTY::Option::Inheritance

  class << self
    # Enhance object with command line option parsing
    #
    # @api public
    #
    # source://tty-option//lib/tty/option.rb#15
    def included(base); end
  end
end

# source://tty-option//lib/tty/option/aggregate_errors.rb#9
class TTY::Option::AggregateErrors
  include ::Enumerable
  include ::TTY::Option::UsageWrapper
  extend ::Forwardable

  # Create an intance from the passed error objects
  #
  # @api public
  # @return [AggregateErrors] a new instance of AggregateErrors
  #
  # source://tty-option//lib/tty/option/aggregate_errors.rb#19
  def initialize(errors = T.unsafe(nil)); end

  # Add error
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/aggregate_errors.rb#26
  def add(error); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def any?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def clear(*args, **_arg1, &block); end

  # Enumerate each error
  #
  # @api public
  # @example
  #   errors = AggregateErrors.new
  #   errors.each do |error|
  #   # instance of TTY::Option::Error
  #   end
  #
  # source://tty-option//lib/tty/option/aggregate_errors.rb#40
  def each(&block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def empty?(*args, **_arg1, &block); end

  # All error messages
  #
  # @api public
  # @example
  #   errors = AggregateErrors.new
  #   errors.add TTY::OptionInvalidArgument.new("invalid argument")
  #   errors.messages
  #   # => ["invalid argument"]
  #
  # source://tty-option//lib/tty/option/aggregate_errors.rb#53
  def messages; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def size(*args, **_arg1, &block); end

  # Format errors for display in terminal
  #
  # @api public
  # @example
  #   errors = AggregateErrors.new
  #   errors.add TTY::OptionInvalidArgument.new("invalid argument")
  #   errors.summary
  #   # =>
  #   # Error: invalid argument
  # @param :width [Integer]
  # @param :indent [Integer]
  # @return [String]
  #
  # source://tty-option//lib/tty/option/aggregate_errors.rb#72
  def summary(width: T.unsafe(nil), indent: T.unsafe(nil)); end
end

# Raised when an option matches more than one parameter option
#
# source://tty-option//lib/tty/option/errors.rb#47
class TTY::Option::AmbiguousOption < ::TTY::Option::ParseError; end

# Raised when a parameter invariant is invalid
#
# source://tty-option//lib/tty/option/errors.rb#8
class TTY::Option::ConfigurationError < ::TTY::Option::Error; end

# source://tty-option//lib/tty/option/const.rb#5
module TTY::Option::Const; end

# source://tty-option//lib/tty/option/const.rb#6
TTY::Option::Const::Undefined = T.let(T.unsafe(nil), Object)

# Raised when overriding already defined conversion
#
# source://tty-option//lib/tty/option/errors.rb#14
class TTY::Option::ConversionAlreadyDefined < ::TTY::Option::Error; end

# Raised when conversion cannot be performed
#
# source://tty-option//lib/tty/option/errors.rb#17
class TTY::Option::ConversionError < ::TTY::Option::Error; end

# source://tty-option//lib/tty/option/conversions.rb#8
module TTY::Option::Conversions
  extend ::TTY::Option::Converter
end

# source://tty-option//lib/tty/option/conversions.rb#12
TTY::Option::Conversions::FALSE_VALUES = T.let(T.unsafe(nil), Regexp)

# source://tty-option//lib/tty/option/conversions.rb#11
TTY::Option::Conversions::TRUE_VALUES = T.let(T.unsafe(nil), Regexp)

# source://tty-option//lib/tty/option/converter.rb#5
module TTY::Option::Converter
  # Retrieve a conversion type
  #
  # @api public
  # @param name [String]
  # @return [Proc]
  #
  # source://tty-option//lib/tty/option/converter.rb#48
  def [](name); end

  # Check if conversion is available
  #
  # @api public
  # @param name [String]
  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/converter.rb#20
  def contain?(name); end

  # Store conversions
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/converter.rb#9
  def conversions; end

  # Register a new conversion type
  #
  # @api public
  # @example
  #   convert(:int) { |val| Float(val).to_i }
  #
  # source://tty-option//lib/tty/option/converter.rb#31
  def convert(*names, &block); end

  # Retrieve a conversion type
  #
  # @api public
  # @param name [String]
  # @return [Proc]
  #
  # source://tty-option//lib/tty/option/converter.rb#48
  def fetch(name); end

  # Raise an error for unknown conversion type
  #
  # @api public
  # @raise [UnsupportedConversion]
  #
  # source://tty-option//lib/tty/option/converter.rb#57
  def raise_unsupported_error(conv_name); end
end

# source://tty-option//lib/tty/option/dsl/arity.rb#5
module TTY::Option::DSL
  include ::TTY::Option::DSL::Arity
  include ::TTY::Option::DSL::Conversion
  include ::TTY::Option::Inflection
  extend ::Forwardable

  # Specify an argument
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/dsl.rb#40
  def argument(name, **settings, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def banner(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def command(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def desc(*args, **_arg1, &block); end

  # Specify environment variable
  #
  # @api public
  # @example
  #   EDITOR=vim
  #
  # source://tty-option//lib/tty/option/dsl.rb#50
  def env(name, **settings, &block); end

  # Specify environment variable
  #
  # @api public
  # @example
  #   EDITOR=vim
  #
  # source://tty-option//lib/tty/option/dsl.rb#50
  def environment(name, **settings, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def example(*args, **_arg1, &block); end

  # A shortcut to specify flag option
  #
  # @api public
  # @example
  #   --foo
  #
  # source://tty-option//lib/tty/option/dsl.rb#71
  def flag(name, **settings, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def footer(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def header(*args, **_arg1, &block); end

  # Remove parameter from the parameters definitions list
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/dsl.rb#92
  def ignore(*names); end

  # Specify a keyword
  #
  # @api public
  # @example
  #   foo=bar
  #
  # source://tty-option//lib/tty/option/dsl.rb#61
  def keyword(name, **settings, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def no_command(*args, **_arg1, &block); end

  # Specify an option
  #
  # @api public
  # @example
  #   -f
  #   --foo
  #   --foo bar
  #
  # source://tty-option//lib/tty/option/dsl.rb#84
  def opt(name, **settings, &block); end

  # Specify an option
  #
  # @api public
  # @example
  #   -f
  #   --foo
  #   --foo bar
  #
  # source://tty-option//lib/tty/option/dsl.rb#84
  def option(name, **settings, &block); end

  # Holds all parameters
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/dsl.rb#100
  def parameters; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def program(*args, **_arg1, &block); end

  # Remove parameter from the parameters definitions list
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/dsl.rb#92
  def skip(*names); end

  # Holds the usage information
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/dsl.rb#29
  def usage(**properties, &block); end
end

# source://tty-option//lib/tty/option/dsl/arity.rb#6
module TTY::Option::DSL::Arity
  # Zero or more arity
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/dsl/arity.rb#20
  def any; end

  # Zero or more arity
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/dsl/arity.rb#20
  def any_args; end

  # At last number values for arity
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/dsl/arity.rb#43
  def at_least(number); end

  # @api public
  #
  # source://tty-option//lib/tty/option/dsl/arity.rb#8
  def one; end

  # One or more arity
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/dsl/arity.rb#29
  def one_or_more; end

  # @api public
  #
  # source://tty-option//lib/tty/option/dsl/arity.rb#13
  def two; end

  # Two or more arity
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/dsl/arity.rb#36
  def two_or_more; end

  # Zero or more arity
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/dsl/arity.rb#20
  def zero_or_more; end
end

# source://tty-option//lib/tty/option/dsl/conversion.rb#6
module TTY::Option::DSL::Conversion
  # source://tty-option//lib/tty/option/dsl/conversion.rb#11
  def list_of(type); end

  # source://tty-option//lib/tty/option/dsl/conversion.rb#7
  def map_of(type); end
end

# Responsible for deep copying an object
#
# @api private
#
# source://tty-option//lib/tty/option/deep_dup.rb#8
module TTY::Option::DeepDup
  class << self
    # Deep copy an object
    #
    # @api public
    # @example
    #   DeepDeup.deep_dup({foo: {bar: [1, 2]}})
    # @param object [Object] the object to deep copy
    # @param cache [Hash] the cache of copied objects
    # @return [Object]
    #
    # source://tty-option//lib/tty/option/deep_dup.rb#26
    def deep_dup(object, cache = T.unsafe(nil)); end

    private

    # Deep copy an array
    #
    # @api private
    # @param object [Array] the array object to deep copy
    # @param cache [Hash] the cache of copied objects
    # @return [Array]
    #
    # source://tty-option//lib/tty/option/deep_dup.rb#46
    def deep_dup_array(object, cache); end

    # Deep copy a hash
    #
    # @api private
    # @param object [Hash] the hash object to deep copy
    # @param cache [Hash] the cache of copied objects
    # @return [Hash]
    #
    # source://tty-option//lib/tty/option/deep_dup.rb#63
    def deep_dup_hash(object, cache); end
  end
end

# @api private
#
# source://tty-option//lib/tty/option/deep_dup.rb#9
TTY::Option::DeepDup::NONDUPLICATABLE = T.let(T.unsafe(nil), Array)

# source://tty-option//lib/tty/option/errors.rb#5
class TTY::Option::Error < ::StandardError; end

# source://tty-option//lib/tty/option/error_aggregator.rb#7
class TTY::Option::ErrorAggregator
  include ::TTY::Option::Inflection

  # @return [ErrorAggregator] a new instance of ErrorAggregator
  #
  # source://tty-option//lib/tty/option/error_aggregator.rb#13
  def initialize(errors = T.unsafe(nil), raise_on_parse_error: T.unsafe(nil)); end

  # Record or raise an error
  #
  # @api public
  # @param error [TTY::Option::Error]
  # @param message [String]
  #
  # source://tty-option//lib/tty/option/error_aggregator.rb#24
  def call(error, message = T.unsafe(nil)); end

  # Collected errors
  #
  # source://tty-option//lib/tty/option/error_aggregator.rb#11
  def errors; end
end

# Responsible for formatting help display
#
# @api private
#
# source://tty-option//lib/tty/option/formatter.rb#11
class TTY::Option::Formatter
  include ::TTY::Option::UsageWrapper

  # Create a Formatter instance
  #
  # @api public
  # @param parameters [TTY::Option::Parameters] the parameters to format
  # @param usage [TTY::Option::Usage] the usage to format
  # @param param_display [Proc] the parameter display formatter, by default, uppercases all chars
  # @param order [Proc] the order for displaying parameters, by default alphabetical
  # @param indent [Integer] the indent for help display
  # @param width [Integer] the width at which to wrap the help display, by default 80 columns
  # @return [Formatter] a new instance of Formatter
  #
  # source://tty-option//lib/tty/option/formatter.rb#59
  def initialize(parameters, usage, param_display: T.unsafe(nil), width: T.unsafe(nil), order: T.unsafe(nil), indent: T.unsafe(nil)); end

  # Generate help display
  #
  # @api public
  # @example
  #   formatter.help
  # @return [String]
  # @yieldparam sections [TTY::Option::Sections]
  #
  # source://tty-option//lib/tty/option/formatter.rb#89
  def help; end

  # Generate help arguments
  #
  # @api public
  # @example
  #   formatter.help_arguments
  # @return [String]
  #
  # source://tty-option//lib/tty/option/formatter.rb#165
  def help_arguments; end

  # Generate help banner
  #
  # @api public
  # @example
  #   formatter.help_banner
  # @return [String]
  #
  # source://tty-option//lib/tty/option/formatter.rb#141
  def help_banner; end

  # Generate help description
  #
  # @api public
  # @example
  #   formatter.help_description
  # @return [String]
  #
  # source://tty-option//lib/tty/option/formatter.rb#153
  def help_description; end

  # Generate help environment variables
  #
  # @api public
  # @example
  #   formatter.help_environments
  # @return [String]
  #
  # source://tty-option//lib/tty/option/formatter.rb#208
  def help_environments; end

  # Generate help examples
  #
  # @api public
  # @example
  #   formatter.help_examples
  # @return [String]
  #
  # source://tty-option//lib/tty/option/formatter.rb#221
  def help_examples; end

  # Generate help footer
  #
  # @api public
  # @example
  #   formatter.help_footer
  # @return [String]
  #
  # source://tty-option//lib/tty/option/formatter.rb#234
  def help_footer; end

  # Generate help header
  #
  # @api public
  # @example
  #   formatter.help_header
  # @return [String]
  #
  # source://tty-option//lib/tty/option/formatter.rb#129
  def help_header; end

  # Generate help keywords
  #
  # @api public
  # @example
  #   formatter.help_keywords
  # @return [String]
  #
  # source://tty-option//lib/tty/option/formatter.rb#180
  def help_keywords; end

  # Generate help options
  #
  # @api public
  # @example
  #   formatter.help_options
  # @return [String]
  #
  # source://tty-option//lib/tty/option/formatter.rb#195
  def help_options; end

  private

  # Find the longest long option
  #
  # @api private
  # @return [Integer, nil]
  #
  # source://tty-option//lib/tty/option/formatter.rb#454
  def find_longest_long_option; end

  # Find the longest parameter
  #
  # @api private
  # @param params [Array<TTY::Option::Parameter>] the parameters to search
  # @return [Integer, nil]
  # @yield [TTY::Option::Parameter]
  #
  # source://tty-option//lib/tty/option/formatter.rb#469
  def find_longest_parameter(params, &name_selector); end

  # Find the longest short option
  #
  # @api private
  # @return [Integer, nil]
  #
  # source://tty-option//lib/tty/option/formatter.rb#442
  def find_longest_short_option; end

  # Format argument usage
  #
  # @api private
  # @param arg [TTY::Option::Parameter::Argument] the argument to format
  # @return [String]
  #
  # source://tty-option//lib/tty/option/formatter.rb#280
  def format_argument_usage(arg); end

  # Format arguments usage
  #
  # @api private
  # @return [String]
  #
  # source://tty-option//lib/tty/option/formatter.rb#262
  def format_arguments_usage; end

  # Format a default value
  #
  # @api private
  # @param param [TTY::Option::Parameter] the parameter to format
  # @return [String]
  #
  # source://tty-option//lib/tty/option/formatter.rb#643
  def format_default(param); end

  # Format multiline description
  #
  # @api private
  # @return [String]
  #
  # source://tty-option//lib/tty/option/formatter.rb#414
  def format_description; end

  # Format examples section
  #
  # @api private
  # @return [String]
  #
  # source://tty-option//lib/tty/option/formatter.rb#658
  def format_examples; end

  # Format keyword usage
  #
  # @api private
  # @param kwarg [TTY::Option::Parameter::Keyword] the keyword to format
  # @return [String]
  #
  # source://tty-option//lib/tty/option/formatter.rb#333
  def format_keyword_usage(kwarg); end

  # Format keywords usage
  #
  # @api private
  # @return [String]
  #
  # source://tty-option//lib/tty/option/formatter.rb#315
  def format_keywords_usage; end

  # Format a long option
  #
  # @api private
  # @param option [TTY::Option::Parameter::Option] the option to format
  # @param longest [Integer] the longest long option length
  # @return [String]
  #
  # source://tty-option//lib/tty/option/formatter.rb#541
  def format_long_option(option, longest); end

  # Format multiline content
  #
  # @api private
  # @param lines [Array<Array<String>>] the lines to format
  # @param indent [Integer] the indent for the lines
  # @return [String]
  #
  # source://tty-option//lib/tty/option/formatter.rb#672
  def format_multiline(lines, indent); end

  # Format an option
  #
  # @api private
  # @param option [TTY::Option::Parameter::Option] the option to format
  # @param longest_short [Integer, nil] the longest short option length or nil
  # @param longest_long [Integer, nil] the longest long option length or nil
  # @return [String]
  #
  # source://tty-option//lib/tty/option/formatter.rb#487
  def format_option(option, longest_short, longest_long); end

  # Format options
  #
  # @api private
  # @return [String]
  #
  # source://tty-option//lib/tty/option/formatter.rb#423
  def format_options; end

  # Format a parameter description
  #
  # @api private
  # @param param [TTY::Option::Parameter] the parameter to format
  # @return [String]
  #
  # source://tty-option//lib/tty/option/formatter.rb#579
  def format_parameter_description(param); end

  # Format parameter usage
  #
  # @api private
  # @param param [TTY::Option::Parameter] the parameter to format
  # @param param_name [String] the parameter name
  # @return [String]
  #
  # source://tty-option//lib/tty/option/formatter.rb#295
  def format_parameter_usage(param, param_name); end

  # Format permitted values
  #
  # @api private
  # @param values [Parameter] the permitted values to format
  # @return [String]
  #
  # source://tty-option//lib/tty/option/formatter.rb#629
  def format_permitted(values); end

  # Format section parameters
  #
  # @api private
  # @param params [Array<TTY::Option::Parameter>] the parameters to format
  # @param name_selector [Proc] the parameter name selector, by default, calls the name
  # @return [String]
  #
  # source://tty-option//lib/tty/option/formatter.rb#370
  def format_section(params, name_selector = T.unsafe(nil)); end

  # Format section parameter
  #
  # @api private
  # @param param [TTY::Option::Parameter] the parameter to format
  # @param longest_param [Integer] the longest parameter length
  # @param name_selector [Proc] the parameter name selector, by default, calls the name
  # @return [String]
  #
  # source://tty-option//lib/tty/option/formatter.rb#392
  def format_section_parameter(param, longest_param, name_selector); end

  # Format a short option
  #
  # @api private
  # @param option [TTY::Option::Parameter::Option] the option to format
  # @param longest [Integer] the longest short option length
  # @return [String]
  #
  # source://tty-option//lib/tty/option/formatter.rb#521
  def format_short_option(option, longest); end

  # Format default usage banner
  #
  # @api private
  # @return [String]
  #
  # source://tty-option//lib/tty/option/formatter.rb#245
  def format_usage; end

  # Format keyword name
  #
  # @api private
  # @param kwarg [TTY::Option::Parameter::Keyword] the keyword to format
  # @param param_display [Proc] the parameter display formatter, by default, uppercases all chars
  # @return [String]
  #
  # source://tty-option//lib/tty/option/formatter.rb#348
  def kwarg_param_display(kwarg, param_display = T.unsafe(nil)); end

  # Check whether or not parameter has default
  #
  # @api private
  # @param param [TTY::Option::Parameter] the parameter to check for default
  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/formatter.rb#617
  def parameter_default?(param); end

  # Check whether or not parameter has description
  #
  # @api private
  # @param param [TTY::Option::Parameter] the parameter to check for description
  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/formatter.rb#605
  def parameter_description?(param); end

  # Short and long option separator
  #
  # @api private
  # @param option [TTY::Option::Parameter::Option] the option to separate short and long names
  # @return [String]
  #
  # source://tty-option//lib/tty/option/formatter.rb#561
  def short_and_long_option_separator(option); end

  class << self
    # Generate help for parameters and usage
    #
    # @api public
    # @param parameters [TTY::Option::Parameters] the parameters to format
    # @param usage [TTY::Option::Usage] the usage to format
    # @return [String]
    #
    # source://tty-option//lib/tty/option/formatter.rb#39
    def help(parameters, usage, **config, &block); end
  end
end

# @api private
#
# source://tty-option//lib/tty/option/formatter.rb#14
TTY::Option::Formatter::BOOLEANS = T.let(T.unsafe(nil), Array)

# @api private
#
# source://tty-option//lib/tty/option/formatter.rb#24
TTY::Option::Formatter::DEFAULT_NAME_SELECTOR = T.let(T.unsafe(nil), Proc)

# @api private
#
# source://tty-option//lib/tty/option/formatter.rb#25
TTY::Option::Formatter::DEFAULT_ORDER = T.let(T.unsafe(nil), Proc)

# @api private
#
# source://tty-option//lib/tty/option/formatter.rb#26
TTY::Option::Formatter::DEFAULT_PARAM_DISPLAY = T.let(T.unsafe(nil), Proc)

# @api private
#
# source://tty-option//lib/tty/option/formatter.rb#15
TTY::Option::Formatter::DEFAULT_WIDTH = T.let(T.unsafe(nil), Integer)

# @api private
#
# source://tty-option//lib/tty/option/formatter.rb#16
TTY::Option::Formatter::DOUBLE_SPACE = T.let(T.unsafe(nil), String)

# @api private
#
# source://tty-option//lib/tty/option/formatter.rb#17
TTY::Option::Formatter::ELLIPSIS = T.let(T.unsafe(nil), String)

# @api private
#
# source://tty-option//lib/tty/option/formatter.rb#18
TTY::Option::Formatter::EMPTY = T.let(T.unsafe(nil), String)

# @api private
#
# source://tty-option//lib/tty/option/formatter.rb#19
TTY::Option::Formatter::LIST_SEPARATOR = T.let(T.unsafe(nil), String)

# @api private
#
# source://tty-option//lib/tty/option/formatter.rb#20
TTY::Option::Formatter::MAP_SEPARATOR = T.let(T.unsafe(nil), String)

# @api private
#
# source://tty-option//lib/tty/option/formatter.rb#21
TTY::Option::Formatter::NEWLINE = T.let(T.unsafe(nil), String)

# @api private
#
# source://tty-option//lib/tty/option/formatter.rb#27
TTY::Option::Formatter::NOOP_PROC = T.let(T.unsafe(nil), Proc)

# @api private
#
# source://tty-option//lib/tty/option/formatter.rb#22
TTY::Option::Formatter::SPACE = T.let(T.unsafe(nil), String)

# source://tty-option//lib/tty/option/inflection.rb#5
module TTY::Option::Inflection
  private

  # Convert class name to dashed case
  #
  # @api public
  # @example
  #   dasherize("ErrorAggregator")
  #   # => "error-aggregator"
  #
  # source://tty-option//lib/tty/option/inflection.rb#44
  def dasherize(name); end

  # Remove all modules/class names
  #
  # @api public
  # @example
  #   demodulize("TTY::Option::ErrorAggregator")
  #   # => "ErrorAggregator"
  # @return [String]
  #
  # source://tty-option//lib/tty/option/inflection.rb#15
  def demodulize(name); end

  # Convert class name to underscore
  #
  # @api public
  # @example
  #   underscore("ErrorAggregator")
  #   # => "error_aggregator"
  # @return [String]
  #
  # source://tty-option//lib/tty/option/inflection.rb#29
  def underscore(name); end

  class << self
    # Convert class name to dashed case
    #
    # @api public
    # @example
    #   dasherize("ErrorAggregator")
    #   # => "error-aggregator"
    #
    # source://tty-option//lib/tty/option/inflection.rb#44
    def dasherize(name); end

    # Remove all modules/class names
    #
    # @api public
    # @example
    #   demodulize("TTY::Option::ErrorAggregator")
    #   # => "ErrorAggregator"
    # @return [String]
    #
    # source://tty-option//lib/tty/option/inflection.rb#15
    def demodulize(name); end

    # Convert class name to underscore
    #
    # @api public
    # @example
    #   underscore("ErrorAggregator")
    #   # => "error_aggregator"
    # @return [String]
    #
    # source://tty-option//lib/tty/option/inflection.rb#29
    def underscore(name); end
  end
end

# source://tty-option//lib/tty/option.rb#23
module TTY::Option::Inheritance
  # When class is inherited copy over parameter definitions
  # This allows for definition of global parameters without
  # affecting child class parameters and vice versa.
  #
  # source://tty-option//lib/tty/option.rb#27
  def inherited(subclass); end
end

# source://tty-option//lib/tty/option.rb#33
module TTY::Option::Interface
  # Provide a formatted help usage for the configured parameters
  #
  # @api public
  # @return [String]
  #
  # source://tty-option//lib/tty/option.rb#63
  def help(**config, &block); end

  # The parsed parameters
  #
  # @api public
  #
  # source://tty-option//lib/tty/option.rb#37
  def params; end

  # Parse command line arguments
  #
  # @api public
  # @param argv [Array<String>] the command line arguments
  # @param env [Hash] the hash of environment variables
  #
  # source://tty-option//lib/tty/option.rb#49
  def parse(argv = T.unsafe(nil), env = T.unsafe(nil), check_invalid_params: T.unsafe(nil), raise_on_parse_error: T.unsafe(nil)); end
end

# Raised when parameter argument doesn't match expected value
#
# source://tty-option//lib/tty/option/errors.rb#50
class TTY::Option::InvalidArgument < ::TTY::Option::ParseError
  # @return [InvalidArgument] a new instance of InvalidArgument
  #
  # source://tty-option//lib/tty/option/errors.rb#53
  def initialize(param_or_message, value = T.unsafe(nil)); end
end

# source://tty-option//lib/tty/option/errors.rb#51
TTY::Option::InvalidArgument::MESSAGE = T.let(T.unsafe(nil), String)

# Raised when number of parameter arguments doesn't match
#
# source://tty-option//lib/tty/option/errors.rb#70
class TTY::Option::InvalidArity < ::TTY::Option::ParseError
  # @return [InvalidArity] a new instance of InvalidArity
  #
  # source://tty-option//lib/tty/option/errors.rb#73
  def initialize(param_or_message, arity = T.unsafe(nil)); end

  # Pluralize a noun
  #
  # @api private
  #
  # source://tty-option//lib/tty/option/errors.rb#94
  def pluralize(noun, count = T.unsafe(nil)); end
end

# source://tty-option//lib/tty/option/errors.rb#71
TTY::Option::InvalidArity::MESSAGE = T.let(T.unsafe(nil), String)

# Raised when conversion provided with unexpected argument
#
# source://tty-option//lib/tty/option/errors.rb#100
class TTY::Option::InvalidConversionArgument < ::TTY::Option::ParseError
  # @return [InvalidConversionArgument] a new instance of InvalidConversionArgument
  #
  # source://tty-option//lib/tty/option/errors.rb#104
  def initialize(param, value); end
end

# source://tty-option//lib/tty/option/errors.rb#101
TTY::Option::InvalidConversionArgument::MESSAGE = T.let(T.unsafe(nil), String)

# Raised when found unrecognized parameter
#
# source://tty-option//lib/tty/option/errors.rb#44
class TTY::Option::InvalidParameter < ::TTY::Option::ParseError; end

# Raised when option requires an argument
#
# source://tty-option//lib/tty/option/errors.rb#113
class TTY::Option::MissingArgument < ::TTY::Option::ParseError
  # @return [MissingArgument] a new instance of MissingArgument
  #
  # source://tty-option//lib/tty/option/errors.rb#116
  def initialize(param); end
end

# source://tty-option//lib/tty/option/errors.rb#114
TTY::Option::MissingArgument::MESSAGE = T.let(T.unsafe(nil), String)

# Raised when a parameter is required but not present
#
# source://tty-option//lib/tty/option/errors.rb#124
class TTY::Option::MissingParameter < ::TTY::Option::ParseError
  # @return [MissingParameter] a new instance of MissingParameter
  #
  # source://tty-option//lib/tty/option/errors.rb#127
  def initialize(param_or_message); end
end

# source://tty-option//lib/tty/option/errors.rb#125
TTY::Option::MissingParameter::MESSAGE = T.let(T.unsafe(nil), String)

# source://tty-option//lib/tty/option/param_conversion.rb#8
module TTY::Option::ParamConversion
  private

  # Convert parameter value to another type
  #
  # @api public
  # @example
  #   param = Parameter::Argument.create(:foo, convert: :int)
  #   result = ParamConversion[param, "12"]
  #   result.value # => 12
  #
  # source://tty-option//lib/tty/option/param_conversion.rb#17
  def [](param, value); end

  # Convert parameter value to another type
  #
  # @api public
  # @example
  #   param = Parameter::Argument.create(:foo, convert: :int)
  #   result = ParamConversion[param, "12"]
  #   result.value # => 12
  #
  # source://tty-option//lib/tty/option/param_conversion.rb#17
  def call(param, value); end

  class << self
    # Convert parameter value to another type
    #
    # @api public
    # @example
    #   param = Parameter::Argument.create(:foo, convert: :int)
    #   result = ParamConversion[param, "12"]
    #   result.value # => 12
    #
    # source://tty-option//lib/tty/option/param_conversion.rb#17
    def [](param, value); end

    # Convert parameter value to another type
    #
    # @api public
    # @example
    #   param = Parameter::Argument.create(:foo, convert: :int)
    #   result = ParamConversion[param, "12"]
    #   result.value # => 12
    #
    # source://tty-option//lib/tty/option/param_conversion.rb#17
    def call(param, value); end
  end
end

# source://tty-option//lib/tty/option/param_permitted.rb#7
module TTY::Option::ParamPermitted
  private

  # Convert parameter value to another type
  #
  # @api public
  # @example
  #   param = Parameter::Argument.create(:foo, permit: %w[11 12 13])
  #   ParamPermitted[param, "12"] # => 12
  #
  # source://tty-option//lib/tty/option/param_permitted.rb#15
  def [](param, value); end

  # Convert parameter value to another type
  #
  # @api public
  # @example
  #   param = Parameter::Argument.create(:foo, permit: %w[11 12 13])
  #   ParamPermitted[param, "12"] # => 12
  #
  # source://tty-option//lib/tty/option/param_permitted.rb#15
  def call(param, value); end

  class << self
    # Convert parameter value to another type
    #
    # @api public
    # @example
    #   param = Parameter::Argument.create(:foo, permit: %w[11 12 13])
    #   ParamPermitted[param, "12"] # => 12
    #
    # source://tty-option//lib/tty/option/param_permitted.rb#15
    def [](param, value); end

    # Convert parameter value to another type
    #
    # @api public
    # @example
    #   param = Parameter::Argument.create(:foo, permit: %w[11 12 13])
    #   ParamPermitted[param, "12"] # => 12
    #
    # source://tty-option//lib/tty/option/param_permitted.rb#15
    def call(param, value); end
  end
end

# Responsible for parameter validation
#
# @api private
#
# source://tty-option//lib/tty/option/param_validation.rb#10
module TTY::Option::ParamValidation
  private

  # Validate parameter value against validation rule
  #
  # @api public
  # @example
  #   param = TTY::Option::Parameter::Option.create(:foo, validate: "\d+")
  #   TTY::Option::ParamValidation[param, "12"] # => "12"
  # @param param [TTY::Option::Parameter] the parameter with a validation rule
  # @param value [Object] the value to validate
  # @return [TTY::Option::Result]
  #
  # source://tty-option//lib/tty/option/param_validation.rb#25
  def [](param, value); end

  # Validate parameter value against validation rule
  #
  # @api public
  # @example
  #   param = TTY::Option::Parameter::Option.create(:foo, validate: "\d+")
  #   TTY::Option::ParamValidation[param, "12"] # => "12"
  # @param param [TTY::Option::Parameter] the parameter with a validation rule
  # @param value [Object] the value to validate
  # @return [TTY::Option::Result]
  #
  # source://tty-option//lib/tty/option/param_validation.rb#25
  def call(param, value); end

  # Check whether a parameter value is valid or not
  #
  # @api private
  # @param param [TTY::Option::Parameter] the parameter with a validation rule
  # @param value [Object] the value to validate
  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/param_validation.rb#140
  def valid?(param, value); end

  # Create an error for an invalid parameter value
  #
  # @api private
  # @param param [TTY::Option::Parameter] the parameter with a validation rule
  # @param value [Object] the value to validate
  # @return [TTY::Option::InvalidArgument, nil]
  #
  # source://tty-option//lib/tty/option/param_validation.rb#122
  def valid_or_error(param, value); end

  # Validate array values
  #
  # @api private
  # @param param [TTY::Option::Parameter] the parameter with a validation rule
  # @param values [Object] the values in an array to validate
  # @return [Array]
  # @yield [TTY::Option::InvalidArgument]
  #
  # source://tty-option//lib/tty/option/param_validation.rb#82
  def validate_array(param, values); end

  # Validate hash values
  #
  # @api private
  # @param param [TTY::Option::Parameter] the parameter with a validation rule
  # @param values [Object] the values in a hash to validate
  # @return [Hash]
  # @yield [TTY::Option::InvalidArgument]
  #
  # source://tty-option//lib/tty/option/param_validation.rb#103
  def validate_hash(param, values); end

  # Validate an object
  #
  # @api private
  # @param param [TTY::Option::Parameter] the parameter with a validation rule
  # @param value [Object] the value to validate
  # @return [Object, nil]
  # @yield [TTY::Option::InvalidArgument]
  #
  # source://tty-option//lib/tty/option/param_validation.rb#56
  def validate_object(param, value, &block); end

  class << self
    # Validate parameter value against validation rule
    #
    # @api public
    # @example
    #   param = TTY::Option::Parameter::Option.create(:foo, validate: "\d+")
    #   TTY::Option::ParamValidation[param, "12"] # => "12"
    # @param param [TTY::Option::Parameter] the parameter with a validation rule
    # @param value [Object] the value to validate
    # @return [TTY::Option::Result]
    #
    # source://tty-option//lib/tty/option/param_validation.rb#25
    def [](param, value); end

    # Validate parameter value against validation rule
    #
    # @api public
    # @example
    #   param = TTY::Option::Parameter::Option.create(:foo, validate: "\d+")
    #   TTY::Option::ParamValidation[param, "12"] # => "12"
    # @param param [TTY::Option::Parameter] the parameter with a validation rule
    # @param value [Object] the value to validate
    # @return [TTY::Option::Result]
    #
    # source://tty-option//lib/tty/option/param_validation.rb#25
    def call(param, value); end

    private

    # Check whether a parameter value is valid or not
    #
    # @api private
    # @param param [TTY::Option::Parameter] the parameter with a validation rule
    # @param value [Object] the value to validate
    # @return [Boolean]
    #
    # source://tty-option//lib/tty/option/param_validation.rb#140
    def valid?(param, value); end

    # Create an error for an invalid parameter value
    #
    # @api private
    # @param param [TTY::Option::Parameter] the parameter with a validation rule
    # @param value [Object] the value to validate
    # @return [TTY::Option::InvalidArgument, nil]
    #
    # source://tty-option//lib/tty/option/param_validation.rb#122
    def valid_or_error(param, value); end

    # Validate array values
    #
    # @api private
    # @param param [TTY::Option::Parameter] the parameter with a validation rule
    # @param values [Object] the values in an array to validate
    # @return [Array]
    # @yield [TTY::Option::InvalidArgument]
    #
    # source://tty-option//lib/tty/option/param_validation.rb#82
    def validate_array(param, values); end

    # Validate hash values
    #
    # @api private
    # @param param [TTY::Option::Parameter] the parameter with a validation rule
    # @param values [Object] the values in a hash to validate
    # @return [Hash]
    # @yield [TTY::Option::InvalidArgument]
    #
    # source://tty-option//lib/tty/option/param_validation.rb#103
    def validate_hash(param, values); end

    # Validate an object
    #
    # @api private
    # @param param [TTY::Option::Parameter] the parameter with a validation rule
    # @param value [Object] the value to validate
    # @return [Object, nil]
    # @yield [TTY::Option::InvalidArgument]
    #
    # source://tty-option//lib/tty/option/param_validation.rb#56
    def validate_object(param, value, &block); end
  end
end

# source://tty-option//lib/tty/option/parameter.rb#9
class TTY::Option::Parameter
  include ::Comparable
  include ::TTY::Option::DSL::Arity
  include ::TTY::Option::DSL::Conversion

  # Create a parameter
  #
  # @api private
  # @param key [Symbol] the key to register this param under
  # @return [Parameter] a new instance of Parameter
  #
  # source://tty-option//lib/tty/option/parameter.rb#38
  def initialize(key, **settings, &block); end

  # Compare this parameter name with the other
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/parameter.rb#203
  def <=>(other); end

  # Compare parameters for equality based on type and name
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/parameter.rb#210
  def ==(other); end

  # source://tty-option//lib/tty/option/parameter.rb#60
  def arity(value = T.unsafe(nil)); end

  # source://tty-option//lib/tty/option/parameter.rb#88
  def convert(value = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/parameter.rb#96
  def convert?; end

  # source://tty-option//lib/tty/option/parameter.rb#100
  def default(value = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/parameter.rb#109
  def default?; end

  # source://tty-option//lib/tty/option/parameter.rb#68
  def default_arity; end

  # source://tty-option//lib/tty/option/parameter.rb#180
  def default_name; end

  # source://tty-option//lib/tty/option/parameter.rb#100
  def defaults(value = T.unsafe(nil)); end

  # source://tty-option//lib/tty/option/parameter.rb#113
  def desc(value = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/parameter.rb#121
  def desc?; end

  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/parameter.rb#156
  def display?; end

  # Make a duplicate of this parameter
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/parameter.rb#244
  def dup; end

  # Compare parameters for equality based on type and name
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/parameter.rb#219
  def eql?(other); end

  # source://tty-option//lib/tty/option/parameter.rb#148
  def hidden; end

  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/parameter.rb#152
  def hidden?; end

  # The key under which this parameter is registered
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/parameter.rb#30
  def key; end

  # Determine minimum boundary for arity parameter
  #
  # @api private
  #
  # source://tty-option//lib/tty/option/parameter.rb#75
  def min_arity; end

  # Check if this options is multi argument
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/parameter.rb#128
  def multi_argument?; end

  # Check if multiple occurrences are allowed
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/parameter.rb#84
  def multiple?; end

  # source://tty-option//lib/tty/option/parameter.rb#172
  def name(value = T.unsafe(nil)); end

  # source://tty-option//lib/tty/option/parameter.rb#132
  def optional; end

  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/parameter.rb#136
  def optional?; end

  # source://tty-option//lib/tty/option/parameter.rb#160
  def permit(value = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/parameter.rb#168
  def permit?; end

  # source://tty-option//lib/tty/option/parameter.rb#140
  def required; end

  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/parameter.rb#144
  def required?; end

  # Return a hash of this parameter settings
  #
  # @api public
  # @return [Hash] the names and values of this parameter
  #
  # source://tty-option//lib/tty/option/parameter.rb#230
  def to_h(&block); end

  # source://tty-option//lib/tty/option/parameter.rb#196
  def to_sym; end

  # source://tty-option//lib/tty/option/parameter.rb#184
  def validate(value = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/parameter.rb#192
  def validate?; end

  private

  # @api private
  #
  # source://tty-option//lib/tty/option/parameter.rb#254
  def check_arity(value); end

  # source://tty-option//lib/tty/option/parameter.rb#282
  def check_default(value); end

  # @api private
  #
  # source://tty-option//lib/tty/option/parameter.rb#272
  def check_permitted(value); end

  # @api private
  #
  # source://tty-option//lib/tty/option/parameter.rb#292
  def check_required(value); end

  # @api private
  #
  # source://tty-option//lib/tty/option/parameter.rb#302
  def check_validation(value); end

  class << self
    # A parameter factory
    #
    # @api public
    #
    # source://tty-option//lib/tty/option/parameter.rb#23
    def create(key, **settings, &block); end
  end
end

# source://tty-option//lib/tty/option/parameter/argument.rb#8
class TTY::Option::Parameter::Argument < ::TTY::Option::Parameter
  # Required by default unless the arity allows any
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/parameter/argument.rb#12
  def required?; end
end

# source://tty-option//lib/tty/option/parameter/environment.rb#6
class TTY::Option::Parameter::Environment < ::TTY::Option::Parameter
  # Compare this env var to another
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/parameter/environment.rb#14
  def <=>(other); end

  # source://tty-option//lib/tty/option/parameter/environment.rb#7
  def default_name; end
end

# source://tty-option//lib/tty/option/parameter/keyword.rb#8
class TTY::Option::Parameter::Keyword < ::TTY::Option::Parameter
  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/parameter/keyword.rb#9
  def required?; end
end

# One or more parameter arity pattern
#
# source://tty-option//lib/tty/option/parameter.rb#18
TTY::Option::Parameter::ONE_OR_MORE_ARITY = T.let(T.unsafe(nil), Regexp)

# source://tty-option//lib/tty/option/parameter/option.rb#6
class TTY::Option::Parameter::Option < ::TTY::Option::Parameter
  # Compare this option short and long names
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/parameter/option.rb#91
  def <=>(other); end

  # Check if argument is optional
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/parameter/option.rb#83
  def argument_optional?; end

  # Check if argument is required
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/parameter/option.rb#73
  def argument_required?; end

  # source://tty-option//lib/tty/option/parameter/option.rb#53
  def default_long; end

  # Return long name if present, otherwise short name
  #
  # @api private
  #
  # source://tty-option//lib/tty/option/parameter/option.rb#22
  def default_name; end

  # source://tty-option//lib/tty/option/parameter/option.rb#45
  def long(value = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/parameter/option.rb#57
  def long?; end

  # Extract long flag name
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/parameter/option.rb#64
  def long_name; end

  # source://tty-option//lib/tty/option/parameter/option.rb#26
  def short(value = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/parameter/option.rb#34
  def short?; end

  # Extract short flag name
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/parameter/option.rb#41
  def short_name; end
end

# Matches "--foo [string]"
#
# source://tty-option//lib/tty/option/parameter/option.rb#17
TTY::Option::Parameter::Option::LONG_ARGUMENT_OPTIONAL_RE = T.let(T.unsafe(nil), Regexp)

# Matches "--foo string"
#
# source://tty-option//lib/tty/option/parameter/option.rb#11
TTY::Option::Parameter::Option::LONG_ARGUMENT_REQUIRED_RE = T.let(T.unsafe(nil), Regexp)

# Matches "-f [string]"
#
# source://tty-option//lib/tty/option/parameter/option.rb#14
TTY::Option::Parameter::Option::SHORT_ARGUMENT_OPTIONAL_RE = T.let(T.unsafe(nil), Regexp)

# Matches "-f string"
#
# source://tty-option//lib/tty/option/parameter/option.rb#8
TTY::Option::Parameter::Option::SHORT_ARGUMENT_REQUIRED_RE = T.let(T.unsafe(nil), Regexp)

# Zero or more parameter arity pattern
#
# source://tty-option//lib/tty/option/parameter.rb#15
TTY::Option::Parameter::ZERO_OR_MORE_ARITY = T.let(T.unsafe(nil), Regexp)

# Raised when attempting to register already registered parameter
#
# source://tty-option//lib/tty/option/errors.rb#11
class TTY::Option::ParameterConflict < ::TTY::Option::Error; end

# A collection to hold all parameters
#
# source://tty-option//lib/tty/option/parameters.rb#8
class TTY::Option::Parameters
  include ::Enumerable

  # A parameters list
  #
  # @api private
  # @return [Parameters] a new instance of Parameters
  #
  # source://tty-option//lib/tty/option/parameters.rb#57
  def initialize; end

  # Add parameter
  #
  # @api public
  # @param parameter [TTY::Option::Parameter]
  #
  # source://tty-option//lib/tty/option/parameters.rb#74
  def <<(parameter); end

  # Add parameter
  #
  # @api public
  # @param parameter [TTY::Option::Parameter]
  #
  # source://tty-option//lib/tty/option/parameters.rb#74
  def add(parameter); end

  # source://tty-option//lib/tty/option/parameters.rb#24
  def argument?(param); end

  # A list of arguments
  #
  # source://tty-option//lib/tty/option/parameters.rb#30
  def arguments; end

  # source://tty-option//lib/tty/option/parameters.rb#15
  def arguments?; end

  # Delete a parameter from the list
  #
  # @api public
  # @example
  #   delete(:foo, :bar, :baz)
  # @param keys [Array<Symbol>] the keys to delete
  #
  # source://tty-option//lib/tty/option/parameters.rb#98
  def delete(*keys); end

  # Make a deep copy of the list of parameters
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/parameters.rb#125
  def dup; end

  # Enumerate all parameters
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/parameters.rb#114
  def each(&block); end

  # source://tty-option//lib/tty/option/parameters.rb#24
  def environment?(param); end

  # A list of environments
  #
  # source://tty-option//lib/tty/option/parameters.rb#36
  def environments; end

  # source://tty-option//lib/tty/option/parameters.rb#15
  def environments?; end

  # source://tty-option//lib/tty/option/parameters.rb#24
  def keyword?(param); end

  # A list of keywords
  #
  # source://tty-option//lib/tty/option/parameters.rb#33
  def keywords; end

  # source://tty-option//lib/tty/option/parameters.rb#15
  def keywords?; end

  # A list of all parameters
  #
  # source://tty-option//lib/tty/option/parameters.rb#42
  def list; end

  # source://tty-option//lib/tty/option/parameters.rb#24
  def option?(param); end

  # A list of options
  #
  # source://tty-option//lib/tty/option/parameters.rb#39
  def options; end

  # source://tty-option//lib/tty/option/parameters.rb#15
  def options?; end

  private

  # @api private
  #
  # source://tty-option//lib/tty/option/parameters.rb#137
  def check_key_uniqueness!(key); end

  # @api private
  #
  # source://tty-option//lib/tty/option/parameters.rb#159
  def check_long_option_uniqueness!(long_name); end

  # @api private
  #
  # source://tty-option//lib/tty/option/parameters.rb#147
  def check_short_option_uniqueness!(short_name); end

  class << self
    # Define a predicate method to check if a parameter is supported
    #
    # @api private
    #
    # source://tty-option//lib/tty/option/parameters.rb#23
    def define_param_query(name); end

    # Define a query for parameter types
    #
    # @api private
    #
    # source://tty-option//lib/tty/option/parameters.rb#14
    def define_query(name); end
  end
end

# source://tty-option//lib/tty/option/params.rb#9
class TTY::Option::Params
  extend ::Forwardable

  # Create Params
  #
  # @api private
  # @return [Params] a new instance of Params
  #
  # source://tty-option//lib/tty/option/params.rb#33
  def initialize(parameters, remaining: T.unsafe(nil), errors: T.unsafe(nil)); end

  # source://tty-option//lib/tty/option/params.rb#88
  def ==(other); end

  # Access a given value for a key
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/params.rb#52
  def [](key); end

  # Assign value to a key
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/params.rb#59
  def []=(key, value); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def each_key(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def each_value(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def empty?(*args, **_arg1, &block); end

  # source://tty-option//lib/tty/option/params.rb#88
  def eql?(other); end

  # The parameter parsing errors
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/params.rb#28
  def errors; end

  # Access a given value for a key
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/params.rb#66
  def fetch(key, *args, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def has_key?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def has_value?(*args, **_arg1, &block); end

  # source://tty-option//lib/tty/option/params.rb#95
  def hash; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def include?(*args, **_arg1, &block); end

  # String representation of this params
  #
  # @api public
  # @return [String]
  #
  # source://tty-option//lib/tty/option/params.rb#108
  def inspect; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def key?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def keys(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def member?(*args, **_arg1, &block); end

  # source://tty-option//lib/tty/option/params.rb#73
  def merge(other_params); end

  # source://tty-option//lib/tty/option/params.rb#77
  def merge!(other_params); end

  # The remaining unparsed arguments
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/params.rb#23
  def remaining; end

  # source://tty-option//lib/tty/option/params.rb#99
  def to_h; end

  # String representation of the parameters
  #
  # @api public
  # @return [String]
  #
  # source://tty-option//lib/tty/option/params.rb#117
  def to_s; end

  # Check if params have any errors
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/params.rb#84
  def valid?; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def value?(*args, **_arg1, &block); end

  class << self
    # source://tty-option//lib/tty/option/params.rb#12
    def create(parameters = T.unsafe(nil), remaining = T.unsafe(nil), errors = T.unsafe(nil)); end
  end
end

# Raised during command line input parsing
#
# source://tty-option//lib/tty/option/errors.rb#23
class TTY::Option::ParseError < ::TTY::Option::Error
  # Format value
  #
  # @api public
  # @example
  #   format_value([:a, 1])
  #   # => a:1
  # @param value [Object] the value to format
  # @return [String]
  #
  # source://tty-option//lib/tty/option/errors.rb#38
  def format_value(value); end

  # Returns the value of attribute param.
  #
  # source://tty-option//lib/tty/option/errors.rb#24
  def param; end

  # Sets the attribute param
  #
  # @param value the value to set the attribute param to.
  #
  # source://tty-option//lib/tty/option/errors.rb#24
  def param=(_arg0); end
end

# source://tty-option//lib/tty/option/parser/param_types.rb#5
class TTY::Option::Parser
  # @return [Parser] a new instance of Parser
  #
  # source://tty-option//lib/tty/option/parser.rb#26
  def initialize(parameters, **config); end

  # Returns the value of attribute config.
  #
  # source://tty-option//lib/tty/option/parser.rb#24
  def config; end

  # Returns the value of attribute parameters.
  #
  # source://tty-option//lib/tty/option/parser.rb#22
  def parameters; end

  # source://tty-option//lib/tty/option/parser.rb#31
  def parse(argv, env); end
end

# source://tty-option//lib/tty/option/parser.rb#20
TTY::Option::Parser::ARGUMENT_SEPARATOR = T.let(T.unsafe(nil), Regexp)

# source://tty-option//lib/tty/option/parser/arguments.rb#11
class TTY::Option::Parser::Arguments
  include ::TTY::Option::Parser::ParamTypes

  # Create a command line arguments parser
  #
  # @api public
  # @param arguments [Array<Argument>] the list of arguments
  # @param config [Hash] the configuration settings
  # @return [Arguments] a new instance of Arguments
  #
  # source://tty-option//lib/tty/option/parser/arguments.rb#22
  def initialize(arguments, check_invalid_params: T.unsafe(nil), raise_on_parse_error: T.unsafe(nil)); end

  # Read positional arguments from the command line
  #
  # @api private
  # @param argv [Array<String>]
  # @return [Array<Hash, Array, Hash>] a list of parsed and unparsed arguments and errors
  #
  # source://tty-option//lib/tty/option/parser/arguments.rb#55
  def parse(argv); end

  private

  # Assign argument to the parsed
  #
  # @api private
  # @param arg [Argument]
  # @param values [Array]
  #
  # source://tty-option//lib/tty/option/parser/arguments.rb#144
  def assign_argument(arg, values); end

  # @api private
  #
  # source://tty-option//lib/tty/option/parser/arguments.rb#77
  def next_argument(arg); end

  # source://tty-option//lib/tty/option/parser/arguments.rb#85
  def process_exact_arity(arg); end

  # source://tty-option//lib/tty/option/parser/arguments.rb#108
  def process_infinite_arity(arg); end
end

# source://tty-option//lib/tty/option/parser/arity_check.rb#6
class TTY::Option::Parser::ArityCheck
  # @return [ArityCheck] a new instance of ArityCheck
  #
  # source://tty-option//lib/tty/option/parser/arity_check.rb#7
  def initialize(error_aggregator); end

  # source://tty-option//lib/tty/option/parser/arity_check.rb#12
  def <<(param); end

  # source://tty-option//lib/tty/option/parser/arity_check.rb#12
  def add(param); end

  # Check if parameter matches arity
  #
  # @api private
  # @raise [InvalidArity]
  #
  # source://tty-option//lib/tty/option/parser/arity_check.rb#22
  def call(arities); end
end

# source://tty-option//lib/tty/option/parser/environments.rb#12
class TTY::Option::Parser::Environments
  include ::TTY::Option::Parser::ParamTypes

  # Create a command line env variables parser
  #
  # @api public
  # @param environments [Array<Environment>] the list of environment variables
  # @param config [Hash] the configuration settings
  # @return [Environments] a new instance of Environments
  #
  # source://tty-option//lib/tty/option/parser/environments.rb#25
  def initialize(environments, check_invalid_params: T.unsafe(nil), raise_on_parse_error: T.unsafe(nil)); end

  # Read environment variable(s) from command line or ENV hash
  #
  # @api public
  # @param argv [Array<String>]
  # @param env [Hash<String,Object>]
  #
  # source://tty-option//lib/tty/option/parser/environments.rb#62
  def parse(argv, env); end

  private

  # @api private
  #
  # source://tty-option//lib/tty/option/parser/environments.rb#145
  def assign_envvar(env_arg, val); end

  # Consume multi argument
  #
  # @api private
  #
  # source://tty-option//lib/tty/option/parser/environments.rb#132
  def consume_arguments(values: T.unsafe(nil)); end

  # source://tty-option//lib/tty/option/parser/environments.rb#96
  def next_envvar; end
end

# source://tty-option//lib/tty/option/parser/environments.rb#15
TTY::Option::Parser::Environments::ENV_VAR_RE = T.let(T.unsafe(nil), Regexp)

# source://tty-option//lib/tty/option/parser/keywords.rb#12
class TTY::Option::Parser::Keywords
  include ::TTY::Option::Parser::ParamTypes

  # Create a command line keywords parser
  #
  # @api public
  # @param keywords [Array<Keyword>] the list of keywords
  # @param config [Hash] the configuration settings
  # @return [Keywords] a new instance of Keywords
  #
  # source://tty-option//lib/tty/option/parser/keywords.rb#25
  def initialize(keywords, check_invalid_params: T.unsafe(nil), raise_on_parse_error: T.unsafe(nil)); end

  # Read keyword arguments from the command line
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/parser/keywords.rb#59
  def parse(argv); end

  private

  # @api private
  #
  # source://tty-option//lib/tty/option/parser/keywords.rb#134
  def assign_keyword(kwarg, val); end

  # Consume multi argument
  #
  # @api private
  #
  # source://tty-option//lib/tty/option/parser/keywords.rb#123
  def consume_arguments(values: T.unsafe(nil)); end

  # Get next keyword
  #
  # @api private
  #
  # source://tty-option//lib/tty/option/parser/keywords.rb#87
  def next_keyword; end
end

# source://tty-option//lib/tty/option/parser/keywords.rb#15
TTY::Option::Parser::Keywords::KEYWORD_ARG_RE = T.let(T.unsafe(nil), Regexp)

# source://tty-option//lib/tty/option/parser/options.rb#12
class TTY::Option::Parser::Options
  include ::TTY::Option::Parser::ParamTypes

  # Create a command line env variables parser
  #
  # @api public
  # @param options [Array<Option>] the list of options
  # @param config [Hash] the configuration settings
  # @return [Options] a new instance of Options
  #
  # source://tty-option//lib/tty/option/parser/options.rb#27
  def initialize(options, check_invalid_params: T.unsafe(nil), raise_on_parse_error: T.unsafe(nil)); end

  # Read option(s) from command line
  #
  # @api public
  # @param argv [Array<String>]
  #
  # source://tty-option//lib/tty/option/parser/options.rb#74
  def parse(argv); end

  # Configure list of returned options
  #
  # @api private
  #
  # source://tty-option//lib/tty/option/parser/options.rb#48
  def setup_opts; end

  private

  # @api private
  #
  # source://tty-option//lib/tty/option/parser/options.rb#253
  def assign_option(opt, val); end

  # Consume multi argument
  #
  # @api private
  #
  # source://tty-option//lib/tty/option/parser/options.rb#242
  def consume_arguments(values: T.unsafe(nil)); end

  # Get next option
  #
  # @api private
  #
  # source://tty-option//lib/tty/option/parser/options.rb#103
  def next_option; end

  # Process a double option
  #
  # @api private
  # @return [Array<Option, Object>] a list of option and its value
  #
  # source://tty-option//lib/tty/option/parser/options.rb#131
  def process_double_option(long, sep, rest); end

  # Process a single option
  #
  # @api private
  # @return [Array<Option, Object>] a list of option and its value
  #
  # source://tty-option//lib/tty/option/parser/options.rb#198
  def process_single_option(short, other_singles); end
end

# source://tty-option//lib/tty/option/parser/options.rb#15
TTY::Option::Parser::Options::LONG_OPTION_RE = T.let(T.unsafe(nil), Regexp)

# source://tty-option//lib/tty/option/parser/options.rb#17
TTY::Option::Parser::Options::SHORT_OPTION_RE = T.let(T.unsafe(nil), Regexp)

# source://tty-option//lib/tty/option/parser.rb#13
TTY::Option::Parser::PARAMETER_PARSERS = T.let(T.unsafe(nil), Hash)

# source://tty-option//lib/tty/option/parser/param_types.rb#6
module TTY::Option::Parser::ParamTypes
  # Check if value looks like an argument
  #
  # @api public
  # @param value [String]
  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/parser/param_types.rb#26
  def argument?(value); end

  # Check if value is an environment variable
  #
  # @api public
  # @param value [String]
  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/parser/param_types.rb#37
  def env_var?(value); end

  # Check to see if value is a keyword
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/parser/param_types.rb#46
  def keyword?(value); end

  # Check if value looks like an option
  #
  # @api public
  # @param value [String]
  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/parser/param_types.rb#57
  def option?(value); end
end

# Positional argument pattern
#
# source://tty-option//lib/tty/option/parser/param_types.rb#8
TTY::Option::Parser::ParamTypes::ARGUMENT_PARAMETER = T.let(T.unsafe(nil), Regexp)

# Environment variable pattern
#
# source://tty-option//lib/tty/option/parser/param_types.rb#11
TTY::Option::Parser::ParamTypes::ENV_VAR_PARAMETER = T.let(T.unsafe(nil), Regexp)

# Keyword pattern
#
# source://tty-option//lib/tty/option/parser/param_types.rb#14
TTY::Option::Parser::ParamTypes::KEYWORD_PARAMETER = T.let(T.unsafe(nil), Regexp)

# Option and flag pattern
#
# source://tty-option//lib/tty/option/parser/param_types.rb#17
TTY::Option::Parser::ParamTypes::OPTION_PARAMETER = T.let(T.unsafe(nil), Regexp)

# source://tty-option//lib/tty/option/parser/required_check.rb#6
class TTY::Option::Parser::RequiredCheck
  # @return [RequiredCheck] a new instance of RequiredCheck
  #
  # source://tty-option//lib/tty/option/parser/required_check.rb#7
  def initialize(error_aggregator); end

  # source://tty-option//lib/tty/option/parser/required_check.rb#12
  def <<(param); end

  # source://tty-option//lib/tty/option/parser/required_check.rb#12
  def add(param); end

  # Check if required options are provided
  #
  # @api public
  # @raise [MissingParameter]
  #
  # source://tty-option//lib/tty/option/parser/required_check.rb#26
  def call; end

  # source://tty-option//lib/tty/option/parser/required_check.rb#17
  def delete(param); end
end

# source://tty-option//lib/tty/option/pipeline.rb#9
class TTY::Option::Pipeline
  # Create a param processing pipeline
  #
  # @api private
  # @return [Pipeline] a new instance of Pipeline
  #
  # source://tty-option//lib/tty/option/pipeline.rb#19
  def initialize(error_aggregator); end

  # Process param value through conditions
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/pipeline.rb#26
  def call(param, value); end
end

# source://tty-option//lib/tty/option/pipeline.rb#10
TTY::Option::Pipeline::PROCESSORS = T.let(T.unsafe(nil), Array)

# A monad that respresents success and failure conditions
#
# source://tty-option//lib/tty/option/result.rb#6
class TTY::Option::Result
  # Reason for failure
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/result.rb#29
  def error; end

  # Check whether or not a result is a failure class
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/result.rb#45
  def failure?; end

  # Check whether or not a result is a success monad
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/result.rb#36
  def success?; end

  # Wrapped value
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/result.rb#24
  def value; end

  class << self
    # Wrap a value in a failure monad
    #
    # @api public
    #
    # source://tty-option//lib/tty/option/result.rb#17
    def failure(value); end

    # Wrap a value in a success monad
    #
    # @api public
    #
    # source://tty-option//lib/tty/option/result.rb#10
    def success(value); end
  end
end

# Failure monad containing an error
#
# @api private
#
# source://tty-option//lib/tty/option/result.rb#61
class TTY::Option::Result::Failure < ::TTY::Option::Result
  # @api private
  # @return [Failure] a new instance of Failure
  #
  # source://tty-option//lib/tty/option/result.rb#62
  def initialize(error); end
end

# Success monad containing a value
#
# @api private
#
# source://tty-option//lib/tty/option/result.rb#52
class TTY::Option::Result::Success < ::TTY::Option::Result
  # @api private
  # @return [Success] a new instance of Success
  #
  # source://tty-option//lib/tty/option/result.rb#53
  def initialize(value); end
end

# source://tty-option//lib/tty/option/section.rb#5
class TTY::Option::Section
  # @return [Section] a new instance of Section
  #
  # source://tty-option//lib/tty/option/section.rb#8
  def initialize(name, content = T.unsafe(nil)); end

  # Returns the value of attribute content.
  #
  # source://tty-option//lib/tty/option/section.rb#6
  def content; end

  # Sets the attribute content
  #
  # @param value the value to set the attribute content to.
  #
  # source://tty-option//lib/tty/option/section.rb#6
  def content=(_arg0); end

  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/section.rb#17
  def empty?; end

  # Returns the value of attribute name.
  #
  # source://tty-option//lib/tty/option/section.rb#6
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://tty-option//lib/tty/option/section.rb#6
  def name=(_arg0); end

  # source://tty-option//lib/tty/option/section.rb#13
  def to_a; end

  # source://tty-option//lib/tty/option/section.rb#21
  def to_s; end
end

# source://tty-option//lib/tty/option/sections.rb#9
class TTY::Option::Sections
  include ::Enumerable
  extend ::Forwardable

  # @return [Sections] a new instance of Sections
  #
  # source://tty-option//lib/tty/option/sections.rb#15
  def initialize; end

  # source://tty-option//lib/tty/option/sections.rb#19
  def [](name); end

  # source://tty-option//lib/tty/option/sections.rb#23
  def add(name, content); end

  # source://tty-option//lib/tty/option/sections.rb#31
  def add_after(name, sect_name, sect_content); end

  # source://tty-option//lib/tty/option/sections.rb#27
  def add_before(name, sect_name, sect_content); end

  # source://tty-option//lib/tty/option/sections.rb#39
  def delete(*names); end

  # source://tty-option//lib/tty/option/sections.rb#43
  def each(&block); end

  # source://tty-option//lib/tty/option/sections.rb#35
  def replace(name, content); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def size(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def to_a(*args, **_arg1, &block); end

  private

  # @raise [ArgumentError]
  #
  # source://tty-option//lib/tty/option/sections.rb#49
  def find_index(name); end
end

# Raised when argument value isn't permitted
#
# source://tty-option//lib/tty/option/errors.rb#140
class TTY::Option::UnpermittedArgument < ::TTY::Option::ParseError
  # @return [UnpermittedArgument] a new instance of UnpermittedArgument
  #
  # source://tty-option//lib/tty/option/errors.rb#144
  def initialize(param_or_message, value = T.unsafe(nil)); end

  private

  # Format permitted choices
  #
  # @api private
  # @param choices [Array<Object>] the choices to format
  # @return [String]
  #
  # source://tty-option//lib/tty/option/errors.rb#169
  def format_choices(choices); end
end

# source://tty-option//lib/tty/option/errors.rb#141
TTY::Option::UnpermittedArgument::MESSAGE = T.let(T.unsafe(nil), String)

# Raised when conversion type isn't registered
#
# source://tty-option//lib/tty/option/errors.rb#20
class TTY::Option::UnsupportedConversion < ::TTY::Option::Error; end

# source://tty-option//lib/tty/option/usage.rb#7
class TTY::Option::Usage
  # Create an usage
  #
  # @api public
  # @return [Usage] a new instance of Usage
  #
  # source://tty-option//lib/tty/option/usage.rb#18
  def initialize(**properties, &block); end

  # Main way to show how all parameters can be used
  #
  # @api public
  # @param value [String]
  #
  # source://tty-option//lib/tty/option/usage.rb#119
  def banner(value = T.unsafe(nil)); end

  # Whether or not to show banner in usage
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/usage.rb#132
  def banner?; end

  # Action name for display in help and error messages
  #
  # @api public
  # @param values [Array<String>]
  #
  # source://tty-option//lib/tty/option/usage.rb#56
  def command(*values); end

  # Check for command definition
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/usage.rb#88
  def command?; end

  # Action name for display in help and error messages
  #
  # @api public
  # @param values [Array<String>]
  #
  # source://tty-option//lib/tty/option/usage.rb#56
  def commands(*values); end

  # Description
  #
  # @api public
  # @param values [Array<String>]
  #
  # source://tty-option//lib/tty/option/usage.rb#141
  def desc(*values); end

  # Whether or not to show description in usage
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/usage.rb#155
  def desc?; end

  # Description
  #
  # @api public
  # @param values [Array<String>]
  #
  # source://tty-option//lib/tty/option/usage.rb#141
  def description(*values); end

  # Whether or not to show description in usage
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/usage.rb#155
  def description?; end

  # Collects usage examples
  #
  # @api public
  # @param values [Array<String>]
  #
  # source://tty-option//lib/tty/option/usage.rb#165
  def example(*values); end

  # Whether or not to show example in usage
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/usage.rb#179
  def example?; end

  # Collects usage examples
  #
  # @api public
  # @param values [Array<String>]
  #
  # source://tty-option//lib/tty/option/usage.rb#165
  def examples(*values); end

  # Whether or not to show example in usage
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/usage.rb#179
  def examples?; end

  # Display info after everyting else in the usage help
  #
  # @api public
  # @param values [Array<String>]
  #
  # source://tty-option//lib/tty/option/usage.rb#189
  def footer(*values); end

  # Whether or not to show footer in usage
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/usage.rb#202
  def footer?; end

  # Display info before anything else in the usage help
  #
  # @api public
  # @param values [Array<String>]
  #
  # source://tty-option//lib/tty/option/usage.rb#97
  def header(*values); end

  # Whether or not to show header in usage
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/usage.rb#110
  def header?; end

  # Remove default commands
  #
  # @api public
  #
  # source://tty-option//lib/tty/option/usage.rb#69
  def no_command; end

  # Whether or not to show command in usage
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-option//lib/tty/option/usage.rb#79
  def no_command?; end

  # Program name for display in help and error messages
  #
  # @api public
  # @param name [String]
  #
  # source://tty-option//lib/tty/option/usage.rb#43
  def program(name = T.unsafe(nil)); end

  # Return a hash of this usage properties
  #
  # @api public
  # @return [Hash] the names and values of this usage
  #
  # source://tty-option//lib/tty/option/usage.rb#211
  def to_h(&block); end

  class << self
    # Create an usage
    #
    # @api public
    #
    # source://tty-option//lib/tty/option/usage.rb#11
    def create(**properties, &block); end
  end
end

# source://tty-option//lib/tty/option/usage_wrapper.rb#5
module TTY::Option::UsageWrapper
  private

  # Extract a line from a string and return remainder
  #
  # @api private
  # @param str [String]
  # @param wrap [Integer]
  # @return [Array<String, String>]
  #
  # source://tty-option//lib/tty/option/usage_wrapper.rb#39
  def next_line(text, wrap: T.unsafe(nil)); end

  # Wrap a string to a maximum width with indentation
  #
  # @api public
  # @param text [String]
  # @param width [Integer]
  # @param indent [Integer]
  # @param indent_first [Boolean]
  #
  # source://tty-option//lib/tty/option/usage_wrapper.rb#14
  def wrap(text, width: T.unsafe(nil), indent: T.unsafe(nil), indent_first: T.unsafe(nil)); end

  class << self
    # Wrap a string to a maximum width with indentation
    #
    # @api public
    # @param text [String]
    # @param width [Integer]
    # @param indent [Integer]
    # @param indent_first [Boolean]
    #
    # source://tty-option//lib/tty/option/usage_wrapper.rb#14
    def wrap(text, width: T.unsafe(nil), indent: T.unsafe(nil), indent_first: T.unsafe(nil)); end

    private

    # Extract a line from a string and return remainder
    #
    # @api private
    # @param str [String]
    # @param wrap [Integer]
    # @return [Array<String, String>]
    #
    # source://tty-option//lib/tty/option/usage_wrapper.rb#39
    def next_line(text, wrap: T.unsafe(nil)); end
  end
end

# source://tty-option//lib/tty/option/version.rb#5
TTY::Option::VERSION = T.let(T.unsafe(nil), String)

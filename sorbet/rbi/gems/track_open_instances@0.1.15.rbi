# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `track_open_instances` gem.
# Please instead update this file by running `bin/tapioca gem track_open_instances`.


# Mixin to track instances of a class that require explicit cleanup
#
# This module provides a mechanism to track instances of classes that need
# to be explicitly closed or cleaned up. It maintains a list of all instances
# created and allows checking for any unclosed instances, which can help in
# identifying resource leaks.
#
# @api public
# @example Basic Usage
#   class ManagedFile
#   include TrackOpenInstances
#
#   attr_reader :path
#
#   def initialize(path)
#   @path = path
#   # Simulate opening the file
#   puts "Opening file: #{path}"
#   # Register the instance for tracking
#   self.class.add_open_instance(self)
#   end
#
#   # Implement the close logic specific to the resource
#   def close
#   # Simulate closing the file
#   puts "Closing file: #{path}"
#   # Remove the instance from tracking
#   self.class.remove_open_instance(self)
#   end
#   end
#
#   file1 = ManagedFile.new('/tmp/file1.txt')
#   file2 = ManagedFile.new('/tmp/file2.txt')
#
#   puts ManagedFile.open_instances.count #=> 2
#   puts ManagedFile.open_instances.keys.inspect #=> [#<ManagedFile:...>, #<ManagedFile:...>]
#
#   file1.close
#
#   puts ManagedFile.open_instances.count #=> 1
#   puts ManagedFile.open_instances.keys.inspect #=> [#<ManagedFile:...>]
#
#   # In a test suite's teardown, you might use:
#   # ManagedFile.assert_no_open_instances # This would raise if file2 wasn't closed
#
#   file2.close
#   ManagedFile.assert_no_open_instances # This will now pass
#
# source://track_open_instances//lib/track_open_instances/version.rb#3
module TrackOpenInstances
  mixes_in_class_methods ::TrackOpenInstances::ClassMethods

  class << self
    # Ruby hook executed when this module is included in a base class
    #
    # Sets up the necessary class instance variables and extends the base
    # class with ClassMethods.
    #
    # @api private
    # @param base [Class] The class including this module
    # @return [void]
    #
    # source://track_open_instances//lib/track_open_instances.rb#91
    def included(base); end
  end
end

# Contains class-level methods added to classes including TrackOpenInstances
#
# @api public
#
# source://track_open_instances//lib/track_open_instances.rb#104
module TrackOpenInstances::ClassMethods
  # Adds an instance to the tracking list (thread-safe)
  #
  # Typically called automatically by the instance's `initialize` method.
  #
  # @api private
  # @param instance [Object] The instance to add
  # @return [void]
  #
  # source://track_open_instances//lib/track_open_instances.rb#137
  def add_open_instance(instance); end

  # Asserts that no instances of the class remain unclosed
  #
  # Commonly used in test suite teardown blocks to enure that all resources were
  # released.
  #
  # unclosed instances
  #
  # @api public
  # @example
  #   # In RSpec teardown (e.g., after(:each))
  #   MyResource.assert_no_open_instances
  # @raise [RuntimeError] If any instances are found unclosed with a report of
  # @return [void]
  #
  # source://track_open_instances//lib/track_open_instances.rb#249
  def assert_no_open_instances; end

  # The number of currently open instances
  #
  # @api public
  # @example
  #   res1 = MyResource.new
  #   res2 = MyResource.new
  #   MyResource.open_instance_count #=> 2
  # @return [Integer]
  #
  # source://track_open_instances//lib/track_open_instances.rb#169
  def open_instance_count; end

  # Direct access to the internal list of tracked instances
  #
  # Note: This returns all instances ever tracked unless explicitly removed.
  # Use `open_instances` for checking leaks. Direct use is uncommon.
  #
  # @api private
  # @example
  #   # Assuming MyResource includes TrackOpenInstances
  #   res1 = MyResource.new
  #   res2 = MyResource.new
  #   res1.close
  #   MyResource.open_instances.keys #=> [#<MyResource... object_id=res2>] (after res1 removed)
  # @return [Hash{Object => OpenInstance}] The raw list of currently tracked instances
  #
  # source://track_open_instances//lib/track_open_instances.rb#122
  def open_instances; end

  # Generates a report string listing unclosed instances and their creation stacks
  #
  # Useful for debugging resource leaks. Returns nil if no instances are unclosed.
  #
  # @api public
  # @example
  #   res = MyResource.new
  #   puts MyResource.open_instances_report
  #   There is 1 open MyResource instance(s):
  #   - object_id=701
  #   Created at:
  #   (caller stack line 1)
  #   (caller stack line 2)\n..."
  # @return [String, nil] A formatted report string or nil if none are open
  #
  # source://track_open_instances//lib/track_open_instances.rb#191
  def open_instances_report; end

  # The body of the report detailing each open instance
  #
  # @api private
  # @return [String]
  #
  # source://track_open_instances//lib/track_open_instances.rb#222
  def open_instances_report_body; end

  # The header string for the report
  #
  # @api private
  # @return [String]
  #
  # source://track_open_instances//lib/track_open_instances.rb#208
  def open_instances_report_header; end

  # Removes an instance from the tracking list (thread-safe)
  #
  # Typically called automatically by the instance's `close` method.
  #
  # @api private
  # @param instance [Object] The instance to remove
  # @return [void]
  #
  # source://track_open_instances//lib/track_open_instances.rb#152
  def remove_open_instance(instance); end
end

# Represents an open instance of a class that includes TrackOpenInstances
#
# @api private
# @attr_reader instance [Object] The tracked instance
# @attr_reader creation_stack [Array<String>] The call stack at the time of instance creation
#
#   This is useful for debugging and identifying where the instance was created.
#
# source://track_open_instances//lib/track_open_instances.rb#62
class TrackOpenInstances::OpenInstance
  # Initializes a new OpenInstance
  #
  # @api private
  # @param instance [Object] The tracked instance
  # @param creation_stack [Array<Thread::Backtrace::Location>] The call stack at
  #   the time of instance creation
  # @return [void]
  #
  # source://track_open_instances//lib/track_open_instances.rb#75
  def initialize(instance, creation_stack); end

  # The call stack at the time of instance creation
  #
  # This is useful for debugging and identifying where the instance was created.
  #
  # @api private
  # @return [Array<String>] the current value of creation_stack
  #
  # source://track_open_instances//lib/track_open_instances.rb#63
  def creation_stack; end

  # The tracked instance
  #
  # @api private
  # @return [Object] the current value of instance
  #
  # source://track_open_instances//lib/track_open_instances.rb#63
  def instance; end
end

# The last released version of this gem
#
# source://track_open_instances//lib/track_open_instances/version.rb#5
TrackOpenInstances::VERSION = T.let(T.unsafe(nil), String)

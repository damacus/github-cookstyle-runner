# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/cookstyle/all/cookstyle.rbi
#
# cookstyle-8.1.2

module Cookstyle
  def self.config; end
end
module RuboCop
end
class RuboCop::DirectiveComment
end
class RuboCop::Config
  def target_chef_version; end
end
module RuboCop::Cop
end
class RuboCop::Cop::Base
  def target_chef_version; end
end
class RuboCop::Cop::Team
  def support_target_chef_version?(cop); end
end
class RuboCop::Cop::Registry
end
module RuboCop::Chef
  def self.CookbookOnly(segments); end
end
module RuboCop::Chef::AutocorrectHelpers
  def expression_including_heredocs(node); end
end
module RuboCop::Chef::CookbookHelpers
  def extract_send_types(node); end
  def looks_like_resource?(node); end
  def match_property_in_resource?(resource_names, property_names, node); end
  def match_resource_type?(resource_name, node); end
  def method_arg_ast_to_string(ast); end
  def resource_block_name_if_string(node); end
  def symbolized_property_types(property); end
end
module RuboCop::Chef::PlatformHelpers
end
module RuboCop::Chef::CookbookOnly
  def cookbook_pattern; end
  def cookbook_pattern_config(segment); end
  def relevant_file?(file); end
  extend RuboCop::Chef::CookbookOnly::ClassMethods
end
module RuboCop::Chef::CookbookOnly::ClassMethods
  def cookbook_only_segments; end
  def cookbook_only_segments=(arg0); end
  def included(klass); end
end
module RuboCop::Cop::TargetChefVersion
  def minimum_target_chef_version(version); end
  def required_minimum_chef_version; end
  def support_target_chef_version?(version); end
end
module RuboCop::Cop::Chef
end
module RuboCop::Cop::Chef::Correctness
end
class RuboCop::Cop::Chef::Correctness::BlockGuardWithOnlyString < RuboCop::Cop::Base
  def block_guard_with_only_string?(param0 = nil); end
  def on_block(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Correctness::ChefApplicationFatal < RuboCop::Cop::Base
  def application_fatal?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Correctness::ConditionalRubyShellout < RuboCop::Cop::Base
  def conditional_shellout?(param0 = nil); end
  def on_block(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Correctness::DnfPackageAllowDowngrades < RuboCop::Cop::Base
  def on_block(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Chef::CookbookHelpers
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Correctness::IncorrectLibraryInjection < RuboCop::Cop::Base
  def correct_injection?(param0); end
  def legacy_injection?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Correctness::InvalidCookbookName < RuboCop::Cop::Base
  def has_name?(param0 = nil); end
  def on_send(node); end
end
class RuboCop::Cop::Chef::Correctness::InvalidDefaultAction < RuboCop::Cop::Base
  def default_action?(param0 = nil); end
  def on_send(node); end
end
class RuboCop::Cop::Chef::Correctness::InvalidNotificationResource < RuboCop::Cop::Base
  def invalid_notification?(param0 = nil); end
  def on_send(node); end
end
class RuboCop::Cop::Chef::Correctness::InvalidNotificationTiming < RuboCop::Cop::Base
  def notification_with_timing?(param0 = nil); end
  def on_send(node); end
end
class RuboCop::Cop::Chef::Correctness::InvalidPlatformFamilyHelper < RuboCop::Cop::Base
  def on_send(node); end
  def platform_family_helper?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Chef::PlatformHelpers
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Correctness::InvalidPlatformFamilyInCase < RuboCop::Cop::Base
  def node_platform_family?(param0 = nil); end
  def on_case(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Chef::PlatformHelpers
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Correctness::InvalidPlatformHelper < RuboCop::Cop::Base
  def on_send(node); end
  def platform_helper?(param0 = nil); end
  include RuboCop::Chef::PlatformHelpers
end
class RuboCop::Cop::Chef::Correctness::InvalidPlatformMetadata < RuboCop::Cop::Base
  def corrected_platform_source(node); end
  def on_block(node); end
  def on_send(node); end
  def supports?(param0 = nil); end
  def supports_array?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Chef::PlatformHelpers
end
class RuboCop::Cop::Chef::Correctness::InvalidPlatformInCase < RuboCop::Cop::Base
  def node_platform?(param0 = nil); end
  def on_case(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Chef::PlatformHelpers
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Correctness::InvalidPlatformValueForPlatformFamilyHelper < RuboCop::Cop::Base
  def on_send(node); end
  def value_for_platform_family?(param0 = nil); end
  include RuboCop::Chef::PlatformHelpers
end
class RuboCop::Cop::Chef::Correctness::InvalidPlatformValueForPlatformHelper < RuboCop::Cop::Base
  def on_send(node); end
  def value_for_platform?(param0 = nil); end
  include RuboCop::Chef::PlatformHelpers
end
class RuboCop::Cop::Chef::Correctness::InvalidVersionMetadata < RuboCop::Cop::Base
  def on_send(node); end
  def version?(param0 = nil); end
end
class RuboCop::Cop::Chef::Correctness::LazyEvalNodeAttributeDefaults < RuboCop::Cop::Base
  def non_lazy_node_attribute_default?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Correctness::LazyInResourceGuard < RuboCop::Cop::Base
  def lazy_in_guard?(param0 = nil); end
  def on_block(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Correctness::MacosUserdefaultsInvalidType < RuboCop::Cop::Base
  def on_block(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Correctness::MalformedPlatformValueForPlatformHelper < RuboCop::Cop::Base
  def on_send(node); end
end
class RuboCop::Cop::Chef::Correctness::MetadataMalformedDepends < RuboCop::Cop::Base
  def depends_without_comma?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Correctness::MetadataMissingName < RuboCop::Cop::Base
  def cb_name?(param0); end
  def on_new_investigation; end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Correctness::MetadataMissingVersion < RuboCop::Cop::Base
  def cb_version?(param0); end
  def on_new_investigation; end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Correctness::NodeNormal < RuboCop::Cop::Base
  def node_normal?(param0 = nil); end
  def on_send(node); end
end
class RuboCop::Cop::Chef::Correctness::NodeNormalUnless < RuboCop::Cop::Base
  def node_normal_unless?(param0 = nil); end
  def on_send(node); end
end
class RuboCop::Cop::Chef::Correctness::CookbookUsesNodeSave < RuboCop::Cop::Base
  def node_save?(param0 = nil); end
  def on_send(node); end
end
class RuboCop::Cop::Chef::Correctness::NotifiesActionNotSymbol < RuboCop::Cop::Base
  def on_block(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Correctness::OctalModeAsString < RuboCop::Cop::Base
  def on_send(node); end
end
class RuboCop::Cop::Chef::Correctness::OpenSSLPasswordHelpers < RuboCop::Cop::Base
  def on_const(node); end
  def openssl_helper?(param0 = nil); end
end
class RuboCop::Cop::Chef::Correctness::PowershellScriptDeleteFile < RuboCop::Cop::Base
  def on_block(node); end
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Correctness::PowershellFileExists < RuboCop::Cop::Base
  def on_send(node); end
  def powershell_out_exists?(param0 = nil); end
end
class RuboCop::Cop::Chef::Correctness::PropertyWithoutType < RuboCop::Cop::Base
  def on_send(node); end
  def property_without_type?(param0 = nil); end
end
class RuboCop::Cop::Chef::Correctness::ResourceSetsInternalProperties < RuboCop::Cop::Base
  def on_block(node); end
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Correctness::ResourceSetsNameProperty < RuboCop::Cop::Base
  def on_block(node); end
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Correctness::ResourceWithNoneAction < RuboCop::Cop::Base
  def on_block(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Correctness::ScopedFileExist < RuboCop::Cop::Base
  def on_block(node); end
  def unscoped_file_exist?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Correctness::ServiceResource < RuboCop::Cop::Base
  def execute_command?(param0 = nil); end
  def on_send(node); end
  def starts_service?(cmd); end
end
class RuboCop::Cop::Chef::Correctness::SupportsMustBeFloat < RuboCop::Cop::Base
  def on_send(node); end
  def supports_with_constraint?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Correctness::TmpPath < RuboCop::Cop::Base
  def file_cache_path?(path); end
  def hardcoded_tmp?(path); end
  def on_send(node); end
  def remote_file?(param0 = nil); end
end
module RuboCop::Cop::Chef::Deprecations
end
class RuboCop::Cop::Chef::Deprecations::CookbooksDependsOnSelf < RuboCop::Cop::Base
  def cb_name?(param0 = nil); end
  def dependencies(param0); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Deprecations::ChefHandlerRecipe < RuboCop::Cop::Base
  def chef_handler_recipe?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Deprecations::ChefHandlerUsesSupports < RuboCop::Cop::Base
  def on_block(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Deprecations::UsesChefRESTHelpers < RuboCop::Cop::Base
  def on_const(node); end
  def on_send(node); end
  def require_rest?(param0 = nil); end
  def rest_const?(param0 = nil); end
end
class RuboCop::Cop::Chef::Deprecations::ChefRewind < RuboCop::Cop::Base
  def on_block(node); end
  def on_send(node); end
  def require_rewind?(param0 = nil); end
  def rewind_gem_install?(param0 = nil); end
  def rewind_resources?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Chef::CookbookHelpers
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Deprecations::ChefShellout < RuboCop::Cop::Base
  def include_shellout?(param0 = nil); end
  def on_send(node); end
  def require_shellout?(param0 = nil); end
  def shellout_new?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Deprecations::ChefSugarHelpers < RuboCop::Cop::Base
  def on_send(node); end
end
class RuboCop::Cop::Chef::Deprecations::ChefWindowsPlatformHelper < RuboCop::Cop::Base
  def chef_platform_windows?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Deprecations::ChefDKGenerators < RuboCop::Cop::Base
  def on_const(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Deprecations::Cheffile < RuboCop::Cop::Base
  def on_new_investigation; end
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Deprecations::ChefSpecCoverageReport < RuboCop::Cop::Base
  def coverage_reporter?(param0 = nil); end
  def on_block(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Deprecations::ChefSpecLegacyRunner < RuboCop::Cop::Base
  def chefspec_runner?(param0 = nil); end
  def on_const(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Deprecations::ChocolateyPackageUninstallAction < RuboCop::Cop::Base
  def on_block(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Deprecations::Delivery < RuboCop::Cop::Base
  def on_new_investigation; end
  def on_other_file; end
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Deprecations::DependsOnChefNginxCookbook < RuboCop::Cop::Base
  def depends_compat_resource?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Deprecations::DependsOnChefReportingCookbook < RuboCop::Cop::Base
  def legacy_depends?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Deprecations::CookbookDependsOnCompatResource < RuboCop::Cop::Base
  def depends_compat_resource?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Deprecations::DependsOnOmnibusUpdaterCookbook < RuboCop::Cop::Base
  def legacy_depends?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Deprecations::CookbookDependsOnPartialSearch < RuboCop::Cop::Base
  def depends_partial_search?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::TargetChefVersion
end
class RuboCop::Cop::Chef::Deprecations::CookbookDependsOnPoise < RuboCop::Cop::Base
  def depends_method?(param0 = nil); end
  def on_send(node); end
end
class RuboCop::Cop::Chef::Deprecations::DeprecatedChefSpecPlatform < RuboCop::Cop::Base
  def chefspec_definition?(param0 = nil); end
  def legacy_chefspec_platform(platform, version); end
  def on_send(node); end
  def replacement_string(platform, version); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Deprecations::UsesDeprecatedMixins < RuboCop::Cop::Base
  def deprecated_dsl?(param0 = nil); end
  def deprecated_mixin?(param0 = nil); end
  def dsl_mixin_require?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Deprecations::DeprecatedPlatformMethods < RuboCop::Cop::Base
  def on_send(node); end
  def platform_method?(param0 = nil); end
end
class RuboCop::Cop::Chef::Deprecations::DeprecatedShelloutMethods < RuboCop::Cop::Base
  def on_send(node); end
  extend RuboCop::Cop::TargetChefVersion
end
class RuboCop::Cop::Chef::Deprecations::DeprecatedSudoActions < RuboCop::Cop::Base
  def on_block(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Deprecations::DeprecatedWindowsVersionCheck < RuboCop::Cop::Base
  def on_send(node); end
end
class RuboCop::Cop::Chef::Deprecations::DeprecatedYumRepositoryActions < RuboCop::Cop::Base
  def on_block(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Deprecations::DeprecatedYumRepositoryProperties < RuboCop::Cop::Base
  def on_block(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Deprecations::EasyInstallResource < RuboCop::Cop::Base
  def on_send(node); end
end
class RuboCop::Cop::Chef::Deprecations::EOLAuditModeUsage < RuboCop::Cop::Base
  def control_group?(param0 = nil); end
  def on_send(node); end
end
class RuboCop::Cop::Chef::Deprecations::EpicFail < RuboCop::Cop::Base
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Deprecations::ErlCallResource < RuboCop::Cop::Base
  def on_send(node); end
end
class RuboCop::Cop::Chef::Deprecations::ExecutePathProperty < RuboCop::Cop::Base
  def on_block(node); end
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Deprecations::ExecuteRelativeCreatesWithoutCwd < RuboCop::Cop::Base
  def on_block(node); end
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Deprecations::FoodcriticFile < RuboCop::Cop::Base
  def on_new_investigation; end
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Deprecations::FoodcriticTesting < RuboCop::Cop::Base
  def on_send(node); end
end
class RuboCop::Cop::Chef::Deprecations::HWRPWithoutProvides < RuboCop::Cop::Base
  def HWRP?(param0 = nil); end
  def has_provides?; end
  def indentation(node); end
  def on_class(node); end
  def provides(param0); end
  def resource_name(param0); end
  def resource_name_ast(param0); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Deprecations::HWRPWithoutUnifiedTrue < RuboCop::Cop::Base
  def HWRP?(param0 = nil); end
  def on_class(node); end
  def unified_mode?(param0); end
  extend RuboCop::Cop::TargetChefVersion
end
class RuboCop::Cop::Chef::Deprecations::ResourceInheritsFromCompatResource < RuboCop::Cop::Base
  def inherits_from_compat_resource?(param0 = nil); end
  def on_class(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Deprecations::LaunchdDeprecatedHashProperty < RuboCop::Cop::Base
  def on_block(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Deprecations::LegacyNotifySyntax < RuboCop::Cop::Base
  def legacy_notify?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Deprecations::LegacyYumCookbookRecipes < RuboCop::Cop::Base
  def old_yum_recipe?(param0 = nil); end
  def on_send(node); end
end
class RuboCop::Cop::Chef::Deprecations::LibrarianChefSpec < RuboCop::Cop::Base
  def on_send(node); end
end
class RuboCop::Cop::Chef::Deprecations::LocaleDeprecatedLcAllProperty < RuboCop::Cop::Base
  def on_block(node); end
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Deprecations::LogResourceNotifications < RuboCop::Cop::Base
  def on_block(node); end
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Deprecations::MacosUserdefaultsGlobalProperty < RuboCop::Cop::Base
  def on_block(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Chef::CookbookHelpers
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Deprecations::NamePropertyWithDefaultValue < RuboCop::Cop::Base
  def name_property_with_default?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Deprecations::NodeDeepFetch < RuboCop::Cop::Base
  def fix_name(name); end
  def node_deep_fetch?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Deprecations::NodeMethodsInsteadofAttributes < RuboCop::Cop::Base
  def node_ohai_methods?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Deprecations::NodeSet < RuboCop::Cop::Base
  def node_set?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Deprecations::NodeSetUnless < RuboCop::Cop::Base
  def node_set_unless?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Deprecations::NodeSetWithoutLevel < RuboCop::Cop::Base
  def add_offense_for_bare_assignment(sub_node); end
  def on_op_asgn(node); end
  def on_send(node); end
end
class RuboCop::Cop::Chef::Deprecations::PartialSearchClassUsage < RuboCop::Cop::Base
  def on_send(node); end
  def partial_search_class?(param0 = nil); end
end
class RuboCop::Cop::Chef::Deprecations::PartialSearchHelperUsage < RuboCop::Cop::Base
  def on_send(node); end
end
class RuboCop::Cop::Chef::Deprecations::PoiseArchiveUsage < RuboCop::Cop::Base
  def depends_poise_archive?(param0 = nil); end
  def on_block(node); end
  def on_send(node); end
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Deprecations::PolicyfileCommunitySource < RuboCop::Cop::Base
  def community_source?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Deprecations::PowershellCookbookHelpers < RuboCop::Cop::Base
  def on_send(node); end
  def ps_cb_helper?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Deprecations::RequireRecipe < RuboCop::Cop::Base
  def on_send(node); end
  def require_recipe?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Deprecations::ResourceOverridesProvidesMethod < RuboCop::Cop::Base
  def calls_provides?(param0); end
  def on_def(node); end
end
class RuboCop::Cop::Chef::Deprecations::ResourceUsesDslNameMethod < RuboCop::Cop::Base
  def on_send(node); end
end
class RuboCop::Cop::Chef::Deprecations::ResourceUsesOnlyResourceName < RuboCop::Cop::Base
  def cb_name_match(param0); end
  def cookbook_name; end
  def on_send(node); end
  def provides(param0); end
  def resource_name?(param0 = nil); end
  def valid_provides?(resource_name); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Chef::CookbookHelpers
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Deprecations::ResourceUsesProviderBaseMethod < RuboCop::Cop::Base
  def on_send(node); end
end
class RuboCop::Cop::Chef::Deprecations::ResourceUsesUpdatedMethod < RuboCop::Cop::Base
  def on_lvasgn(node); end
end
class RuboCop::Cop::Chef::Deprecations::ResourceWithoutUnifiedTrue < RuboCop::Cop::Base
  def insert_below_provides(corrector); end
  def insert_below_resource_name(corrector); end
  def on_new_investigation; end
  def provides(param0); end
  def resource_name(param0); end
  def unified_mode?(param0); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Deprecations::Ruby27KeywordArgumentWarnings < RuboCop::Cop::Base
  def on_send(node); end
  def positional_shellout?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Deprecations::RubyBlockCreateAction < RuboCop::Cop::Base
  def on_block(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Deprecations::UsesRunCommandHelper < RuboCop::Cop::Base
  def calls_run_command?(param0 = nil); end
  def defines_run_command?(param0); end
  def include_mixin_command?(param0 = nil); end
  def on_send(node); end
  def require_mixin_command?(param0 = nil); end
end
class RuboCop::Cop::Chef::Deprecations::SearchUsesPositionalParameters < RuboCop::Cop::Base
  def corrected_string(node); end
  def hashify_argument(arg, position); end
  def integer_like_val?(val); end
  def on_send(node); end
  def positional_arguments?(node); end
  def search_method?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Deprecations::UseAutomaticResourceName < RuboCop::Cop::Base
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Deprecations::UseInlineResourcesDefined < RuboCop::Cop::Base
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Deprecations::UseYamlDump < RuboCop::Cop::Base
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Deprecations::UserDeprecatedSupportsProperty < RuboCop::Cop::Base
  def on_block(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Deprecations::VerifyPropertyUsesFileExpansion < RuboCop::Cop::Base
  def on_block(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Deprecations::WindowsFeatureServermanagercmd < RuboCop::Cop::Base
  def on_block(node); end
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Deprecations::WindowsPackageInstallerTypeString < RuboCop::Cop::Base
  def on_block(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Deprecations::WindowsTaskChangeAction < RuboCop::Cop::Base
  def check_action(ast_obj); end
  def on_block(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Deprecations::WindowsVersionHelpers < RuboCop::Cop::Base
  def on_send(node); end
  def windows_helper?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
end
class RuboCop::Cop::Chef::Deprecations::IncludingXMLRubyRecipe < RuboCop::Cop::Base
  def on_send(node); end
  def xml_ruby_recipe?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Deprecations::IncludingYumDNFCompatRecipe < RuboCop::Cop::Base
  def on_send(node); end
  def yum_dnf_compat_recipe_usage?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
module RuboCop::Cop::Chef::Effortless
end
class RuboCop::Cop::Chef::Effortless::Berksfile < RuboCop::Cop::Base
  def on_new_investigation; end
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Effortless::ChefVaultUsed < RuboCop::Cop::Base
  def chef_vault_item?(param0 = nil); end
  def chef_vault_item_for_environment?(param0 = nil); end
  def on_const(node); end
  def on_send(node); end
  def require?(param0 = nil); end
  def vault_const?(param0 = nil); end
end
class RuboCop::Cop::Chef::Effortless::CookbookUsesDatabags < RuboCop::Cop::Base
  def on_send(node); end
end
class RuboCop::Cop::Chef::Effortless::DependsChefVault < RuboCop::Cop::Base
  def depends?(param0 = nil); end
  def on_send(node); end
end
class RuboCop::Cop::Chef::Effortless::CookbookUsesEnvironments < RuboCop::Cop::Base
  def on_send(node); end
end
class RuboCop::Cop::Chef::Effortless::CookbookUsesPolicygroups < RuboCop::Cop::Base
  def on_send(node); end
end
class RuboCop::Cop::Chef::Effortless::CookbookUsesRoles < RuboCop::Cop::Base
  def on_send(node); end
end
class RuboCop::Cop::Chef::Effortless::SearchForEnvironmentsOrRoles < RuboCop::Cop::Base
  def on_send(node); end
end
class RuboCop::Cop::Chef::Effortless::CookbookUsesSearch < RuboCop::Cop::Base
  def on_send(node); end
end
module RuboCop::Cop::Chef::Modernize
end
class RuboCop::Cop::Chef::Modernize::ActionMethodInResource < RuboCop::Cop::Base
  def includes_poise?(param0); end
  def on_def(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Modernize::AllowedActionsFromInitialize < RuboCop::Cop::Base
  def action_methods?(param0); end
  def initialize_method(param0); end
  def on_def(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Modernize::IncludingAptDefaultRecipe < RuboCop::Cop::Base
  def apt_recipe_usage?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::TargetChefVersion
end
class RuboCop::Cop::Chef::Modernize::LegacyBerksfileSource < RuboCop::Cop::Base
  def berksfile_site?(param0 = nil); end
  def berksfile_source?(param0 = nil); end
  def old_berkshelf_url?(url); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Modernize::UseBuildEssentialResource < RuboCop::Cop::Base
  def build_essential_recipe_usage?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Modernize::UnnecessaryDependsChef14 < RuboCop::Cop::Base
  def legacy_depends?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Modernize::UnnecessaryDependsChef15 < RuboCop::Cop::Base
  def legacy_depends?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Modernize::ChefGemNokogiri < RuboCop::Cop::Base
  def nokogiri_install?(param0 = nil); end
  def on_block(node); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Chef::CookbookHelpers
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Modernize::ClassEvalActionClass < RuboCop::Cop::Base
  def class_eval_action_class?(param0 = nil); end
  def on_block(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
end
class RuboCop::Cop::Chef::Modernize::ResourceForcingCompileTime < RuboCop::Cop::Base
  def compile_time_resource?(param0 = nil); end
  def on_send(node); end
end
class RuboCop::Cop::Chef::Modernize::ConditionalUsingTest < RuboCop::Cop::Base
  def on_send(node); end
  def resource_conditional?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Modernize::CronDFileOrTemplate < RuboCop::Cop::Base
  def file_or_template?(param0 = nil); end
  def on_block(node); end
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Modernize::CronManageResource < RuboCop::Cop::Base
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
end
class RuboCop::Cop::Chef::Modernize::DatabagHelpers < RuboCop::Cop::Base
  def data_bag_class_load?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Modernize::DeclareActionClass < RuboCop::Cop::Base
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
end
class RuboCop::Cop::Chef::Modernize::DefaultActionFromInitialize < RuboCop::Cop::Base
  def action_variable_assignment?(param0 = nil); end
  def default_action_method?(param0); end
  def initialize_method(param0); end
  def on_ivasgn(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Modernize::DefinesChefSpecMatchers < RuboCop::Cop::Base
  def chefspec_matcher?(param0 = nil); end
  def on_if(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Modernize::Definitions < RuboCop::Cop::Base
  def on_block(node); end
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Modernize::DependsOnChefVaultCookbook < RuboCop::Cop::Base
  def legacy_depends?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Modernize::DependsOnChocolateyCookbooks < RuboCop::Cop::Base
  def legacy_depends?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Modernize::DependsOnKernelModuleCookbook < RuboCop::Cop::Base
  def legacy_depends?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Modernize::DependsOnLocaleCookbook < RuboCop::Cop::Base
  def legacy_depends?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Modernize::DependsOnOpensslCookbook < RuboCop::Cop::Base
  def legacy_depends?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Modernize::DependsOnTimezoneLwrpCookbook < RuboCop::Cop::Base
  def legacy_depends?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Modernize::DependsOnWindowsFirewallCookbook < RuboCop::Cop::Base
  def legacy_depends?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Modernize::DependsOnZypperCookbook < RuboCop::Cop::Base
  def on_send(node); end
  def zypper_depends?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Modernize::DslIncludeInResource < RuboCop::Cop::Base
  def dsl_include?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Modernize::EmptyResourceInitializeMethod < RuboCop::Cop::Base
  def empty_initialize?(param0 = nil); end
  def on_def(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Modernize::ExecuteAptUpdate < RuboCop::Cop::Base
  def execute_apt_update?(param0 = nil); end
  def execute_command?(param0 = nil); end
  def notification_property?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Modernize::ExecuteScExe < RuboCop::Cop::Base
  def on_block(node); end
  def on_send(node); end
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Modernize::ExecuteSleep < RuboCop::Cop::Base
  def on_block(node); end
  def on_send(node); end
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Modernize::ExecuteSysctl < RuboCop::Cop::Base
  def on_block(node); end
  def on_send(node); end
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Modernize::ExecuteTzUtil < RuboCop::Cop::Base
  def calls_tzutil?(ast_obj); end
  def execute_resource?(param0 = nil); end
  def on_block(node); end
  def on_send(node); end
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Modernize::FoodcriticComments < RuboCop::Cop::Base
  def on_new_investigation; end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Modernize::IfProvidesDefaultAction < RuboCop::Cop::Base
  def on_defined?(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Modernize::IncludingMixinShelloutInResources < RuboCop::Cop::Base
  def check_for_offenses(node); end
  def hwrp_classes?(param0); end
  def include_shellout?(param0 = nil); end
  def on_send(node); end
  def require_shellout?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Modernize::LibarchiveFileResource < RuboCop::Cop::Base
  def notification_property?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
end
class RuboCop::Cop::Chef::Modernize::MacOsXUserdefaults < RuboCop::Cop::Base
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
end
class RuboCop::Cop::Chef::Modernize::MinitestHandlerUsage < RuboCop::Cop::Base
  def minitest_depends?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Modernize::NodeInitPackage < RuboCop::Cop::Base
  def compare_init_system?(param0 = nil); end
  def file_reads_proc_1_comm?(param0 = nil); end
  def file_systemd_conditional?(param0 = nil); end
  def on_send(node); end
  def proc_1_comm_exists?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Modernize::NodeRolesInclude < RuboCop::Cop::Base
  def node_role_include?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Modernize::IncludingOhaiDefaultRecipe < RuboCop::Cop::Base
  def ohai_recipe_usage?(param0 = nil); end
  def on_send(node); end
end
class RuboCop::Cop::Chef::Modernize::OpensslRsaKeyResource < RuboCop::Cop::Base
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
end
class RuboCop::Cop::Chef::Modernize::OpensslX509Resource < RuboCop::Cop::Base
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
end
class RuboCop::Cop::Chef::Modernize::OsxConfigProfileResource < RuboCop::Cop::Base
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Modernize::PowershellScriptExpandArchive < RuboCop::Cop::Base
  def on_block(node); end
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Modernize::PowerShellGuardInterpreter < RuboCop::Cop::Base
  def on_block(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Chef::CookbookHelpers
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Modernize::PowershellInstallPackage < RuboCop::Cop::Base
  def on_block(node); end
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Modernize::PowershellInstallWindowsFeature < RuboCop::Cop::Base
  def on_block(node); end
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Modernize::PropertyWithNameAttribute < RuboCop::Cop::Base
  def on_send(node); end
  def property_with_name_attribute?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Modernize::ProvidesFromInitialize < RuboCop::Cop::Base
  def initialize_method(param0); end
  def on_ivasgn(node); end
  def provides_assignment?(param0 = nil); end
  def provides_method?(param0); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Modernize::ResourceNameFromInitialize < RuboCop::Cop::Base
  def initialize_method(param0); end
  def on_def(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Modernize::SetOrReturnInResources < RuboCop::Cop::Base
  def on_send(node); end
end
class RuboCop::Cop::Chef::Modernize::CustomResourceWithAttributes < RuboCop::Cop::Base
  def attribute?(param0 = nil); end
  def on_send(node); end
  def resource_actions?(param0); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Modernize::RespondToCompileTime < RuboCop::Cop::Base
  def compile_time_method_defined?(param0 = nil); end
  def on_block(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Modernize::RespondToInMetadata < RuboCop::Cop::Base
  def if_respond_to?(param0 = nil); end
  def on_defined?(node); end
  def on_if(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
end
class RuboCop::Cop::Chef::Modernize::RespondToProvides < RuboCop::Cop::Base
  def if_respond_to_provides?(param0 = nil); end
  def on_if(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Modernize::RespondToResourceName < RuboCop::Cop::Base
  def if_respond_to_resource_name?(param0 = nil); end
  def on_if(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Modernize::WindowsScResource < RuboCop::Cop::Base
  def on_send(node); end
  extend RuboCop::Cop::TargetChefVersion
end
class RuboCop::Cop::Chef::Modernize::SevenZipArchiveResource < RuboCop::Cop::Base
  def on_send(node); end
  extend RuboCop::Cop::TargetChefVersion
end
class RuboCop::Cop::Chef::Modernize::ShellOutHelper < RuboCop::Cop::Base
  def mixlib_shellout_run_cmd?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
end
class RuboCop::Cop::Chef::Modernize::ShellOutToChocolatey < RuboCop::Cop::Base
  def on_block(node); end
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Modernize::SimplifyAptPpaSetup < RuboCop::Cop::Base
  def on_block(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Chef::CookbookHelpers
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Modernize::SysctlParamResource < RuboCop::Cop::Base
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Modernize::UnnecessaryMixlibShelloutRequire < RuboCop::Cop::Base
  def on_send(node); end
  def require_mixlibshellout?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Modernize::UseChefLanguageCloudHelpers < RuboCop::Cop::Base
  def node_cloud?(param0 = nil); end
  def on_send(node); end
  def provider_comparison?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
end
class RuboCop::Cop::Chef::Modernize::UseChefLanguageEnvHelpers < RuboCop::Cop::Base
  def env?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
end
class RuboCop::Cop::Chef::Modernize::UseChefLanguageSystemdHelper < RuboCop::Cop::Base
  def node_init_package?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
end
class RuboCop::Cop::Chef::Modernize::UseMultipackageInstalls < RuboCop::Cop::Base
  def multipackage_platforms?(condition_obj); end
  def on_if(node); end
  def on_when(node); end
  def package_array_install(param0); end
  def platform_helper?(param0 = nil); end
  def platform_or_platform_family?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Modernize::UseRequireRelative < RuboCop::Cop::Base
  def on_send(node); end
  def require_with_expand_path?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Modernize::WhyRunSupportedTrue < RuboCop::Cop::Base
  def on_def(node); end
  def whyrun_true?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Modernize::IncludingWindowsDefaultRecipe < RuboCop::Cop::Base
  def on_send(node); end
  def windows_recipe_usage?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Modernize::WindowsRegistryUAC < RuboCop::Cop::Base
  def correct_key?(node); end
  def on_block(node); end
  def uac_supported_values?(node); end
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Modernize::WindowsZipfileUsage < RuboCop::Cop::Base
  def on_send(node); end
  extend RuboCop::Cop::TargetChefVersion
end
class RuboCop::Cop::Chef::Modernize::ZipfileResource < RuboCop::Cop::Base
  def depends_zipfile?(param0 = nil); end
  def on_block(node); end
  def on_send(node); end
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Chef::CookbookHelpers
end
class RuboCop::Cop::Chef::Modernize::UsesZypperRepo < RuboCop::Cop::Base
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetChefVersion
end
module RuboCop::Cop::Chef::RedundantCode
end
class RuboCop::Cop::Chef::RedundantCode::AptRepositoryDistributionDefault < RuboCop::Cop::Base
  def default_dist?(param0 = nil); end
  def on_block(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Chef::CookbookHelpers
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::RedundantCode::AptRepositoryNotifiesAptUpdate < RuboCop::Cop::Base
  def on_block(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Chef::CookbookHelpers
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::RedundantCode::AttributeMetadata < RuboCop::Cop::Base
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Chef::AutocorrectHelpers
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::RedundantCode::ConflictsMetadata < RuboCop::Cop::Base
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::RedundantCode::CustomResourceWithAllowedActions < RuboCop::Cop::Base
  def on_send(node); end
  def poise_require(param0); end
  def resource_actions?(param0); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::RedundantCode::DoubleCompileTime < RuboCop::Cop::Base
  def compile_time_and_run_action?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::RedundantCode::GroupingMetadata < RuboCop::Cop::Base
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Chef::AutocorrectHelpers
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::RedundantCode::LongDescriptionMetadata < RuboCop::Cop::Base
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Chef::AutocorrectHelpers
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::RedundantCode::MultiplePlatformChecks < RuboCop::Cop::Base
  def on_or(node); end
  def or_platform_helpers?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::RedundantCode::NamePropertyIsRequired < RuboCop::Cop::Base
  def name_property_and_required?(param0 = nil); end
  def on_send(node); end
end
class RuboCop::Cop::Chef::RedundantCode::OhaiAttributeToString < RuboCop::Cop::Base
  def attribute_to_s?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::RedundantCode::PropertySplatRegex < RuboCop::Cop::Base
  def on_send(node); end
  def property_with_regex_splat?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::RedundantCode::PropertyWithRequiredAndDefault < RuboCop::Cop::Base
  def on_send(node); end
  def required_and_default?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::RedundantCode::ProvidesMetadata < RuboCop::Cop::Base
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::RedundantCode::RecipeMetadata < RuboCop::Cop::Base
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Chef::AutocorrectHelpers
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::RedundantCode::ReplacesMetadata < RuboCop::Cop::Base
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::RedundantCode::ResourceWithNothingAction < RuboCop::Cop::Base
  def nothing_action?(param0 = nil); end
  def on_block(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::RedundantCode::SensitivePropertyInResource < RuboCop::Cop::Base
  def on_send(node); end
  def sensitive_property?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::RedundantCode::StringPropertyWithNilDefault < RuboCop::Cop::Base
  def on_send(node); end
  def string_and_nil_like?(param0 = nil); end
  def string_property_with_nil_default?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::RedundantCode::SuggestsMetadata < RuboCop::Cop::Base
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::RedundantCode::UnnecessaryDesiredState < RuboCop::Cop::Base
  def on_send(node); end
  def property?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::RedundantCode::UnnecessaryNameProperty < RuboCop::Cop::Base
  def name_property?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::RedundantCode::UseCreateIfMissing < RuboCop::Cop::Base
  def create_action(param0); end
  def file_exist_value(param0 = nil); end
  def has_action?(param0); end
  def on_block(node); end
  def path_property_node(param0); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Chef::CookbookHelpers
  include RuboCop::Cop::RangeHelp
end
module RuboCop::Cop::Chef::Security
end
class RuboCop::Cop::Chef::Security::SshPrivateKey < RuboCop::Cop::Base
  def on_send(node); end
end
module RuboCop::Cop::Chef::Sharing
end
class RuboCop::Cop::Chef::Sharing::DefaultMetadataMaintainer < RuboCop::Cop::Base
  def default_metadata?(param0 = nil); end
  def on_send(node); end
end
class RuboCop::Cop::Chef::Sharing::EmptyMetadataField < RuboCop::Cop::Base
  def field?(param0 = nil); end
  def on_send(node); end
end
class RuboCop::Cop::Chef::Sharing::IncludePropertyDescriptions < RuboCop::Cop::Base
  def description_hash?(param0); end
  def on_send(node); end
  def property?(param0 = nil); end
  extend RuboCop::Cop::TargetChefVersion
end
class RuboCop::Cop::Chef::Sharing::IncludeResourceDescriptions < RuboCop::Cop::Base
  def on_new_investigation; end
  def resource_description(param0); end
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Sharing::IncludeResourceExamples < RuboCop::Cop::Base
  def on_new_investigation; end
  def resource_examples(param0); end
  extend RuboCop::Cop::TargetChefVersion
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Sharing::InsecureCookbookURL < RuboCop::Cop::Base
  def insecure_cb_url?(param0 = nil); end
  def insecure_url?(url); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Sharing::InvalidLicenseString < RuboCop::Cop::Base
  def autocorrect_license_string(bad_string); end
  def license?(param0 = nil); end
  def on_send(node); end
  def valid_license?(license); end
  extend RuboCop::Cop::AutoCorrector
end
module RuboCop::Cop::Chef::Style
end
class RuboCop::Cop::Chef::Style::AttributeKeys < RuboCop::Cop::Base
  def node_attribute_access?(param0 = nil); end
  def node_level_attribute_access?(param0 = nil); end
  def on_node_attribute_access(node); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::ConfigurableEnforcedStyle
end
class RuboCop::Cop::Chef::Style::ChefWhaaat < RuboCop::Cop::Base
  def on_new_investigation; end
end
class RuboCop::Cop::Chef::Style::CommentSentenceSpacing < RuboCop::Cop::Base
  def on_new_investigation; end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Style::CopyrightCommentFormat < RuboCop::Cop::Base
  def copyright_date_range(comment); end
  def copyright_holder(comment); end
  def invalid_copyright_comment?(comment); end
  def marketing_sanitizer(name); end
  def on_new_investigation; end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Style::DefaultCopyrightComments < RuboCop::Cop::Base
  def on_new_investigation; end
end
class RuboCop::Cop::Chef::Style::CommentFormat < RuboCop::Cop::Base
  def on_new_investigation; end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Style::FileMode < RuboCop::Cop::Base
  def octal?(node); end
  def on_send(node); end
  def resource_mode?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Style::ImmediateNotificationTiming < RuboCop::Cop::Base
  def immediate_notify?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Style::IncludeRecipeWithParentheses < RuboCop::Cop::Base
  def include_recipe?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Style::NegatingOnlyIf < RuboCop::Cop::Base
  def negated_only_if?(param0 = nil); end
  def on_block(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Style::OverlyComplexSupportsDependsMetadata < RuboCop::Cop::Base
  def on_block(node); end
  def supports_depends_array?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Style::SimplifyPlatformMajorVersionCheck < RuboCop::Cop::Base
  def add_offense_to_i_if_present(node); end
  def on_send(node); end
  def parent_method_equals?(node, name); end
  def platform_version_check?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Style::TrueClassFalseClassResourceProperties < RuboCop::Cop::Base
  def on_send(node); end
  def trueclass_falseclass_property?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Style::UnnecessaryOSCheck < RuboCop::Cop::Base
  def array_from_ast(ast); end
  def on_send(node); end
  def os_eql?(param0 = nil); end
  def os_equals?(param0 = nil); end
  def os_include?(param0 = nil); end
  def sanitized_platform(plat); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Style::UnnecessaryPlatformCaseStatement < RuboCop::Cop::Base
  def empty_case_statement?(node); end
  def on_case(node); end
  def platform_case?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Style::UsePlatformHelpers < RuboCop::Cop::Base
  def on_send(node); end
  def platform_eql?(param0 = nil); end
  def platform_equals?(param0 = nil); end
  def platform_include?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
end
module RuboCop::Cop::Chef::Ruby
end
class RuboCop::Cop::Chef::Ruby::GemspecLicense < RuboCop::Cop::Base
  def eval_method(param0); end
  def license(param0); end
  def on_new_investigation; end
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Ruby::GemspecRequireRubygems < RuboCop::Cop::Base
  def on_send(node); end
  def require_rubygems?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Chef::Ruby::LegacyPowershellOutMethods < RuboCop::Cop::Base
  def on_send(node); end
end
class RuboCop::Cop::Chef::Ruby::RequireNetHttps < RuboCop::Cop::Base
  def on_send(node); end
  def require_net_https?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Chef::Ruby::UnlessDefinedRequire < RuboCop::Cop::Base
  def on_send(node); end
  def require?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
end
module RuboCop::Cop::InSpec
end
module RuboCop::Cop::InSpec::Deprecations
end
class RuboCop::Cop::InSpec::Deprecations::AttributeDefault < RuboCop::Cop::Base
  def default?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::InSpec::Deprecations::AttributeHelper < RuboCop::Cop::Base
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end

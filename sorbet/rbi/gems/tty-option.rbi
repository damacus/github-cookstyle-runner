# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/tty-option/all/tty-option.rbi
#
# tty-option-0.3.0

module TTY
end
module TTY::Option
  def self.included(base); end
end
module TTY::Option::Const
end
module TTY::Option::Converter
  def [](name); end
  def contain?(name); end
  def conversions; end
  def convert(*names, &block); end
  def fetch(name); end
  def raise_unsupported_error(conv_name); end
end
module TTY::Option::Conversions
  extend TTY::Option::Converter
end
module TTY::Option::DSL
  def argument(name, **settings, &block); end
  def banner(*args, **, &block); end
  def command(*args, **, &block); end
  def desc(*args, **, &block); end
  def env(name, **settings, &block); end
  def environment(name, **settings, &block); end
  def example(*args, **, &block); end
  def flag(name, **settings, &block); end
  def footer(*args, **, &block); end
  def header(*args, **, &block); end
  def ignore(*names); end
  def keyword(name, **settings, &block); end
  def no_command(*args, **, &block); end
  def opt(name, **settings, &block); end
  def option(name, **settings, &block); end
  def parameters; end
  def program(*args, **, &block); end
  def skip(*names); end
  def usage(**properties, &block); end
  extend Forwardable
  include TTY::Option::DSL::Arity
  include TTY::Option::DSL::Conversion
  include TTY::Option::Inflection
end
module TTY::Option::DSL::Arity
  def any; end
  def any_args; end
  def at_least(number); end
  def one; end
  def one_or_more; end
  def two; end
  def two_or_more; end
  def zero_or_more; end
end
module TTY::Option::DSL::Conversion
  def list_of(type); end
  def map_of(type); end
end
module TTY::Option::Inflection
  def dasherize(name); end
  def demodulize(name); end
  def self.dasherize(name); end
  def self.demodulize(name); end
  def self.underscore(name); end
  def underscore(name); end
end
module TTY::Option::DeepDup
  def self.deep_dup(object, cache = nil); end
  def self.deep_dup_array(object, cache); end
  def self.deep_dup_hash(object, cache); end
end
class TTY::Option::Parameter
  def <=>(other); end
  def ==(other); end
  def arity(value = nil); end
  def check_arity(value); end
  def check_default(value); end
  def check_permitted(value); end
  def check_required(value); end
  def check_validation(value); end
  def convert(value = nil); end
  def convert?; end
  def default(value = nil); end
  def default?; end
  def default_arity; end
  def default_name; end
  def defaults(value = nil); end
  def desc(value = nil); end
  def desc?; end
  def display?; end
  def dup; end
  def eql?(other); end
  def hidden; end
  def hidden?; end
  def initialize(key, **settings, &block); end
  def key; end
  def min_arity; end
  def multi_argument?; end
  def multiple?; end
  def name(value = nil); end
  def optional; end
  def optional?; end
  def permit(value = nil); end
  def permit?; end
  def required; end
  def required?; end
  def self.create(key, **settings, &block); end
  def to_h(&block); end
  def to_sym; end
  def validate(value = nil); end
  def validate?; end
  include Comparable
  include TTY::Option::DSL::Arity
  include TTY::Option::DSL::Conversion
end
class TTY::Option::Parameter::Argument < TTY::Option::Parameter
  def required?; end
end
class TTY::Option::Parameter::Environment < TTY::Option::Parameter
  def <=>(other); end
  def default_name; end
end
class TTY::Option::Parameter::Keyword < TTY::Option::Parameter
  def required?; end
end
class TTY::Option::Parameter::Option < TTY::Option::Parameter
  def <=>(other); end
  def argument_optional?; end
  def argument_required?; end
  def default_long; end
  def default_name; end
  def long(value = nil); end
  def long?; end
  def long_name; end
  def short(value = nil); end
  def short?; end
  def short_name; end
end
class TTY::Option::Parameters
  def <<(parameter); end
  def add(parameter); end
  def argument?(param); end
  def arguments; end
  def arguments?; end
  def check_key_uniqueness!(key); end
  def check_long_option_uniqueness!(long_name); end
  def check_short_option_uniqueness!(short_name); end
  def delete(*keys); end
  def dup; end
  def each(&block); end
  def environment?(param); end
  def environments; end
  def environments?; end
  def initialize; end
  def keyword?(param); end
  def keywords; end
  def keywords?; end
  def list; end
  def option?(param); end
  def options; end
  def options?; end
  def self.define_param_query(name); end
  def self.define_query(name); end
  include Enumerable
end
class TTY::Option::Usage
  def banner(value = nil); end
  def banner?; end
  def command(*values); end
  def command?; end
  def commands(*values); end
  def desc(*values); end
  def desc?; end
  def description(*values); end
  def description?; end
  def example(*values); end
  def example?; end
  def examples(*values); end
  def examples?; end
  def footer(*values); end
  def footer?; end
  def header(*values); end
  def header?; end
  def initialize(**properties, &block); end
  def no_command; end
  def no_command?; end
  def program(name = nil); end
  def self.create(**properties, &block); end
  def to_h(&block); end
end
class TTY::Option::Error < StandardError
end
class TTY::Option::ConfigurationError < TTY::Option::Error
end
class TTY::Option::ParameterConflict < TTY::Option::Error
end
class TTY::Option::ConversionAlreadyDefined < TTY::Option::Error
end
class TTY::Option::ConversionError < TTY::Option::Error
end
class TTY::Option::UnsupportedConversion < TTY::Option::Error
end
class TTY::Option::ParseError < TTY::Option::Error
  def format_value(value); end
  def param; end
  def param=(arg0); end
end
class TTY::Option::InvalidParameter < TTY::Option::ParseError
end
class TTY::Option::AmbiguousOption < TTY::Option::ParseError
end
class TTY::Option::InvalidArgument < TTY::Option::ParseError
  def initialize(param_or_message, value = nil); end
end
class TTY::Option::InvalidArity < TTY::Option::ParseError
  def initialize(param_or_message, arity = nil); end
  def pluralize(noun, count = nil); end
end
class TTY::Option::InvalidConversionArgument < TTY::Option::ParseError
  def initialize(param, value); end
end
class TTY::Option::MissingArgument < TTY::Option::ParseError
  def initialize(param); end
end
class TTY::Option::MissingParameter < TTY::Option::ParseError
  def initialize(param_or_message); end
end
class TTY::Option::UnpermittedArgument < TTY::Option::ParseError
  def format_choices(choices); end
  def initialize(param_or_message, value = nil); end
end
module TTY::Option::UsageWrapper
  def next_line(text, wrap: nil); end
  def self.next_line(text, wrap: nil); end
  def self.wrap(text, width: nil, indent: nil, indent_first: nil); end
  def wrap(text, width: nil, indent: nil, indent_first: nil); end
end
class TTY::Option::AggregateErrors
  def add(error); end
  def any?(*args, **, &block); end
  def clear(*args, **, &block); end
  def each(&block); end
  def empty?(*args, **, &block); end
  def initialize(errors = nil); end
  def messages; end
  def size(*args, **, &block); end
  def summary(width: nil, indent: nil); end
  extend Forwardable
  include Enumerable
  include TTY::Option::UsageWrapper
end
class TTY::Option::Params
  def ==(other); end
  def [](key); end
  def []=(key, value); end
  def each_key(*args, **, &block); end
  def each_value(*args, **, &block); end
  def empty?(*args, **, &block); end
  def eql?(other); end
  def errors; end
  def fetch(key, *args, &block); end
  def has_key?(*args, **, &block); end
  def has_value?(*args, **, &block); end
  def hash; end
  def include?(*args, **, &block); end
  def initialize(parameters, remaining: nil, errors: nil); end
  def inspect; end
  def key?(*args, **, &block); end
  def keys(*args, **, &block); end
  def member?(*args, **, &block); end
  def merge!(other_params); end
  def merge(other_params); end
  def remaining; end
  def self.create(parameters = nil, remaining = nil, errors = nil); end
  def to_h; end
  def to_s; end
  def valid?; end
  def value?(*args, **, &block); end
  extend Forwardable
end
class TTY::Option::ErrorAggregator
  def call(error, message = nil); end
  def errors; end
  def initialize(errors = nil, raise_on_parse_error: nil); end
  include TTY::Option::Inflection
end
class TTY::Option::Result
  def error; end
  def failure?; end
  def self.failure(value); end
  def self.success(value); end
  def success?; end
  def value; end
end
class TTY::Option::Result::Success < TTY::Option::Result
  def initialize(value); end
end
class TTY::Option::Result::Failure < TTY::Option::Result
  def initialize(error); end
end
module TTY::Option::ParamConversion
  def [](param, value); end
  def call(param, value); end
  def self.[](param, value); end
  def self.call(param, value); end
end
module TTY::Option::ParamPermitted
  def [](param, value); end
  def call(param, value); end
  def self.[](param, value); end
  def self.call(param, value); end
end
module TTY::Option::ParamValidation
  def [](param, value); end
  def call(param, value); end
  def self.[](param, value); end
  def self.call(param, value); end
  def self.valid?(param, value); end
  def self.valid_or_error(param, value); end
  def self.validate_array(param, values); end
  def self.validate_hash(param, values); end
  def self.validate_object(param, value, &block); end
  def valid?(param, value); end
  def valid_or_error(param, value); end
  def validate_array(param, values); end
  def validate_hash(param, values); end
  def validate_object(param, value, &block); end
end
class TTY::Option::Pipeline
  def call(param, value); end
  def initialize(error_aggregator); end
end
class TTY::Option::Parser
  def config; end
  def initialize(parameters, **config); end
  def parameters; end
  def parse(argv, env); end
end
module TTY::Option::Parser::ParamTypes
  def argument?(value); end
  def env_var?(value); end
  def keyword?(value); end
  def option?(value); end
end
class TTY::Option::Parser::RequiredCheck
  def <<(param); end
  def add(param); end
  def call; end
  def delete(param); end
  def initialize(error_aggregator); end
end
class TTY::Option::Parser::Arguments
  def assign_argument(arg, values); end
  def initialize(arguments, check_invalid_params: nil, raise_on_parse_error: nil); end
  def next_argument(arg); end
  def parse(argv); end
  def process_exact_arity(arg); end
  def process_infinite_arity(arg); end
  include TTY::Option::Parser::ParamTypes
end
class TTY::Option::Parser::ArityCheck
  def <<(param); end
  def add(param); end
  def call(arities); end
  def initialize(error_aggregator); end
end
class TTY::Option::Parser::Environments
  def assign_envvar(env_arg, val); end
  def consume_arguments(values: nil); end
  def initialize(environments, check_invalid_params: nil, raise_on_parse_error: nil); end
  def next_envvar; end
  def parse(argv, env); end
  include TTY::Option::Parser::ParamTypes
end
class TTY::Option::Parser::Keywords
  def assign_keyword(kwarg, val); end
  def consume_arguments(values: nil); end
  def initialize(keywords, check_invalid_params: nil, raise_on_parse_error: nil); end
  def next_keyword; end
  def parse(argv); end
  include TTY::Option::Parser::ParamTypes
end
class TTY::Option::Parser::Options
  def assign_option(opt, val); end
  def consume_arguments(values: nil); end
  def initialize(options, check_invalid_params: nil, raise_on_parse_error: nil); end
  def next_option; end
  def parse(argv); end
  def process_double_option(long, sep, rest); end
  def process_single_option(short, other_singles); end
  def setup_opts; end
  include TTY::Option::Parser::ParamTypes
end
class TTY::Option::Section
  def content; end
  def content=(arg0); end
  def empty?; end
  def initialize(name, content = nil); end
  def name; end
  def name=(arg0); end
  def to_a; end
  def to_s; end
end
class TTY::Option::Sections
  def [](name); end
  def add(name, content); end
  def add_after(name, sect_name, sect_content); end
  def add_before(name, sect_name, sect_content); end
  def delete(*names); end
  def each(&block); end
  def find_index(name); end
  def initialize; end
  def replace(name, content); end
  def size(*args, **, &block); end
  def to_a(*args, **, &block); end
  extend Forwardable
  include Enumerable
end
class TTY::Option::Formatter
  def find_longest_long_option; end
  def find_longest_parameter(params, &name_selector); end
  def find_longest_short_option; end
  def format_argument_usage(arg); end
  def format_arguments_usage; end
  def format_default(param); end
  def format_description; end
  def format_examples; end
  def format_keyword_usage(kwarg); end
  def format_keywords_usage; end
  def format_long_option(option, longest); end
  def format_multiline(lines, indent); end
  def format_option(option, longest_short, longest_long); end
  def format_options; end
  def format_parameter_description(param); end
  def format_parameter_usage(param, param_name); end
  def format_permitted(values); end
  def format_section(params, name_selector = nil); end
  def format_section_parameter(param, longest_param, name_selector); end
  def format_short_option(option, longest); end
  def format_usage; end
  def help; end
  def help_arguments; end
  def help_banner; end
  def help_description; end
  def help_environments; end
  def help_examples; end
  def help_footer; end
  def help_header; end
  def help_keywords; end
  def help_options; end
  def initialize(parameters, usage, param_display: nil, width: nil, order: nil, indent: nil); end
  def kwarg_param_display(kwarg, param_display = nil); end
  def parameter_default?(param); end
  def parameter_description?(param); end
  def self.help(parameters, usage, **config, &block); end
  def short_and_long_option_separator(option); end
  include TTY::Option::UsageWrapper
end
module TTY::Option::Inheritance
  def inherited(subclass); end
end
module TTY::Option::Interface
  def help(**config, &block); end
  def params; end
  def parse(argv = nil, env = nil, check_invalid_params: nil, raise_on_parse_error: nil); end
end

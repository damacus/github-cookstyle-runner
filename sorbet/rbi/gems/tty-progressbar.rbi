# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/tty-progressbar/all/tty-progressbar.rbi
#
# tty-progressbar-0.2.0

module TTY
end
class TTY::ProgressBar
  def advance(progress = nil); end
  def complete; end
  def complete?; end
  def current; end
  def default_pipeline; end
  def finish; end
  def format; end
  def hide_cursor; end
  def incomplete; end
  def initialize(format, options = nil); end
  def log(message); end
  def max_columns; end
  def no_width; end
  def output; end
  def padout(message); end
  def ratio; end
  def register_callbacks; end
  def render; end
  def resize(new_width); end
  def start_at; end
  def total; end
  def use(*args, **, &block); end
  def width; end
  def write(data, clear_first = nil); end
  extend Forwardable
end
class TTY::ProgressBar::Converter
  def to_time(seconds); end
end
class TTY::ProgressBar::Pipeline
  def decorate(progress, tokenized); end
  def each(&block); end
  def formatters; end
  def initialize(formatters = nil); end
  def use(formatter, *args, &block); end
  include Enumerable
end
class TTY::ProgressBar::BarFormatter
  def format(value); end
  def initialize(progress, *args, &block); end
end
class TTY::ProgressBar::CurrentFormatter
  def format(value); end
  def initialize(progress); end
end
class TTY::ProgressBar::ElapsedFormatter
  def format(value); end
  def initialize(progress, *args, &block); end
end
class TTY::ProgressBar::EstimatedFormatter
  def format(value); end
  def initialize(progress); end
end
class TTY::ProgressBar::PercentFormatter
  def format(value); end
  def initialize(progress, *args, &block); end
end
class TTY::ProgressBar::TotalFormatter
  def format(value); end
  def initialize(progress, *args, &block); end
end

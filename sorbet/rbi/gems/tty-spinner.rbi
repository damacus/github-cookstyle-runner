# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/tty-spinner/all/tty-spinner.rbi
#
# tty-spinner-0.9.3

module TTY
end
class TTY::Spinner
  def attach_to(multispinner); end
  def auto_spin; end
  def clear_line; end
  def done?; end
  def duration; end
  def emit(name, *args); end
  def error(stop_message = nil); end
  def error?; end
  def execute_job; end
  def execute_on_line; end
  def fetch_format(token, property); end
  def format; end
  def hide_cursor; end
  def initialize(*args); end
  def interval; end
  def job(&work); end
  def job?; end
  def join(timeout = nil); end
  def kill; end
  def message; end
  def next_char; end
  def on(name, &block); end
  def output; end
  def pause; end
  def paused?; end
  def redraw_indent; end
  def replace_tokens(string); end
  def reset; end
  def resume; end
  def row; end
  def run(stop_message = nil, &block); end
  def spin; end
  def spinning?; end
  def start; end
  def stop(stop_message = nil); end
  def success(stop_message = nil); end
  def success?; end
  def tokens; end
  def tty?; end
  def update(tokens); end
  def write(data, clear_first = nil); end
  include MonitorMixin
  include TTY::Formats
end
module TTY::Formats
end
class TTY::Spinner::NotSpinningError < StandardError
end
class TTY::Spinner::Multi
  def auto_spin; end
  def create_spinner(pattern_or_spinner, options); end
  def done?; end
  def done_handler; end
  def each(*args, **, &block); end
  def emit(key, *args); end
  def empty?(*args, **, &block); end
  def error; end
  def error?; end
  def error_handler; end
  def initialize(*args); end
  def length(*args, **, &block); end
  def line_inset(line_no); end
  def next_row; end
  def observe(spinner); end
  def on(key, &callback); end
  def pause; end
  def register(pattern_or_spinner, **options, &job); end
  def resume; end
  def rows; end
  def spin; end
  def spin_handler; end
  def stop; end
  def success; end
  def success?; end
  def success_handler; end
  def throttle; end
  def top_spinner; end
  extend Forwardable
  include Enumerable
  include MonitorMixin
end

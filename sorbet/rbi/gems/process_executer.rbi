# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: false
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/process_executer/all/process_executer.rbi
#
# process_executer-1.3.0

module ProcessExecuter
  def self.run(*command, logger: nil, **options_hash); end
  def self.spawn(*command, **options_hash); end
  def self.wait_for_process(pid, options); end
end
class ProcessExecuter::MonitoredPipe
  def chunk_size; end
  def close; end
  def close_pipe; end
  def exception; end
  def file_descriptor?(writer); end
  def fileno; end
  def initialize(*writers, chunk_size: nil); end
  def monitor; end
  def monitor_pipe; end
  def pipe_reader; end
  def pipe_writer; end
  def state; end
  def thread; end
  def to_io; end
  def write(data); end
  def write_data(data); end
  def write_data_to_fd(file_descriptor, data); end
  def writers; end
end
class ProcessExecuter::Options
  def assert_no_unknown_options(options); end
  def assert_timeout_is_valid; end
  def chdir; end
  def close_others; end
  def err; end
  def in; end
  def include_spawn_option?(option, value); end
  def initialize(**options); end
  def invalid_timeout_message; end
  def new_pgroup; end
  def options; end
  def out; end
  def pgroup; end
  def rlimit_resourcename; end
  def spawn_options; end
  def timeout; end
  def umask; end
  def unsetenv_others; end
  def valid_option?(option); end
end
module ProcessExecuter::Command
end
class ProcessExecuter::Command::Error < StandardError
end
class ProcessExecuter::Command::CommandError < ProcessExecuter::Command::Error
  def error_message; end
  def initialize(result); end
  def result; end
end
class ProcessExecuter::Command::FailedError < ProcessExecuter::Command::CommandError
end
class ProcessExecuter::Command::SignaledError < ProcessExecuter::Command::CommandError
end
class ProcessExecuter::Command::TimeoutError < ProcessExecuter::Command::SignaledError
  def initialize(result, timeout_duration); end
  def timeout_duration; end
end
class ProcessExecuter::Command::ProcessIOError < ProcessExecuter::Command::Error
end
class ProcessExecuter::Command::Result < SimpleDelegator
  def command; end
  def initialize(command, status, stdout, stderr); end
  def stderr; end
  def stderr_to_s; end
  def stdout; end
  def stdout_to_s; end
end
class ProcessExecuter::Command::Runner
  def call(*command, out: nil, err: nil, merge: nil, raise_errors: nil, **options_hash); end
  def initialize(logger); end
  def log_result(result); end
  def logger; end
  def process_result(command, status, out, err, timeout, raise_errors); end
  def raise_pipe_error(command, pipe_name, pipe); end
  def spawn(command, out:, err:, **options_hash); end
end
class ProcessExecuter::Status < SimpleDelegator
  def initialize(status, timeout, timeout_duration); end
  def success?; end
  def timeout?; end
  def timeout_duration; end
  def to_s; end
  extend Forwardable
end

# frozen_string_literal: true
# typed: true

require 'sorbet-runtime'

module CookstyleRunner
  # =============================================================================
  # GitHub Cookstyle Runner - Formatter
  # =============================================================================
  #
  # This module formats the results of Cookstyle checks into a structured format
  # for display in pull requests or issues.
  #
  module Formatter
    extend T::Sig

    # Public methods
    def self.offences(cookstyle_output)
      offences_by_file = {} # Initialize the result Hash

      # Early return if no files or not an array
      files = extract_files(cookstyle_output)
      return offences_by_file if files.empty?

      # Process each file
      files.each do |file_data|
        path, formatted_offenses = process_file(file_data)
        offences_by_file[path] = formatted_offenses unless formatted_offenses.empty?
      end

      offences_by_file
    end

    def self.format_pr_description(offense_details)
      pr_body = issue_header

      offense_details['files']&.each do |file|
        pr_body += "* **#{file['path']}**: "
        pr_body += file['offenses'].map { |o| o['cop_name'] }.uniq.join(', ')
        pr_body += "\n"
      end

      pr_body += format_summary(offense_details, false)
      pr_body
    end

    def self.format_issue_description(offences)
      issue_body = <<~ISSUE
        ## Cookstyle Manual Fixes Required

        The following Cookstyle offenses were found but require manual fixes:

      ISSUE

      issue_body += format_file_offenses(offences['files'])
      issue_body += format_summary(offences, true)
      issue_body
    end

    def self.issue_header
      <<~ISSUE
        # Cookstyle Automated Changes

        This pull request applies automatic Cookstyle fixes to ensure code quality and consistency.

        ## Changes Made

      ISSUE
    end

    def self.format_file_offenses(files)
      file_content = ''
      files&.each do |file|
        next if file['offenses'].empty?

        file_content += <<~FILE
          ### #{file['path']}

        FILE

        file['offenses'].each do |offense|
          next if offense['correctable']

          file_content += <<~OFFENSE
            * **#{offense['cop_name']}** at line #{offense['location']['line']}: #{offense['message']}
          OFFENSE
        end

        file_content += "\n"
      end

      file_content
    end

    def self.format_summary(offences, manual_fixes)
      <<~SUMMARY
        ### Summary

        * Total offenses #{manual_fixes ? 'requiring manual fixes' : 'detected'}: #{offences['summary']['offense_count']}
        * Files with issues: #{offences['files']&.length || 0}

        *This issue was automatically generated by the [GitHub Cookstyle Runner](https://github.com/damacus/github-cookstyle-runner).*
      SUMMARY
    end

    # Private methods

    def self.extract_files(cookstyle_output)
      raw_files = cookstyle_output.fetch('files', [])
      return [] unless raw_files.is_a?(Array)

      T.let(raw_files, T::Array[T::Hash[String, T.untyped]])
    end

    def self.process_file(file_data)
      path = T.let(file_data.fetch('path', 'unknown_path'), String)
      offenses = T.let(file_data.fetch('offenses', []), T::Array[T::Hash[String, T.untyped]])

      formatted_offenses = offenses.map { |offense| format_offense(offense) }

      [path, formatted_offenses]
    end

    def self.format_offense(offense)
      location_info = extract_location_info(offense)
      offense_details = extract_offense_details(offense)

      " - #{location_info} #{offense_details}"
    end

    def self.extract_location_info(offense)
      location = T.let(offense.fetch('location', {}), T::Hash[String, T.untyped])
      line = T.let(location.fetch('line', '?'), T.any(String, Integer))
      column = T.let(location.fetch('column', '?'), T.any(String, Integer))

      "#{line}:#{column}"
    end

    def self.extract_offense_details(offense)
      severity = T.let(offense.fetch('severity', 'unknown'), String)
      cop_name = T.let(offense.fetch('cop_name', 'UnknownCop'), String)
      message = T.let(offense.fetch('message', 'No message provided'), String)

      "#{severity}: `#{cop_name}` - #{message}"
    end

    private_class_method :extract_files, :process_file, :format_offense,
                         :extract_location_info, :extract_offense_details
  end
end
